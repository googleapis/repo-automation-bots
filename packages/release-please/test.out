
> release-please-bot@1.2.0 pretest
> npm run compile


> release-please-bot@1.2.0 compile
> tsc -p .


> release-please-bot@1.2.0 test
> cross-env LOG_LEVEL=fatal c8 mocha --exit build/test



  release-please bot
    config schema check on PRs
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"INFO","level":30,"message":"found 1 configuration(s) for master"}
{"severity":"DEBUG","level":10,"message":"file: .github/release-please.yml"}
      ✔ should not create a failing status check for a correct config (102ms)
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"INFO","level":30,"message":"found 1 configuration(s) for master"}
{"severity":"DEBUG","level":10,"message":"file: .github/release-please.yml"}
      ✔ should not create a failing status check for a correct config without primaryBranch (50ms)
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"WARNING","level":40,"err":{"type":"TypeError","message":"config.branches is not iterable","stack":"/home/chingor/code/repo-automation-bots/packages/release-please/src/release-please.ts:116\n    for (const branchConfig of config.branches) {\n                                      ^\n\nTypeError: config.branches is not iterable\n    at null.findBranchConfiguration (/home/chingor/code/repo-automation-bots/packages/release-please/src/release-please.ts:116:39)\n    at null.<anonymous> (/home/chingor/code/repo-automation-bots/packages/release-please/src/release-please.ts:716:36)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)\n    at async Promise.all (index 0)\n    at Context.<anonymous> (/home/chingor/code/repo-automation-bots/packages/release-please/test/compatibility-test.ts:130:7)"},"message":"config.branches is not iterable"}
{"severity":"DEBUG","level":10,"message":"file: .github/release-please.yml"}
      ✔ should create a failing status check for a broken config (83ms)
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"INFO","level":30,"message":"found 1 configuration(s) for master"}
{"severity":"DEBUG","level":10,"message":"file: .github/release-please.yml"}
{"severity":"DEBUG","level":10,"message":"file: release-please-config.json"}
{"severity":"DEBUG","level":10,"message":"file: .release-please-manifest.json"}
      ✔ should create a failing status check for broken default manifest configs (73ms)
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"INFO","level":30,"message":"found 1 configuration(s) for master"}
{"severity":"DEBUG","level":10,"message":"file: .github/release-please.yml"}
{"severity":"DEBUG","level":10,"message":"file: release-please-config.json"}
{"severity":"DEBUG","level":10,"message":"file: .release-please-manifest.json"}
      ✔ should allow valid default manifest configs (124ms)
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"INFO","level":30,"message":"found 1 configuration(s) for master"}
{"severity":"DEBUG","level":10,"message":"file: .github/release-please.yml"}
{"severity":"DEBUG","level":10,"message":"file: path/to/config.json"}
{"severity":"DEBUG","level":10,"message":"file: path/to/manifest.json"}
      ✔ should create a failing status check for broken custom manifest configs (76ms)
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"INFO","level":30,"message":"found 1 configuration(s) for master"}
{"severity":"DEBUG","level":10,"message":"file: .github/release-please.yml"}
{"severity":"DEBUG","level":10,"message":"file: path/to/config.json"}
{"severity":"DEBUG","level":10,"message":"file: path/to/manifest.json"}
      ✔ should allow valid custom manifest configs (108ms)

  getConfig
    compatibility tests
      ✔ should read a simple config
      ✔ should read a config without primaryBranch
      ✔ should read a real world java config

  config-schema
    ✔ validates a basic config
    ✔ validates extra files
    ✔ validates extra json files (68ms)
    ✔ validates extra xml files
    ✔ validates onDemand
    ✔ validates onDemand in a branch
    ✔ rejects extra fields

  ReleasePleaseBot
    push to master branch
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"INFO","level":30,"message":"push (chingor13/google-auth-library-java, master)"}
{"severity":"DEBUG","level":20,"branches":[],"manifest":true,"onDemand":false,"primaryBranch":"master","handleGHRelease":true,"branch":"master"}
{"severity":"INFO","level":30,"message":"handling GitHub release for (chingor13/google-auth-library-java)"}
{"severity":"INFO","level":30,"message":"building from manifest file"}
{"severity":"WARNING","level":40,"err":{"type":"ConfigurationError","message":"releaser-name (repo-name): some error message","stack":"/home/chingor/code/repo-automation-bots/packages/release-please/test/release-please.ts:741\n          new Errors.ConfigurationError(\n          ^\n\nConfigurationError: releaser-name (repo-name): some error message\n    at Context.<anonymous> (/home/chingor/code/repo-automation-bots/packages/release-please/test/release-please.ts:741:11)\n    at callFn (/home/chingor/code/repo-automation-bots/packages/release-please/node_modules/mocha/lib/runnable.js:366:21)\n    at Test.Runnable.run (/home/chingor/code/repo-automation-bots/packages/release-please/node_modules/mocha/lib/runnable.js:354:5)\n    at Runner.runTest (/home/chingor/code/repo-automation-bots/packages/release-please/node_modules/mocha/lib/runner.js:666:10)\n    at /home/chingor/code/repo-automation-bots/packages/release-please/node_modules/mocha/lib/runner.js:789:12\n    at next (/home/chingor/code/repo-automation-bots/packages/release-please/node_modules/mocha/lib/runner.js:581:14)\n    at /home/chingor/code/repo-automation-bots/packages/release-please/node_modules/mocha/lib/runner.js:591:7\n    at next (/home/chingor/code/repo-automation-bots/packages/release-please/node_modules/mocha/lib/runner.js:474:14)\n    at cbHookRun (/home/chingor/code/repo-automation-bots/packages/release-please/node_modules/mocha/lib/runner.js:539:7)\n    at done (/home/chingor/code/repo-automation-bots/packages/release-please/node_modules/mocha/lib/runnable.js:310:5)\n    at callFn (/home/chingor/code/repo-automation-bots/packages/release-please/node_modules/mocha/lib/runnable.js:389:7)\n    at Hook.Runnable.run (/home/chingor/code/repo-automation-bots/packages/release-please/node_modules/mocha/lib/runnable.js:354:5)\n    at next (/home/chingor/code/repo-automation-bots/packages/release-please/node_modules/mocha/lib/runner.js:498:10)\n    at Immediate.<anonymous> (/home/chingor/code/repo-automation-bots/packages/release-please/node_modules/mocha/lib/runner.js:559:5)\n    at processImmediate (internal/timers.js:464:21)","releaserName":"releaser-name","repository":"repo-name","name":"ConfigurationError"},"message":"releaser-name (repo-name): some error message"}
      ✔ should handle a misconfigured repository
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"DEBUG","level":20,"message":"Skipping archived repository"}
      ✔ ignores archived repositories
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"DEBUG","level":20,"message":"Skipping disabled repository"}
      ✔ ignores disabled repositories
      without manifest
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"INFO","level":30,"message":"push (chingor13/google-auth-library-java, master)"}
{"severity":"DEBUG","level":20,"branches":[],"manifest":false,"onDemand":false,"primaryBranch":"master","releaseLabels":["foo","bar"],"branch":"master"}
{"severity":"INFO","level":30,"message":"creating pull request for (chingor13/google-auth-library-java)"}
        ✔ should build a release PR
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"INFO","level":30,"message":"push (chingor13/google-auth-library-java, master)"}
{"severity":"DEBUG","level":20,"branches":[],"manifest":false,"onDemand":false,"primaryBranch":"master","releaseLabels":["foo","bar"],"branch":"master"}
{"severity":"INFO","level":30,"message":"creating pull request for (chingor13/google-auth-library-java)"}
        ✔ should enable sentence-case for allow listed orgs
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"INFO","level":30,"message":"push (chingor13/google-auth-library-java, master)"}
{"severity":"DEBUG","level":20,"branches":[],"manifest":false,"onDemand":false,"primaryBranch":"master","releaseLabels":["foo","bar"],"handleGHRelease":true,"branch":"master"}
{"severity":"INFO","level":30,"message":"handling GitHub release for (chingor13/google-auth-library-java)"}
{"severity":"INFO","level":30,"message":"Created undefined releases"}
{"severity":"INFO","level":30,"message":"creating pull request for (chingor13/google-auth-library-java)"}
        ✔ should handle GitHub releases, if configured
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"INFO","level":30,"message":"push (chingor13/google-auth-library-java, master)"}
{"severity":"DEBUG","level":20,"branches":[],"manifest":false,"onDemand":false,"primaryBranch":"master","releaseLabels":["foo","bar"],"handleGHRelease":true,"branch":"master"}
{"severity":"INFO","level":30,"message":"handling GitHub release for (chingor13/google-auth-library-java)"}
{"severity":"WARNING","level":40,"message":"Release tag already exists, skipping..."}
{"severity":"INFO","level":30,"message":"creating pull request for (chingor13/google-auth-library-java)"}
        ✔ should ignore duplicated GitHub releases
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"INFO","level":30,"message":"push (chingor13/google-auth-library-java, master)"}
{"severity":"DEBUG","level":20,"branches":[],"manifest":false,"onDemand":false,"primaryBranch":"master","releaseLabels":["foo","bar"],"handleGHRelease":true,"branch":"master"}
{"severity":"INFO","level":30,"message":"handling GitHub release for (chingor13/google-auth-library-java)"}
{"severity":"INFO","level":30,"message":"Created undefined releases"}
{"severity":"INFO","level":30,"message":"creating pull request for (chingor13/google-auth-library-java)"}
{"severity":"WARNING","level":40,"err":{"type":"MissingRequiredFileError","message":"YoshiJava (testOwner/testRepo): Missing required file: versions.txt","stack":"/home/chingor/code/repo-automation-bots/packages/release-please/test/release-please.ts:184\n        const error = new Errors.MissingRequiredFileError(\n                      ^\n\nMissingRequiredFileError: YoshiJava (testOwner/testRepo): Missing required file: versions.txt\n    at Context.<anonymous> (/home/chingor/code/repo-automation-bots/packages/release-please/test/release-please.ts:184:23)\n    at callFn (/home/chingor/code/repo-automation-bots/packages/release-please/node_modules/mocha/lib/runnable.js:366:21)\n    at Test.Runnable.run (/home/chingor/code/repo-automation-bots/packages/release-please/node_modules/mocha/lib/runnable.js:354:5)\n    at Runner.runTest (/home/chingor/code/repo-automation-bots/packages/release-please/node_modules/mocha/lib/runner.js:666:10)\n    at /home/chingor/code/repo-automation-bots/packages/release-please/node_modules/mocha/lib/runner.js:789:12\n    at next (/home/chingor/code/repo-automation-bots/packages/release-please/node_modules/mocha/lib/runner.js:581:14)\n    at /home/chingor/code/repo-automation-bots/packages/release-please/node_modules/mocha/lib/runner.js:591:7\n    at next (/home/chingor/code/repo-automation-bots/packages/release-please/node_modules/mocha/lib/runner.js:474:14)\n    at cbHookRun (/home/chingor/code/repo-automation-bots/packages/release-please/node_modules/mocha/lib/runner.js:539:7)\n    at done (/home/chingor/code/repo-automation-bots/packages/release-please/node_modules/mocha/lib/runnable.js:310:5)\n    at /home/chingor/code/repo-automation-bots/packages/release-please/node_modules/mocha/lib/runnable.js:371:11","releaserName":"YoshiJava","repository":"testOwner/testRepo","name":"MissingRequiredFileError","file":"versions.txt"},"message":"YoshiJava (testOwner/testRepo): Missing required file: versions.txt"}
        ✔ should ignore configuration errors
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"INFO","level":30,"message":"push (chingor13/google-auth-library-java, master)"}
{"severity":"INFO","level":30,"message":"no configuration for (chingor13/google-auth-library-java, master)"}
        ✔ should ignore if the branch is not the configured primary branch
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"INFO","level":30,"message":"push (chingor13/google-auth-library-java, master)"}
{"severity":"DEBUG","level":20,"branches":[],"manifest":false,"onDemand":false,"releaseType":"ruby","primaryBranch":"master","branch":"master"}
{"severity":"INFO","level":30,"message":"creating pull request for (chingor13/google-auth-library-java)"}
        ✔ should allow overriding the release strategy from configuration
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"INFO","level":30,"message":"push (chingor13/google-auth-library-java, master)"}
{"severity":"DEBUG","level":20,"branches":[],"manifest":false,"onDemand":false,"releaseType":"ruby","primaryBranch":"master","branch":"master"}
{"severity":"INFO","level":30,"message":"creating pull request for (chingor13/google-auth-library-java)"}
        ✔ should allow release-please to configure the default package-name
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"INFO","level":30,"message":"push (chingor13/google-auth-library-java, master)"}
{"severity":"DEBUG","level":20,"branches":[],"manifest":false,"onDemand":false,"releaseType":"ruby-yoshi","packageName":"@google-cloud/foo","primaryBranch":"master","branch":"master"}
{"severity":"INFO","level":30,"message":"creating pull request for (chingor13/google-auth-library-java)"}
        ✔ should allow overriding the package-name from configuration
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"INFO","level":30,"message":"push (chingor13/google-auth-library-java, master)"}
{"severity":"DEBUG","level":20,"branches":[],"manifest":false,"onDemand":false,"primaryBranch":"master","releaseLabels":["foo","bar"],"branch":"master"}
{"severity":"INFO","level":30,"message":"creating pull request for (chingor13/google-auth-library-java)"}
        ✔ should allow overriding the release tags from configuration
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"INFO","level":30,"message":"push (chingor13/google-auth-library-java, master)"}
{"severity":"DEBUG","level":20,"branches":[],"manifest":false,"onDemand":false,"primaryBranch":"master","handleGHRelease":true,"releaseLabel":"autorelease: published","branch":"master"}
{"severity":"INFO","level":30,"message":"handling GitHub release for (chingor13/google-auth-library-java)"}
{"severity":"INFO","level":30,"message":"Created undefined releases"}
{"severity":"INFO","level":30,"message":"creating pull request for (chingor13/google-auth-library-java)"}
        1) should allow overriding the release label when creating a release
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"INFO","level":30,"message":"release-please not configured for (chingor13/google-auth-library-java)"}
        ✔ should ignore webhook if not configured
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"INFO","level":30,"message":"push (chingor13/google-auth-library-java, master)"}
{"severity":"DEBUG","level":20,"branches":[],"manifest":false,"onDemand":false,"primaryBranch":"master","branch":"master"}
{"severity":"INFO","level":30,"message":"creating pull request for (chingor13/google-auth-library-java)"}
        ✔ should allow an empty config file with the defaults
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"INFO","level":30,"message":"push (chingor13/google-auth-library-java, master)"}
{"severity":"DEBUG","level":20,"branches":[],"manifest":false,"onDemand":false,"bumpMinorPreMajor":true,"primaryBranch":"master","branch":"master"}
{"severity":"INFO","level":30,"message":"creating pull request for (chingor13/google-auth-library-java)"}
        ✔ should allow configuring minor bump for breaking change pre 1.0
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"INFO","level":30,"message":"push (chingor13/google-auth-library-java, master)"}
{"severity":"DEBUG","level":20,"branches":[],"manifest":false,"onDemand":false,"initialVersion":"0.1.0","primaryBranch":"master","branch":"master"}
{"severity":"INFO","level":30,"message":"creating pull request for (chingor13/google-auth-library-java)"}
        ✔ should allow alternate initial version
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"INFO","level":30,"message":"push (chingor13/google-auth-library-java, master)"}
{"severity":"DEBUG","level":20,"branches":[],"manifest":false,"onDemand":false,"bumpPatchForMinorPreMajor":true,"primaryBranch":"master","branch":"master"}
{"severity":"INFO","level":30,"message":"creating pull request for (chingor13/google-auth-library-java)"}
        ✔ should allow configuring patch bump for feature changes pre 1.0
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"INFO","level":30,"message":"push (chingor13/google-auth-library-java, master)"}
{"severity":"DEBUG","level":20,"branches":[],"manifest":false,"onDemand":false,"releaseType":"node","primaryBranch":"master","branch":"master"}
{"severity":"INFO","level":30,"message":"creating pull request for (chingor13/google-auth-library-java)"}
        ✔ should detect the default branch if not specified in configuration
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"INFO","level":30,"message":"push (chingor13/google-auth-library-java, master)"}
{"severity":"DEBUG","level":20,"branches":[],"manifest":false,"onDemand":false,"primaryBranch":"master","extraFiles":["src/com/google/foo/Version.java"],"branch":"master"}
{"severity":"INFO","level":30,"message":"creating pull request for (chingor13/google-auth-library-java)"}
        ✔ should allow configuring extra files
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"INFO","level":30,"message":"push (chingor13/google-auth-library-java, master)"}
{"severity":"DEBUG","level":20,"branches":[],"manifest":false,"onDemand":false,"draft":true,"primaryBranch":"master","branch":"master"}
{"severity":"INFO","level":30,"message":"creating pull request for (chingor13/google-auth-library-java)"}
        ✔ should allow configuring draft releases
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"INFO","level":30,"message":"push (chingor13/google-auth-library-java, master)"}
{"severity":"DEBUG","level":20,"branches":[],"manifest":false,"onDemand":false,"draftPullRequest":true,"primaryBranch":"master","branch":"master"}
{"severity":"INFO","level":30,"message":"creating pull request for (chingor13/google-auth-library-java)"}
        ✔ should allow configuring draft pull requests
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"INFO","level":30,"message":"push (chingor13/google-auth-library-java, master)"}
{"severity":"DEBUG","level":20,"branches":[],"manifest":false,"onDemand":false,"pullRequestTitlePattern":"chore: release ${component} ${version}","primaryBranch":"master","branch":"master"}
{"severity":"INFO","level":30,"message":"creating pull request for (chingor13/google-auth-library-java)"}
        ✔ should allow configuring pull request title
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"INFO","level":30,"message":"push (chingor13/google-auth-library-java, master)"}
{"severity":"DEBUG","level":20,"branches":[],"manifest":false,"onDemand":false,"versionFile":"VERSION","primaryBranch":"master","branch":"master"}
{"severity":"INFO","level":30,"message":"creating pull request for (chingor13/google-auth-library-java)"}
        ✔ should allow configuring version file
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"INFO","level":30,"message":"push (chingor13/google-auth-library-java, master)"}
{"severity":"DEBUG","level":20,"branches":[],"manifest":false,"onDemand":false,"versioning":"always-bump-patch","primaryBranch":"master","branch":"master"}
{"severity":"INFO","level":30,"message":"creating pull request for (chingor13/google-auth-library-java)"}
        ✔ should allow configuring versioning strategy
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"INFO","level":30,"message":"push (chingor13/google-auth-library-java, master)"}
{"severity":"DEBUG","level":20,"branches":[],"manifest":false,"onDemand":false,"changelogType":"github","primaryBranch":"master","branch":"master"}
{"severity":"INFO","level":30,"message":"creating pull request for (chingor13/google-auth-library-java)"}
        ✔ should allow configuring changelog notes type
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"INFO","level":30,"message":"push (chingor13/google-auth-library-java, master)"}
{"severity":"DEBUG","level":20,"branches":[],"manifest":false,"onDemand":false,"monorepoTags":true,"primaryBranch":"master","branch":"master"}
{"severity":"INFO","level":30,"message":"creating pull request for (chingor13/google-auth-library-java)"}
        ✔ should allow configuring monorepo tags
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"INFO","level":30,"message":"push (chingor13/google-auth-library-java, master)"}
{"severity":"DEBUG","level":20,"branches":[],"manifest":false,"onDemand":false,"primaryBranch":"master","releaseLabels":["foo","bar"],"branch":"master"}
{"severity":"INFO","level":30,"message":"creating pull request for (chingor13/google-auth-library-java)"}
        ✔ should default monorepo tags to false
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"INFO","level":30,"message":"push (chingor13/google-auth-library-java, master)"}
{"severity":"DEBUG","level":20,"branches":[{"branch":"master","releaseType":"java-yoshi","path":"packages/java-pkg","packageName":"java"}],"manifest":false,"onDemand":false,"primaryBranch":"master","releaseType":"node","path":"packages/node-pkg","packageName":"node","branch":"master"}
{"severity":"INFO","level":30,"message":"creating pull request for (chingor13/google-auth-library-java)"}
{"severity":"DEBUG","level":20,"branch":"master","releaseType":"java-yoshi","path":"packages/java-pkg","packageName":"java"}
{"severity":"INFO","level":30,"message":"creating pull request for (chingor13/google-auth-library-java)"}
        ✔ should allow configuring multiple times for a branch
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"INFO","level":30,"message":"push (chingor13/google-auth-library-java, main)"}
{"severity":"DEBUG","level":20,"branches":[],"manifest":false,"onDemand":false,"primaryBranch":"main","branch":"main"}
{"severity":"INFO","level":30,"message":"creating pull request for (chingor13/google-auth-library-java)"}
{"severity":"WARNING","level":40,"err":{"type":"BotConfigurationError","message":"repository has no detected language","stack":"/home/chingor/code/repo-automation-bots/packages/release-please/src/release-please.ts:78\n    throw new BotConfigurationError('repository has no detected language');\n          ^\n\nError: repository has no detected language\n    at null.releaseTypeFromRepoLanguage (/home/chingor/code/repo-automation-bots/packages/release-please/src/release-please.ts:78:11)\n    at null.buildManifest (/home/chingor/code/repo-automation-bots/packages/release-please/src/release-please.ts:221:7)\n    at null.runBranchConfiguration (/home/chingor/code/repo-automation-bots/packages/release-please/src/release-please.ts:370:28)\n    at null.runBranchConfigurationWithConfigurationHandling (/home/chingor/code/repo-automation-bots/packages/release-please/src/release-please.ts:271:11)\n    at null.<anonymous> (/home/chingor/code/repo-automation-bots/packages/release-please/src/release-please.ts:475:13)\n    at async Promise.all (index 0)\n    at Context.<anonymous> (/home/chingor/code/repo-automation-bots/packages/release-please/test/release-please.ts:627:9)"},"message":"repository has no detected language"}
        ✔ should allow missing repo language and no releaseType
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"INFO","level":30,"message":"push (chingor13/google-auth-library-java, master)"}
{"severity":"INFO","level":30,"message":"skipping push event for on-demand chingor13/google-auth-library-java, master"}
        ✔ ignores non-releases for on-demand repos
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"INFO","level":30,"message":"push (chingor13/google-auth-library-java, master)"}
{"severity":"DEBUG","level":20,"branches":[],"manifest":false,"onDemand":true,"primaryBranch":"master","releaseLabels":["foo","bar"],"handleGHRelease":true,"branch":"master"}
{"severity":"INFO","level":30,"message":"handling GitHub release for (chingor13/google-auth-library-java)"}
{"severity":"INFO","level":30,"message":"Created undefined releases"}
{"severity":"INFO","level":30,"message":"skipping pull request from configuration"}
        ✔ handles releases for on-demand repos
      for manifest releases
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"INFO","level":30,"message":"push (chingor13/google-auth-library-java, master)"}
{"severity":"DEBUG","level":20,"branches":[],"manifest":true,"onDemand":false,"primaryBranch":"master","branch":"master"}
{"severity":"INFO","level":30,"message":"creating pull request for (chingor13/google-auth-library-java)"}
{"severity":"INFO","level":30,"message":"building from manifest file"}
        ✔ should build a release PR
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"INFO","level":30,"message":"push (chingor13/google-auth-library-java, master)"}
{"severity":"DEBUG","level":20,"branches":[],"manifest":true,"onDemand":false,"primaryBranch":"master","handleGHRelease":true,"branch":"master"}
{"severity":"INFO","level":30,"message":"handling GitHub release for (chingor13/google-auth-library-java)"}
{"severity":"INFO","level":30,"message":"building from manifest file"}
{"severity":"INFO","level":30,"message":"Created undefined releases"}
{"severity":"INFO","level":30,"message":"creating pull request for (chingor13/google-auth-library-java)"}
{"severity":"INFO","level":30,"message":"building from manifest file"}
        2) should handle GitHub releases, if configured
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"INFO","level":30,"message":"push (chingor13/google-auth-library-java, master)"}
{"severity":"DEBUG","level":20,"branches":[],"manifest":true,"onDemand":false,"primaryBranch":"master","branch":"master"}
{"severity":"INFO","level":30,"message":"creating pull request for (chingor13/google-auth-library-java)"}
{"severity":"INFO","level":30,"message":"building from manifest file"}
        ✔ should ignore the repo language not being supported
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"INFO","level":30,"message":"push (chingor13/google-auth-library-java, master)"}
{"severity":"DEBUG","level":20,"branches":[],"manifest":true,"onDemand":false,"manifestConfig":"path/to/config.json","manifestFile":"path/to/manifest.json","primaryBranch":"master","branch":"master"}
{"severity":"INFO","level":30,"message":"creating pull request for (chingor13/google-auth-library-java)"}
{"severity":"INFO","level":30,"message":"building from manifest file"}
        ✔ should allow customizing the manifest config file and path
    push to non-master branch
      without manifest
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"INFO","level":30,"message":"push (chingor13/google-auth-library-java, feature-branch)"}
{"severity":"INFO","level":30,"message":"no configuration for (chingor13/google-auth-library-java, feature-branch)"}
        ✔ should ignore the webhook
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"INFO","level":30,"message":"push (chingor13/google-auth-library-java, feature-branch)"}
{"severity":"DEBUG","level":20,"branches":[],"manifest":false,"onDemand":false,"primaryBranch":"feature-branch","releaseLabels":["foo","bar"],"branch":"feature-branch"}
{"severity":"INFO","level":30,"message":"creating pull request for (chingor13/google-auth-library-java)"}
        ✔ should create the PR if the branch is the configured primary branch
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"INFO","level":30,"message":"push (chingor13/google-auth-library-java, feature-branch)"}
{"severity":"DEBUG","level":20,"branch":"feature-branch","releaseType":"java-yoshi"}
{"severity":"INFO","level":30,"message":"creating pull request for (chingor13/google-auth-library-java)"}
        ✔ should create the PR if the branch is configured as an alternate branch
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"INFO","level":30,"message":"push (chingor13/google-auth-library-java, feature-branch)"}
{"severity":"DEBUG","level":20,"branch":"feature-branch","handleGHRelease":true,"releaseType":"java-yoshi"}
{"severity":"INFO","level":30,"message":"handling GitHub release for (chingor13/google-auth-library-java)"}
{"severity":"INFO","level":30,"message":"Created undefined releases"}
{"severity":"INFO","level":30,"message":"creating pull request for (chingor13/google-auth-library-java)"}
        3) should handle GitHub releases, if configured
    pull-request labeled event
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"INFO","level":30,"message":"pull_request.labeled (Codertocat/Hello-World, master)"}
{"severity":"DEBUG","level":20,"branches":[],"manifest":false,"onDemand":false,"primaryBranch":"master","releaseLabels":["foo","bar"],"branch":"master"}
{"severity":"INFO","level":30,"message":"creating pull request for (Codertocat/Hello-World)"}
      ✔ should try to create a release pull request
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"INFO","level":30,"message":"pull_request.labeled (Codertocat/Hello-World, master)"}
{"severity":"DEBUG","level":20,"branches":[],"manifest":false,"onDemand":true,"primaryBranch":"master","releaseLabels":["foo","bar"],"handleGHRelease":true,"branch":"master"}
{"severity":"INFO","level":30,"message":"handling GitHub release for (Codertocat/Hello-World)"}
{"severity":"INFO","level":30,"message":"Created undefined releases"}
{"severity":"INFO","level":30,"message":"creating pull request for (Codertocat/Hello-World)"}
      4) should try to create a release pull request for on-demand repo
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"INFO","level":30,"message":"label no longer exists on PR"}
{"severity":"INFO","level":30,"message":"pull_request.labeled (Codertocat/Hello-World, master)"}
{"severity":"DEBUG","level":20,"branches":[],"manifest":false,"onDemand":false,"primaryBranch":"master","releaseLabels":["foo","bar"],"branch":"master"}
{"severity":"INFO","level":30,"message":"creating pull request for (Codertocat/Hello-World)"}
      ✔ should ignore failing to remove the label
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"INFO","level":30,"message":"pull_request.labeled (Codertocat/Hello-World, master)"}
{"severity":"DEBUG","level":20,"branches":[],"manifest":false,"onDemand":false,"primaryBranch":"master","releaseLabels":["foo","bar"],"handleGHRelease":true,"branch":"master"}
{"severity":"INFO","level":30,"message":"handling GitHub release for (Codertocat/Hello-World)"}
{"severity":"INFO","level":30,"message":"Created undefined releases"}
{"severity":"INFO","level":30,"message":"creating pull request for (Codertocat/Hello-World)"}
      5) should try to tag a GitHub release
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"INFO","level":30,"message":"pull_request.labeled (Codertocat/Hello-World, master)"}
{"severity":"DEBUG","level":20,"branches":[],"manifest":false,"onDemand":true,"primaryBranch":"master","releaseLabels":["foo","bar"],"handleGHRelease":true,"branch":"master"}
{"severity":"INFO","level":30,"message":"handling GitHub release for (Codertocat/Hello-World)"}
{"severity":"INFO","level":30,"message":"Created undefined releases"}
{"severity":"INFO","level":30,"message":"creating pull request for (Codertocat/Hello-World)"}
      6) should try to tag a GitHub release for an on-demand repo
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"INFO","level":30,"message":"pull_request.labeled (Codertocat/Hello-World, feature-branch)"}
{"severity":"DEBUG","level":20,"branch":"feature-branch","releaseType":"java-yoshi"}
{"severity":"INFO","level":30,"message":"creating pull request for (Codertocat/Hello-World)"}
      ✔ should try to create a release on an alternate branch
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"INFO","level":30,"message":"ignoring non-force label action (cla: yes)"}
      ✔ should ignore other labels
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"DEBUG","level":20,"message":"Skipping archived repository"}
      ✔ ignores archived repositories
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"DEBUG","level":20,"message":"Skipping disabled repository"}
      ✔ ignores disabled repositories
    pull request closed
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
      ✔ should try to mark closed
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
      ✔ should ignore non-release pull requests
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
{"severity":"INFO","level":30,"message":"ignoring merged pull request"}
      ✔ should ignore merged pull requests
    pull request reopened
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
      ✔ should try to mark pending
{"severity":"WARNING","level":40,"message":"Failed to find a context logger"}
      ✔ should ignore non-release pull requests


  66 passing (2s)
  6 failing

  1) ReleasePleaseBot
       push to master branch
         without manifest
           should allow overriding the release label when creating a release:
     AssertError: expected fromConfig to be called once and with exact arguments 
Call 1:
GitHub {
  getCommitFiles: [AsyncFunction (anonymous)],
  graphqlRequest: [AsyncFunction (anonymous)],
  findFilesByFilenameAndRef: [AsyncFunction (anonymous)],
  findFilesByGlobAndRef: [AsyncFunction (anonymous)],
  createPullRequest: [AsyncFunction (anonymous)],
  getPullRequest: [AsyncFunction (anonymous)],
  updatePullRequest: [AsyncFunction (anonymous)],
  findFilesByExtensionAndRef: [AsyncFunction (anonymous)],
  createRelease: [AsyncFunction (anonymous)],
  commentOnIssue: [AsyncFunction (anonymous)],
  removeIssueLabels: [AsyncFunction (anonymous)],
  addIssueLabels: [AsyncFunction (anonymous)],
  repository: {
    owner: 'chingor13',
    repo: 'google-auth-library-java',
    defaultBranch: 'master'
  },
  octokit: OctokitWithDefaults {
    request: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    graphql: [Function: newApi] {
      defaults: [Function: bound withDefaults],
      endpoint: [Function]
    },
    log: {
      debug: [Function: debug],
      info: [Function: info],
      warn: [Function: bound warn],
      error: [Function: bound error]
    },
    hook: [Function: bound register] {
      api: [Object],
      remove: [Function: bound removeHook],
      before: [Function: bound addHook],
      error: [Function: bound addHook],
      after: [Function: bound addHook],
      wrap: [Function: bound addHook]
    },
    auth: [Function: bound auth] AsyncFunction {
      hook: [Function: bound hook] AsyncFunction
    },
    actions: {
      addCustomLabelsToSelfHostedRunnerForOrg: [Function],
      addCustomLabelsToSelfHostedRunnerForRepo: [Function],
      addSelectedRepoToOrgSecret: [Function],
      approveWorkflowRun: [Function],
      cancelWorkflowRun: [Function],
      createOrUpdateEnvironmentSecret: [Function],
      createOrUpdateOrgSecret: [Function],
      createOrUpdateRepoSecret: [Function],
      createRegistrationTokenForOrg: [Function],
      createRegistrationTokenForRepo: [Function],
      createRemoveTokenForOrg: [Function],
      createRemoveTokenForRepo: [Function],
      createWorkflowDispatch: [Function],
      deleteActionsCacheById: [Function],
      deleteActionsCacheByKey: [Function],
      deleteArtifact: [Function],
      deleteEnvironmentSecret: [Function],
      deleteOrgSecret: [Function],
      deleteRepoSecret: [Function],
      deleteSelfHostedRunnerFromOrg: [Function],
      deleteSelfHostedRunnerFromRepo: [Function],
      deleteWorkflowRun: [Function],
      deleteWorkflowRunLogs: [Function],
      disableSelectedRepositoryGithubActionsOrganization: [Function],
      disableWorkflow: [Function],
      downloadArtifact: [Function],
      downloadJobLogsForWorkflowRun: [Function],
      downloadWorkflowRunAttemptLogs: [Function],
      downloadWorkflowRunLogs: [Function],
      enableSelectedRepositoryGithubActionsOrganization: [Function],
      enableWorkflow: [Function],
      getActionsCacheList: [Function],
      getActionsCacheUsage: [Function],
      getActionsCacheUsageByRepoForOrg: [Function],
      getActionsCacheUsageForEnterprise: [Function],
      getActionsCacheUsageForOrg: [Function],
      getAllowedActionsOrganization: [Function],
      getAllowedActionsRepository: [Function],
      getArtifact: [Function],
      getEnvironmentPublicKey: [Function],
      getEnvironmentSecret: [Function],
      getGithubActionsDefaultWorkflowPermissionsEnterprise: [Function],
      getGithubActionsDefaultWorkflowPermissionsOrganization: [Function],
      getGithubActionsDefaultWorkflowPermissionsRepository: [Function],
      getGithubActionsPermissionsOrganization: [Function],
      getGithubActionsPermissionsRepository: [Function],
      getJobForWorkflowRun: [Function],
      getOrgPublicKey: [Function],
      getOrgSecret: [Function],
      getPendingDeploymentsForRun: [Function],
      getRepoPermissions: [Function],
      getRepoPublicKey: [Function],
      getRepoSecret: [Function],
      getReviewsForRun: [Function],
      getSelfHostedRunnerForOrg: [Function],
      getSelfHostedRunnerForRepo: [Function],
      getWorkflow: [Function],
      getWorkflowAccessToRepository: [Function],
      getWorkflowRun: [Function],
      getWorkflowRunAttempt: [Function],
      getWorkflowRunUsage: [Function],
      getWorkflowUsage: [Function],
      listArtifactsForRepo: [Function],
      listEnvironmentSecrets: [Function],
      listJobsForWorkflowRun: [Function],
      listJobsForWorkflowRunAttempt: [Function],
      listLabelsForSelfHostedRunnerForOrg: [Function],
      listLabelsForSelfHostedRunnerForRepo: [Function],
      listOrgSecrets: [Function],
      listRepoSecrets: [Function],
      listRepoWorkflows: [Function],
      listRunnerApplicationsForOrg: [Function],
      listRunnerApplicationsForRepo: [Function],
      listSelectedReposForOrgSecret: [Function],
      listSelectedRepositoriesEnabledGithubActionsOrganization: [Function],
      listSelfHostedRunnersForOrg: [Function],
      listSelfHostedRunnersForRepo: [Function],
      listWorkflowRunArtifacts: [Function],
      listWorkflowRuns: [Function],
      listWorkflowRunsForRepo: [Function],
      reRunJobForWorkflowRun: [Function],
      reRunWorkflow: [Function],
      reRunWorkflowFailedJobs: [Function],
      removeAllCustomLabelsFromSelfHostedRunnerForOrg: [Function],
      removeAllCustomLabelsFromSelfHostedRunnerForRepo: [Function],
      removeCustomLabelFromSelfHostedRunnerForOrg: [Function],
      removeCustomLabelFromSelfHostedRunnerForRepo: [Function],
      removeSelectedRepoFromOrgSecret: [Function],
      reviewPendingDeploymentsForRun: [Function],
      setAllowedActionsOrganization: [Function],
      setAllowedActionsRepository: [Function],
      setCustomLabelsForSelfHostedRunnerForOrg: [Function],
      setCustomLabelsForSelfHostedRunnerForRepo: [Function],
      setGithubActionsDefaultWorkflowPermissionsEnterprise: [Function],
      setGithubActionsDefaultWorkflowPermissionsOrganization: [Function],
      setGithubActionsDefaultWorkflowPermissionsRepository: [Function],
      setGithubActionsPermissionsOrganization: [Function],
      setGithubActionsPermissionsRepository: [Function],
      setSelectedReposForOrgSecret: [Function],
      setSelectedRepositoriesEnabledGithubActionsOrganization: [Function],
      setWorkflowAccessToRepository: [Function]
    },
    activity: {
      checkRepoIsStarredByAuthenticatedUser: [Function],
      deleteRepoSubscription: [Function],
      deleteThreadSubscription: [Function],
      getFeeds: [Function],
      getRepoSubscription: [Function],
      getThread: [Function],
      getThreadSubscriptionForAuthenticatedUser: [Function],
      listEventsForAuthenticatedUser: [Function],
      listNotificationsForAuthenticatedUser: [Function],
      listOrgEventsForAuthenticatedUser: [Function],
      listPublicEvents: [Function],
      listPublicEventsForRepoNetwork: [Function],
      listPublicEventsForUser: [Function],
      listPublicOrgEvents: [Function],
      listReceivedEventsForUser: [Function],
      listReceivedPublicEventsForUser: [Function],
      listRepoEvents: [Function],
      listRepoNotificationsForAuthenticatedUser: [Function],
      listReposStarredByAuthenticatedUser: [Function],
      listReposStarredByUser: [Function],
      listReposWatchedByUser: [Function],
      listStargazersForRepo: [Function],
      listWatchedReposForAuthenticatedUser: [Function],
      listWatchersForRepo: [Function],
      markNotificationsAsRead: [Function],
      markRepoNotificationsAsRead: [Function],
      markThreadAsRead: [Function],
      setRepoSubscription: [Function],
      setThreadSubscription: [Function],
      starRepoForAuthenticatedUser: [Function],
      unstarRepoForAuthenticatedUser: [Function]
    },
    apps: {
      addRepoToInstallation: [Function],
      addRepoToInstallationForAuthenticatedUser: [Function],
      checkToken: [Function],
      createFromManifest: [Function],
      createInstallationAccessToken: [Function],
      deleteAuthorization: [Function],
      deleteInstallation: [Function],
      deleteToken: [Function],
      getAuthenticated: [Function],
      getBySlug: [Function],
      getInstallation: [Function],
      getOrgInstallation: [Function],
      getRepoInstallation: [Function],
      getSubscriptionPlanForAccount: [Function],
      getSubscriptionPlanForAccountStubbed: [Function],
      getUserInstallation: [Function],
      getWebhookConfigForApp: [Function],
      getWebhookDelivery: [Function],
      listAccountsForPlan: [Function],
      listAccountsForPlanStubbed: [Function],
      listInstallationReposForAuthenticatedUser: [Function],
      listInstallations: [Function],
      listInstallationsForAuthenticatedUser: [Function],
      listPlans: [Function],
      listPlansStubbed: [Function],
      listReposAccessibleToInstallation: [Function],
      listSubscriptionsForAuthenticatedUser: [Function],
      listSubscriptionsForAuthenticatedUserStubbed: [Function],
      listWebhookDeliveries: [Function],
      redeliverWebhookDelivery: [Function],
      removeRepoFromInstallation: [Function],
      removeRepoFromInstallationForAuthenticatedUser: [Function],
      resetToken: [Function],
      revokeInstallationAccessToken: [Function],
      scopeToken: [Function],
      suspendInstallation: [Function],
      unsuspendInstallation: [Function],
      updateWebhookConfigForApp: [Function]
    },
    billing: {
      getGithubActionsBillingOrg: [Function],
      getGithubActionsBillingUser: [Function],
      getGithubAdvancedSecurityBillingGhe: [Function],
      getGithubAdvancedSecurityBillingOrg: [Function],
      getGithubPackagesBillingOrg: [Function],
      getGithubPackagesBillingUser: [Function],
      getSharedStorageBillingOrg: [Function],
      getSharedStorageBillingUser: [Function]
    },
    checks: {
      create: [Function],
      createSuite: [Function],
      get: [Function],
      getSuite: [Function],
      listAnnotations: [Function],
      listForRef: [Function],
      listForSuite: [Function],
      listSuitesForRef: [Function],
      rerequestRun: [Function],
      rerequestSuite: [Function],
      setSuitesPreferences: [Function],
      update: [Function]
    },
    codeScanning: {
      deleteAnalysis: [Function],
      getAlert: [Function],
      getAnalysis: [Function],
      getCodeqlDatabase: [Function],
      getSarif: [Function],
      listAlertInstances: [Function],
      listAlertsForEnterprise: [Function],
      listAlertsForOrg: [Function],
      listAlertsForRepo: [Function],
      listAlertsInstances: [Function],
      listCodeqlDatabases: [Function],
      listRecentAnalyses: [Function],
      updateAlert: [Function],
      uploadSarif: [Function]
    },
    codesOfConduct: { getAllCodesOfConduct: [Function], getConductCode: [Function] },
    codespaces: {
      addRepositoryForSecretForAuthenticatedUser: [Function],
      addSelectedRepoToOrgSecret: [Function],
      codespaceMachinesForAuthenticatedUser: [Function],
      createForAuthenticatedUser: [Function],
      createOrUpdateOrgSecret: [Function],
      createOrUpdateRepoSecret: [Function],
      createOrUpdateSecretForAuthenticatedUser: [Function],
      createWithPrForAuthenticatedUser: [Function],
      createWithRepoForAuthenticatedUser: [Function],
      deleteForAuthenticatedUser: [Function],
      deleteFromOrganization: [Function],
      deleteOrgSecret: [Function],
      deleteRepoSecret: [Function],
      deleteSecretForAuthenticatedUser: [Function],
      exportForAuthenticatedUser: [Function],
      getExportDetailsForAuthenticatedUser: [Function],
      getForAuthenticatedUser: [Function],
      getOrgPublicKey: [Function],
      getOrgSecret: [Function],
      getPublicKeyForAuthenticatedUser: [Function],
      getRepoPublicKey: [Function],
      getRepoSecret: [Function],
      getSecretForAuthenticatedUser: [Function],
      listDevcontainersInRepositoryForAuthenticatedUser: [Function],
      listForAuthenticatedUser: [Function],
      listInOrganization: [Function],
      listInRepositoryForAuthenticatedUser: [Function],
      listOrgSecrets: [Function],
      listRepoSecrets: [Function],
      listRepositoriesForSecretForAuthenticatedUser: [Function],
      listSecretsForAuthenticatedUser: [Function],
      listSelectedReposForOrgSecret: [Function],
      preFlightWithRepoForAuthenticatedUser: [Function],
      removeRepositoryForSecretForAuthenticatedUser: [Function],
      removeSelectedRepoFromOrgSecret: [Function],
      repoMachinesForAuthenticatedUser: [Function],
      setRepositoriesForSecretForAuthenticatedUser: [Function],
      setSelectedReposForOrgSecret: [Function],
      startForAuthenticatedUser: [Function],
      stopForAuthenticatedUser: [Function],
      stopInOrganization: [Function],
      updateForAuthenticatedUser: [Function]
    },
    dependabot: {
      addSelectedRepoToOrgSecret: [Function],
      createOrUpdateOrgSecret: [Function],
      createOrUpdateRepoSecret: [Function],
      deleteOrgSecret: [Function],
      deleteRepoSecret: [Function],
      getAlert: [Function],
      getOrgPublicKey: [Function],
      getOrgSecret: [Function],
      getRepoPublicKey: [Function],
      getRepoSecret: [Function],
      listAlertsForRepo: [Function],
      listOrgSecrets: [Function],
      listRepoSecrets: [Function],
      listSelectedReposForOrgSecret: [Function],
      removeSelectedRepoFromOrgSecret: [Function],
      setSelectedReposForOrgSecret: [Function],
      updateAlert: [Function]
    },
    dependencyGraph: { createRepositorySnapshot: [Function], diffRange: [Function] },
    emojis: { get: [Function] },
    enterpriseAdmin: {
      addCustomLabelsToSelfHostedRunnerForEnterprise: [Function],
      disableSelectedOrganizationGithubActionsEnterprise: [Function],
      enableSelectedOrganizationGithubActionsEnterprise: [Function],
      getAllowedActionsEnterprise: [Function],
      getGithubActionsPermissionsEnterprise: [Function],
      getServerStatistics: [Function],
      listLabelsForSelfHostedRunnerForEnterprise: [Function],
      listSelectedOrganizationsEnabledGithubActionsEnterprise: [Function],
      removeAllCustomLabelsFromSelfHostedRunnerForEnterprise: [Function],
      removeCustomLabelFromSelfHostedRunnerForEnterprise: [Function],
      setAllowedActionsEnterprise: [Function],
      setCustomLabelsForSelfHostedRunnerForEnterprise: [Function],
      setGithubActionsPermissionsEnterprise: [Function],
      setSelectedOrganizationsEnabledGithubActionsEnterprise: [Function]
    },
    gists: {
      checkIsStarred: [Function],
      create: [Function],
      createComment: [Function],
      delete: [Function],
      deleteComment: [Function],
      fork: [Function],
      get: [Function],
      getComment: [Function],
      getRevision: [Function],
      list: [Function],
      listComments: [Function],
      listCommits: [Function],
      listForUser: [Function],
      listForks: [Function],
      listPublic: [Function],
      listStarred: [Function],
      star: [Function],
      unstar: [Function],
      update: [Function],
      updateComment: [Function]
    },
    git: {
      createBlob: [Function],
      createCommit: [Function],
      createRef: [Function],
      createTag: [Function],
      createTree: [Function],
      deleteRef: [Function],
      getBlob: [Function],
      getCommit: [Function],
      getRef: [Function],
      getTag: [Function],
      getTree: [Function],
      listMatchingRefs: [Function],
      updateRef: [Function]
    },
    gitignore: { getAllTemplates: [Function], getTemplate: [Function] },
    interactions: {
      getRestrictionsForAuthenticatedUser: [Function],
      getRestrictionsForOrg: [Function],
      getRestrictionsForRepo: [Function],
      getRestrictionsForYourPublicRepos: [Function],
      removeRestrictionsForAuthenticatedUser: [Function],
      removeRestrictionsForOrg: [Function],
      removeRestrictionsForRepo: [Function],
      removeRestrictionsForYourPublicRepos: [Function],
      setRestrictionsForAuthenticatedUser: [Function],
      setRestrictionsForOrg: [Function],
      setRestrictionsForRepo: [Function],
      setRestrictionsForYourPublicRepos: [Function]
    },
    issues: {
      addAssignees: [Function],
      addLabels: [Function],
      checkUserCanBeAssigned: [Function],
      create: [Function],
      createComment: [Function],
      createLabel: [Function],
      createMilestone: [Function],
      deleteComment: [Function],
      deleteLabel: [Function],
      deleteMilestone: [Function],
      get: [Function],
      getComment: [Function],
      getEvent: [Function],
      getLabel: [Function],
      getMilestone: [Function],
      list: [Function],
      listAssignees: [Function],
      listComments: [Function],
      listCommentsForRepo: [Function],
      listEvents: [Function],
      listEventsForRepo: [Function],
      listEventsForTimeline: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listForRepo: [Function],
      listLabelsForMilestone: [Function],
      listLabelsForRepo: [Function],
      listLabelsOnIssue: [Function],
      listMilestones: [Function],
      lock: [Function],
      removeAllLabels: [Function],
      removeAssignees: [Function],
      removeLabel: [Function],
      setLabels: [Function],
      unlock: [Function],
      update: [Function],
      updateComment: [Function],
      updateLabel: [Function],
      updateMilestone: [Function]
    },
    licenses: {
      get: [Function],
      getAllCommonlyUsed: [Function],
      getForRepo: [Function]
    },
    markdown: { render: [Function], renderRaw: [Function] },
    meta: {
      get: [Function],
      getOctocat: [Function],
      getZen: [Function],
      root: [Function]
    },
    migrations: {
      cancelImport: [Function],
      deleteArchiveForAuthenticatedUser: [Function],
      deleteArchiveForOrg: [Function],
      downloadArchiveForOrg: [Function],
      getArchiveForAuthenticatedUser: [Function],
      getCommitAuthors: [Function],
      getImportStatus: [Function],
      getLargeFiles: [Function],
      getStatusForAuthenticatedUser: [Function],
      getStatusForOrg: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listReposForAuthenticatedUser: [Function],
      listReposForOrg: [Function],
      listReposForUser: [Function],
      mapCommitAuthor: [Function],
      setLfsPreference: [Function],
      startForAuthenticatedUser: [Function],
      startForOrg: [Function],
      startImport: [Function],
      unlockRepoForAuthenticatedUser: [Function],
      unlockRepoForOrg: [Function],
      updateImport: [Function]
    },
    orgs: {
      addSecurityManagerTeam: [Function],
      blockUser: [Function],
      cancelInvitation: [Function],
      checkBlockedUser: [Function],
      checkMembershipForUser: [Function],
      checkPublicMembershipForUser: [Function],
      convertMemberToOutsideCollaborator: [Function],
      createCustomRole: [Function],
      createInvitation: [Function],
      createWebhook: [Function],
      deleteCustomRole: [Function],
      deleteWebhook: [Function],
      enableOrDisableSecurityProductOnAllOrgRepos: [Function],
      get: [Function],
      getMembershipForAuthenticatedUser: [Function],
      getMembershipForUser: [Function],
      getWebhook: [Function],
      getWebhookConfigForOrg: [Function],
      getWebhookDelivery: [Function],
      list: [Function],
      listAppInstallations: [Function],
      listBlockedUsers: [Function],
      listCustomRoles: [Function],
      listFailedInvitations: [Function],
      listFineGrainedPermissions: [Function],
      listForAuthenticatedUser: [Function],
      listForUser: [Function],
      listInvitationTeams: [Function],
      listMembers: [Function],
      listMembershipsForAuthenticatedUser: [Function],
      listOutsideCollaborators: [Function],
      listPendingInvitations: [Function],
      listPublicMembers: [Function],
      listSecurityManagerTeams: [Function],
      listWebhookDeliveries: [Function],
      listWebhooks: [Function],
      pingWebhook: [Function],
      redeliverWebhookDelivery: [Function],
      removeMember: [Function],
      removeMembershipForUser: [Function],
      removeOutsideCollaborator: [Function],
      removePublicMembershipForAuthenticatedUser: [Function],
      removeSecurityManagerTeam: [Function],
      setMembershipForUser: [Function],
      setPublicMembershipForAuthenticatedUser: [Function],
      unblockUser: [Function],
      update: [Function],
      updateCustomRole: [Function],
      updateMembershipForAuthenticatedUser: [Function],
      updateWebhook: [Function],
      updateWebhookConfigForOrg: [Function]
    },
    packages: {
      deletePackageForAuthenticatedUser: [Function],
      deletePackageForOrg: [Function],
      deletePackageForUser: [Function],
      deletePackageVersionForAuthenticatedUser: [Function],
      deletePackageVersionForOrg: [Function],
      deletePackageVersionForUser: [Function],
      getAllPackageVersionsForAPackageOwnedByAnOrg: [Function],
      getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [Function],
      getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [Function],
      getAllPackageVersionsForPackageOwnedByOrg: [Function],
      getAllPackageVersionsForPackageOwnedByUser: [Function],
      getPackageForAuthenticatedUser: [Function],
      getPackageForOrganization: [Function],
      getPackageForUser: [Function],
      getPackageVersionForAuthenticatedUser: [Function],
      getPackageVersionForOrganization: [Function],
      getPackageVersionForUser: [Function],
      listPackagesForAuthenticatedUser: [Function],
      listPackagesForOrganization: [Function],
      listPackagesForUser: [Function],
      restorePackageForAuthenticatedUser: [Function],
      restorePackageForOrg: [Function],
      restorePackageForUser: [Function],
      restorePackageVersionForAuthenticatedUser: [Function],
      restorePackageVersionForOrg: [Function],
      restorePackageVersionForUser: [Function]
    },
    projects: {
      addCollaborator: [Function],
      createCard: [Function],
      createColumn: [Function],
      createForAuthenticatedUser: [Function],
      createForOrg: [Function],
      createForRepo: [Function],
      delete: [Function],
      deleteCard: [Function],
      deleteColumn: [Function],
      get: [Function],
      getCard: [Function],
      getColumn: [Function],
      getPermissionForUser: [Function],
      listCards: [Function],
      listCollaborators: [Function],
      listColumns: [Function],
      listForOrg: [Function],
      listForRepo: [Function],
      listForUser: [Function],
      moveCard: [Function],
      moveColumn: [Function],
      removeCollaborator: [Function],
      update: [Function],
      updateCard: [Function],
      updateColumn: [Function]
    },
    pulls: {
      checkIfMerged: [Function],
      create: [Function],
      createReplyForReviewComment: [Function],
      createReview: [Function],
      createReviewComment: [Function],
      deletePendingReview: [Function],
      deleteReviewComment: [Function],
      dismissReview: [Function],
      get: [Function],
      getReview: [Function],
      getReviewComment: [Function],
      list: [Function],
      listCommentsForReview: [Function],
      listCommits: [Function],
      listFiles: [Function],
      listRequestedReviewers: [Function],
      listReviewComments: [Function],
      listReviewCommentsForRepo: [Function],
      listReviews: [Function],
      merge: [Function],
      removeRequestedReviewers: [Function],
      requestReviewers: [Function],
      submitReview: [Function],
      update: [Function],
      updateBranch: [Function],
      updateReview: [Function],
      updateReviewComment: [Function]
    },
    rateLimit: { get: [Function] },
    reactions: {
      createForCommitComment: [Function],
      createForIssue: [Function],
      createForIssueComment: [Function],
      createForPullRequestReviewComment: [Function],
      createForRelease: [Function],
      createForTeamDiscussionCommentInOrg: [Function],
      createForTeamDiscussionInOrg: [Function],
      deleteForCommitComment: [Function],
      deleteForIssue: [Function],
      deleteForIssueComment: [Function],
      deleteForPullRequestComment: [Function],
      deleteForRelease: [Function],
      deleteForTeamDiscussion: [Function],
      deleteForTeamDiscussionComment: [Function],
      listForCommitComment: [Function],
      listForIssue: [Function],
      listForIssueComment: [Function],
      listForPullRequestReviewComment: [Function],
      listForRelease: [Function],
      listForTeamDiscussionCommentInOrg: [Function],
      listForTeamDiscussionInOrg: [Function]
    },
    repos: {
      acceptInvitation: [Function],
      acceptInvitationForAuthenticatedUser: [Function],
      addAppAccessRestrictions: [Function],
      addCollaborator: [Function],
      addStatusCheckContexts: [Function],
      addTeamAccessRestrictions: [Function],
      addUserAccessRestrictions: [Function],
      checkCollaborator: [Function],
      checkVulnerabilityAlerts: [Function],
      codeownersErrors: [Function],
      compareCommits: [Function],
      compareCommitsWithBasehead: [Function],
      createAutolink: [Function],
      createCommitComment: [Function],
      createCommitSignatureProtection: [Function],
      createCommitStatus: [Function],
      createDeployKey: [Function],
      createDeployment: [Function],
      createDeploymentBranchPolicy: [Function],
      createDeploymentStatus: [Function],
      createDispatchEvent: [Function],
      createForAuthenticatedUser: [Function],
      createFork: [Function],
      createInOrg: [Function],
      createOrUpdateEnvironment: [Function],
      createOrUpdateFileContents: [Function],
      createPagesDeployment: [Function],
      createPagesSite: [Function],
      createRelease: [Function],
      createTagProtection: [Function],
      createUsingTemplate: [Function],
      createWebhook: [Function],
      declineInvitation: [Function],
      declineInvitationForAuthenticatedUser: [Function],
      delete: [Function],
      deleteAccessRestrictions: [Function],
      deleteAdminBranchProtection: [Function],
      deleteAnEnvironment: [Function],
      deleteAutolink: [Function],
      deleteBranchProtection: [Function],
      deleteCommitComment: [Function],
      deleteCommitSignatureProtection: [Function],
      deleteDeployKey: [Function],
      deleteDeployment: [Function],
      deleteDeploymentBranchPolicy: [Function],
      deleteFile: [Function],
      deleteInvitation: [Function],
      deletePagesSite: [Function],
      deletePullRequestReviewProtection: [Function],
      deleteRelease: [Function],
      deleteReleaseAsset: [Function],
      deleteTagProtection: [Function],
      deleteWebhook: [Function],
      disableAutomatedSecurityFixes: [Function],
      disableLfsForRepo: [Function],
      disableVulnerabilityAlerts: [Function],
      downloadArchive: [Function],
      downloadTarballArchive: [Function],
      downloadZipballArchive: [Function],
      enableAutomatedSecurityFixes: [Function],
      enableLfsForRepo: [Function],
      enableVulnerabilityAlerts: [Function],
      generateReleaseNotes: [Function],
      get: [Function],
      getAccessRestrictions: [Function],
      getAdminBranchProtection: [Function],
      getAllEnvironments: [Function],
      getAllStatusCheckContexts: [Function],
      getAllTopics: [Function],
      getAppsWithAccessToProtectedBranch: [Function],
      getAutolink: [Function],
      getBranch: [Function],
      getBranchProtection: [Function],
      getClones: [Function],
      getCodeFrequencyStats: [Function],
      getCollaboratorPermissionLevel: [Function],
      getCombinedStatusForRef: [Function],
      getCommit: [Function],
      getCommitActivityStats: [Function],
      getCommitComment: [Function],
      getCommitSignatureProtection: [Function],
      getCommunityProfileMetrics: [Function],
      getContent: [Function],
      getContributorsStats: [Function],
      getDeployKey: [Function],
      getDeployment: [Function],
      getDeploymentBranchPolicy: [Function],
      getDeploymentStatus: [Function],
      getEnvironment: [Function],
      getLatestPagesBuild: [Function],
      getLatestRelease: [Function],
      getPages: [Function],
      getPagesBuild: [Function],
      getPagesHealthCheck: [Function],
      getParticipationStats: [Function],
      getPullRequestReviewProtection: [Function],
      getPunchCardStats: [Function],
      getReadme: [Function],
      getReadmeInDirectory: [Function],
      getRelease: [Function],
      getReleaseAsset: [Function],
      getReleaseByTag: [Function],
      getStatusChecksProtection: [Function],
      getTeamsWithAccessToProtectedBranch: [Function],
      getTopPaths: [Function],
      getTopReferrers: [Function],
      getUsersWithAccessToProtectedBranch: [Function],
      getViews: [Function],
      getWebhook: [Function],
      getWebhookConfigForRepo: [Function],
      getWebhookDelivery: [Function],
      listAutolinks: [Function],
      listBranches: [Function],
      listBranchesForHeadCommit: [Function],
      listCollaborators: [Function],
      listCommentsForCommit: [Function],
      listCommitCommentsForRepo: [Function],
      listCommitStatusesForRef: [Function],
      listCommits: [Function],
      listContributors: [Function],
      listDeployKeys: [Function],
      listDeploymentBranchPolicies: [Function],
      listDeploymentStatuses: [Function],
      listDeployments: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listForUser: [Function],
      listForks: [Function],
      listInvitations: [Function],
      listInvitationsForAuthenticatedUser: [Function],
      listLanguages: [Function],
      listPagesBuilds: [Function],
      listPublic: [Function],
      listPullRequestsAssociatedWithCommit: [Function],
      listReleaseAssets: [Function],
      listReleases: [Function],
      listTagProtection: [Function],
      listTags: [Function],
      listTeams: [Function],
      listWebhookDeliveries: [Function],
      listWebhooks: [Function],
      merge: [Function],
      mergeUpstream: [Function],
      pingWebhook: [Function],
      redeliverWebhookDelivery: [Function],
      removeAppAccessRestrictions: [Function],
      removeCollaborator: [Function],
      removeStatusCheckContexts: [Function],
      removeStatusCheckProtection: [Function],
      removeTeamAccessRestrictions: [Function],
      removeUserAccessRestrictions: [Function],
      renameBranch: [Function],
      replaceAllTopics: [Function],
      requestPagesBuild: [Function],
      setAdminBranchProtection: [Function],
      setAppAccessRestrictions: [Function],
      setStatusCheckContexts: [Function],
      setTeamAccessRestrictions: [Function],
      setUserAccessRestrictions: [Function],
      testPushWebhook: [Function],
      transfer: [Function],
      update: [Function],
      updateBranchProtection: [Function],
      updateCommitComment: [Function],
      updateDeploymentBranchPolicy: [Function],
      updateInformationAboutPagesSite: [Function],
      updateInvitation: [Function],
      updatePullRequestReviewProtection: [Function],
      updateRelease: [Function],
      updateReleaseAsset: [Function],
      updateStatusCheckPotection: [Function],
      updateStatusCheckProtection: [Function],
      updateWebhook: [Function],
      updateWebhookConfigForRepo: [Function],
      uploadReleaseAsset: [Function]
    },
    search: {
      code: [Function],
      commits: [Function],
      issuesAndPullRequests: [Function],
      labels: [Function],
      repos: [Function],
      topics: [Function],
      users: [Function]
    },
    secretScanning: {
      getAlert: [Function],
      listAlertsForEnterprise: [Function],
      listAlertsForOrg: [Function],
      listAlertsForRepo: [Function],
      listLocationsForAlert: [Function],
      updateAlert: [Function]
    },
    teams: {
      addOrUpdateMembershipForUserInOrg: [Function],
      addOrUpdateProjectPermissionsInOrg: [Function],
      addOrUpdateRepoPermissionsInOrg: [Function],
      checkPermissionsForProjectInOrg: [Function],
      checkPermissionsForRepoInOrg: [Function],
      create: [Function],
      createDiscussionCommentInOrg: [Function],
      createDiscussionInOrg: [Function],
      deleteDiscussionCommentInOrg: [Function],
      deleteDiscussionInOrg: [Function],
      deleteInOrg: [Function],
      getByName: [Function],
      getDiscussionCommentInOrg: [Function],
      getDiscussionInOrg: [Function],
      getMembershipForUserInOrg: [Function],
      list: [Function],
      listChildInOrg: [Function],
      listDiscussionCommentsInOrg: [Function],
      listDiscussionsInOrg: [Function],
      listForAuthenticatedUser: [Function],
      listMembersInOrg: [Function],
      listPendingInvitationsInOrg: [Function],
      listProjectsInOrg: [Function],
      listReposInOrg: [Function],
      removeMembershipForUserInOrg: [Function],
      removeProjectInOrg: [Function],
      removeRepoInOrg: [Function],
      updateDiscussionCommentInOrg: [Function],
      updateDiscussionInOrg: [Function],
      updateInOrg: [Function]
    },
    users: {
      addEmailForAuthenticated: [Function],
      addEmailForAuthenticatedUser: [Function],
      block: [Function],
      checkBlocked: [Function],
      checkFollowingForUser: [Function],
      checkPersonIsFollowedByAuthenticated: [Function],
      createGpgKeyForAuthenticated: [Function],
      createGpgKeyForAuthenticatedUser: [Function],
      createPublicSshKeyForAuthenticated: [Function],
      createPublicSshKeyForAuthenticatedUser: [Function],
      createSshSigningKeyForAuthenticatedUser: [Function],
      deleteEmailForAuthenticated: [Function],
      deleteEmailForAuthenticatedUser: [Function],
      deleteGpgKeyForAuthenticated: [Function],
      deleteGpgKeyForAuthenticatedUser: [Function],
      deletePublicSshKeyForAuthenticated: [Function],
      deletePublicSshKeyForAuthenticatedUser: [Function],
      deleteSshSigningKeyForAuthenticatedUser: [Function],
      follow: [Function],
      getAuthenticated: [Function],
      getByUsername: [Function],
      getContextForUser: [Function],
      getGpgKeyForAuthenticated: [Function],
      getGpgKeyForAuthenticatedUser: [Function],
      getPublicSshKeyForAuthenticated: [Function],
      getPublicSshKeyForAuthenticatedUser: [Function],
      getSshSigningKeyForAuthenticatedUser: [Function],
      list: [Function],
      listBlockedByAuthenticated: [Function],
      listBlockedByAuthenticatedUser: [Function],
      listEmailsForAuthenticated: [Function],
      listEmailsForAuthenticatedUser: [Function],
      listFollowedByAuthenticated: [Function],
      listFollowedByAuthenticatedUser: [Function],
      listFollowersForAuthenticatedUser: [Function],
      listFollowersForUser: [Function],
      listFollowingForUser: [Function],
      listGpgKeysForAuthenticated: [Function],
      listGpgKeysForAuthenticatedUser: [Function],
      listGpgKeysForUser: [Function],
      listPublicEmailsForAuthenticated: [Function],
      listPublicEmailsForAuthenticatedUser: [Function],
      listPublicKeysForUser: [Function],
      listPublicSshKeysForAuthenticated: [Function],
      listPublicSshKeysForAuthenticatedUser: [Function],
      listSshSigningKeysForAuthenticatedUser: [Function],
      listSshSigningKeysForUser: [Function],
      setPrimaryEmailVisibilityForAuthenticated: [Function],
      setPrimaryEmailVisibilityForAuthenticatedUser: [Function],
      unblock: [Function],
      unfollow: [Function],
      updateAuthenticated: [Function]
    },
    rest: {
      actions: [Object],
      activity: [Object],
      apps: [Object],
      billing: [Object],
      checks: [Object],
      codeScanning: [Object],
      codesOfConduct: [Object],
      codespaces: [Object],
      dependabot: [Object],
      dependencyGraph: [Object],
      emojis: [Object],
      enterpriseAdmin: [Object],
      gists: [Object],
      git: [Object],
      gitignore: [Object],
      interactions: [Object],
      issues: [Object],
      licenses: [Object],
      markdown: [Object],
      meta: [Object],
      migrations: [Object],
      orgs: [Object],
      packages: [Object],
      projects: [Object],
      pulls: [Object],
      rateLimit: [Object],
      reactions: [Object],
      repos: [Object],
      search: [Object],
      secretScanning: [Object],
      teams: [Object],
      users: [Object]
    },
    paginate: [Function: bound paginate] { iterator: [Function: bound iterator] }
  },
  request: [Function: newApi] {
    endpoint: [Function: bound endpointWithDefaults] {
      DEFAULTS: [Object],
      defaults: [Function: bound withDefaults],
      merge: [Function: bound merge],
      parse: [Function: parse]
    },
    defaults: [Function: bound withDefaults]
  },
  graphql: [Function: newApi] {
    defaults: [Function: bound withDefaults],
    endpoint: [Function: bound endpointWithDefaults] {
      DEFAULTS: [Object],
      defaults: [Function: bound withDefaults],
      merge: [Function: bound merge],
      parse: [Function: parse]
    }
  },
  fileCache: RepositoryFileCache {
    octokit: OctokitWithDefaults {
      request: [Function],
      graphql: [Function],
      log: [Object],
      hook: [Function],
      auth: [AsyncFunction],
      actions: [Object],
      activity: [Object],
      apps: [Object],
      billing: [Object],
      checks: [Object],
      codeScanning: [Object],
      codesOfConduct: [Object],
      codespaces: [Object],
      dependabot: [Object],
      dependencyGraph: [Object],
      emojis: [Object],
      enterpriseAdmin: [Object],
      gists: [Object],
      git: [Object],
      gitignore: [Object],
      interactions: [Object],
      issues: [Object],
      licenses: [Object],
      markdown: [Object],
      meta: [Object],
      migrations: [Object],
      orgs: [Object],
      packages: [Object],
      projects: [Object],
      pulls: [Object],
      rateLimit: [Object],
      reactions: [Object],
      repos: [Object],
      search: [Object],
      secretScanning: [Object],
      teams: [Object],
      users: [Object],
      rest: [Object],
      paginate: [Function]
    },
    repository: {
      owner: 'chingor13',
      repo: 'google-auth-library-java',
      defaultBranch: 'master'
    },
    cache: Map(0) {}
  },
  logger: GCFLogger {
    destination: SonicBoom {
      _bufs: [],
      _len: 0,
      fd: 1,
      _writing: false,
      _writingBuf: '',
      _ending: false,
      _reopening: false,
      _asyncDrainScheduled: true,
      _hwm: 16387,
      file: null,
      destroyed: false,
      minLength: 0,
      maxLength: 0,
      maxWrite: 16384,
      sync: true,
      _fsync: false,
      append: true,
      mode: undefined,
      retryEAGAIN: [Function (anonymous)],
      mkdir: false,
      release: [Function (anonymous)],
      _events: [Object: null prototype],
      _eventsCount: 2
    },
    pino: EventEmitter {
      levels: [Object],
      silent: [Function: noop],
      onChild: [Function: noop],
      trace: [Function: LOG],
      debug: [Function: LOG],
      info: [Function: LOG],
      warn: [Function: LOG],
      error: [Function: LOG],
      fatal: [Function (anonymous)],
      metric: [Function: LOG],
      [Symbol(pino.useOnlyCustomLevels)]: false,
      [Symbol(pino.stream)]: [SonicBoom],
      [Symbol(pino.time)]: [Function: nullTime],
      [Symbol(pino.timeSliceIndex)]: 0,
      [Symbol(pino.stringify)]: [Function: stringify],
      [Symbol(pino.stringifySafe)]: [Function: stringify],
      [Symbol(pino.stringifiers)]: {},
      [Symbol(pino.end)]: '}\n',
      [Symbol(pino.formatOpts)]: [Object],
      [Symbol(pino.messageKey)]: 'message',
      [Symbol(pino.errorKey)]: 'err',
      [Symbol(pino.nestedKey)]: null,
      [Symbol(pino.nestedKeyStr)]: '',
      [Symbol(pino.serializers)]: [Object],
      [Symbol(pino.mixin)]: undefined,
      [Symbol(pino.mixinMergeStrategy)]: undefined,
      [Symbol(pino.chindings)]: '',
      [Symbol(pino.formatters)]: [Object],
      [Symbol(pino.hooks)]: [Object],
      [Symbol(pino.lsCache)]: [Object],
      [Symbol(pino.levelVal)]: 10
    },
    trace: [Function: bound trace],
    debug: [Function: bound debug],
    info: [Function: bound info],
    warn: [Function: bound warn],
    metric: [Function: bound metric],
    error: [Function: bound error],
    child: [Function: bound child]
  }
} instanceOf(GitHub)
'"master"'
{
  releaseType: 'java-yoshi',
  versioning: undefined,
  bumpMinorPreMajor: undefined,
  bumpPatchForMinorPreMajor: undefined,
  draft: undefined,
  draftPullRequest: undefined,
  packageName: undefined,
  includeComponentInTag: false,
  pullRequestTitlePattern: undefined,
  changelogHost: undefined,
  changelogPath: undefined,
  changelogType: undefined,
  versionFile: undefined,
  extraFiles: undefined,
  initialVersion: undefined
} any
{
  manifestPath: undefined,
  labels: undefined,
  releaseLabels: [ 'autorelease: published' ],
  plugins: [ { type: 'sentence-case', specialWords: [Array] } ],
  logger: GCFLogger {
    destination: SonicBoom {
      _bufs: [],
      _len: 0,
      fd: 1,
      _writing: false,
      _writingBuf: '',
      _ending: false,
      _reopening: false,
      _asyncDrainScheduled: true,
      _hwm: 16387,
      file: null,
      destroyed: false,
      minLength: 0,
      maxLength: 0,
      maxWrite: 16384,
      sync: true,
      _fsync: false,
      append: true,
      mode: undefined,
      retryEAGAIN: [Function (anonymous)],
      mkdir: false,
      release: [Function (anonymous)],
      _events: [Object: null prototype],
      _eventsCount: 2
    },
    pino: EventEmitter {
      levels: [Object],
      silent: [Function: noop],
      onChild: [Function: noop],
      trace: [Function: LOG],
      debug: [Function: LOG],
      info: [Function: LOG],
      warn: [Function: LOG],
      error: [Function: LOG],
      fatal: [Function (anonymous)],
      metric: [Function: LOG],
      [Symbol(pino.useOnlyCustomLevels)]: false,
      [Symbol(pino.stream)]: [SonicBoom],
      [Symbol(pino.time)]: [Function: nullTime],
      [Symbol(pino.timeSliceIndex)]: 0,
      [Symbol(pino.stringify)]: [Function: stringify],
      [Symbol(pino.stringifySafe)]: [Function: stringify],
      [Symbol(pino.stringifiers)]: {},
      [Symbol(pino.end)]: '}\n',
      [Symbol(pino.formatOpts)]: [Object],
      [Symbol(pino.messageKey)]: 'message',
      [Symbol(pino.errorKey)]: 'err',
      [Symbol(pino.nestedKey)]: null,
      [Symbol(pino.nestedKeyStr)]: '',
      [Symbol(pino.serializers)]: [Object],
      [Symbol(pino.mixin)]: undefined,
      [Symbol(pino.mixinMergeStrategy)]: undefined,
      [Symbol(pino.chindings)]: '',
      [Symbol(pino.formatters)]: [Object],
      [Symbol(pino.hooks)]: [Object],
      [Symbol(pino.lsCache)]: [Object],
      [Symbol(pino.levelVal)]: 10
    },
    trace: [Function: bound trace],
    debug: [Function: bound debug],
    info: [Function: bound info],
    warn: [Function: bound warn],
    metric: [Function: bound metric],
    error: [Function: bound error],
    child: [Function: bound child]
  }
} has("releaseLabels", autorelease: published)
undefined
Call 2:
GitHub {
  getCommitFiles: [AsyncFunction (anonymous)],
  graphqlRequest: [AsyncFunction (anonymous)],
  findFilesByFilenameAndRef: [AsyncFunction (anonymous)],
  findFilesByGlobAndRef: [AsyncFunction (anonymous)],
  createPullRequest: [AsyncFunction (anonymous)],
  getPullRequest: [AsyncFunction (anonymous)],
  updatePullRequest: [AsyncFunction (anonymous)],
  findFilesByExtensionAndRef: [AsyncFunction (anonymous)],
  createRelease: [AsyncFunction (anonymous)],
  commentOnIssue: [AsyncFunction (anonymous)],
  removeIssueLabels: [AsyncFunction (anonymous)],
  addIssueLabels: [AsyncFunction (anonymous)],
  repository: {
    owner: 'chingor13',
    repo: 'google-auth-library-java',
    defaultBranch: 'master'
  },
  octokit: OctokitWithDefaults {
    request: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    graphql: [Function: newApi] {
      defaults: [Function: bound withDefaults],
      endpoint: [Function]
    },
    log: {
      debug: [Function: debug],
      info: [Function: info],
      warn: [Function: bound warn],
      error: [Function: bound error]
    },
    hook: [Function: bound register] {
      api: [Object],
      remove: [Function: bound removeHook],
      before: [Function: bound addHook],
      error: [Function: bound addHook],
      after: [Function: bound addHook],
      wrap: [Function: bound addHook]
    },
    auth: [Function: bound auth] AsyncFunction {
      hook: [Function: bound hook] AsyncFunction
    },
    actions: {
      addCustomLabelsToSelfHostedRunnerForOrg: [Function],
      addCustomLabelsToSelfHostedRunnerForRepo: [Function],
      addSelectedRepoToOrgSecret: [Function],
      approveWorkflowRun: [Function],
      cancelWorkflowRun: [Function],
      createOrUpdateEnvironmentSecret: [Function],
      createOrUpdateOrgSecret: [Function],
      createOrUpdateRepoSecret: [Function],
      createRegistrationTokenForOrg: [Function],
      createRegistrationTokenForRepo: [Function],
      createRemoveTokenForOrg: [Function],
      createRemoveTokenForRepo: [Function],
      createWorkflowDispatch: [Function],
      deleteActionsCacheById: [Function],
      deleteActionsCacheByKey: [Function],
      deleteArtifact: [Function],
      deleteEnvironmentSecret: [Function],
      deleteOrgSecret: [Function],
      deleteRepoSecret: [Function],
      deleteSelfHostedRunnerFromOrg: [Function],
      deleteSelfHostedRunnerFromRepo: [Function],
      deleteWorkflowRun: [Function],
      deleteWorkflowRunLogs: [Function],
      disableSelectedRepositoryGithubActionsOrganization: [Function],
      disableWorkflow: [Function],
      downloadArtifact: [Function],
      downloadJobLogsForWorkflowRun: [Function],
      downloadWorkflowRunAttemptLogs: [Function],
      downloadWorkflowRunLogs: [Function],
      enableSelectedRepositoryGithubActionsOrganization: [Function],
      enableWorkflow: [Function],
      getActionsCacheList: [Function],
      getActionsCacheUsage: [Function],
      getActionsCacheUsageByRepoForOrg: [Function],
      getActionsCacheUsageForEnterprise: [Function],
      getActionsCacheUsageForOrg: [Function],
      getAllowedActionsOrganization: [Function],
      getAllowedActionsRepository: [Function],
      getArtifact: [Function],
      getEnvironmentPublicKey: [Function],
      getEnvironmentSecret: [Function],
      getGithubActionsDefaultWorkflowPermissionsEnterprise: [Function],
      getGithubActionsDefaultWorkflowPermissionsOrganization: [Function],
      getGithubActionsDefaultWorkflowPermissionsRepository: [Function],
      getGithubActionsPermissionsOrganization: [Function],
      getGithubActionsPermissionsRepository: [Function],
      getJobForWorkflowRun: [Function],
      getOrgPublicKey: [Function],
      getOrgSecret: [Function],
      getPendingDeploymentsForRun: [Function],
      getRepoPermissions: [Function],
      getRepoPublicKey: [Function],
      getRepoSecret: [Function],
      getReviewsForRun: [Function],
      getSelfHostedRunnerForOrg: [Function],
      getSelfHostedRunnerForRepo: [Function],
      getWorkflow: [Function],
      getWorkflowAccessToRepository: [Function],
      getWorkflowRun: [Function],
      getWorkflowRunAttempt: [Function],
      getWorkflowRunUsage: [Function],
      getWorkflowUsage: [Function],
      listArtifactsForRepo: [Function],
      listEnvironmentSecrets: [Function],
      listJobsForWorkflowRun: [Function],
      listJobsForWorkflowRunAttempt: [Function],
      listLabelsForSelfHostedRunnerForOrg: [Function],
      listLabelsForSelfHostedRunnerForRepo: [Function],
      listOrgSecrets: [Function],
      listRepoSecrets: [Function],
      listRepoWorkflows: [Function],
      listRunnerApplicationsForOrg: [Function],
      listRunnerApplicationsForRepo: [Function],
      listSelectedReposForOrgSecret: [Function],
      listSelectedRepositoriesEnabledGithubActionsOrganization: [Function],
      listSelfHostedRunnersForOrg: [Function],
      listSelfHostedRunnersForRepo: [Function],
      listWorkflowRunArtifacts: [Function],
      listWorkflowRuns: [Function],
      listWorkflowRunsForRepo: [Function],
      reRunJobForWorkflowRun: [Function],
      reRunWorkflow: [Function],
      reRunWorkflowFailedJobs: [Function],
      removeAllCustomLabelsFromSelfHostedRunnerForOrg: [Function],
      removeAllCustomLabelsFromSelfHostedRunnerForRepo: [Function],
      removeCustomLabelFromSelfHostedRunnerForOrg: [Function],
      removeCustomLabelFromSelfHostedRunnerForRepo: [Function],
      removeSelectedRepoFromOrgSecret: [Function],
      reviewPendingDeploymentsForRun: [Function],
      setAllowedActionsOrganization: [Function],
      setAllowedActionsRepository: [Function],
      setCustomLabelsForSelfHostedRunnerForOrg: [Function],
      setCustomLabelsForSelfHostedRunnerForRepo: [Function],
      setGithubActionsDefaultWorkflowPermissionsEnterprise: [Function],
      setGithubActionsDefaultWorkflowPermissionsOrganization: [Function],
      setGithubActionsDefaultWorkflowPermissionsRepository: [Function],
      setGithubActionsPermissionsOrganization: [Function],
      setGithubActionsPermissionsRepository: [Function],
      setSelectedReposForOrgSecret: [Function],
      setSelectedRepositoriesEnabledGithubActionsOrganization: [Function],
      setWorkflowAccessToRepository: [Function]
    },
    activity: {
      checkRepoIsStarredByAuthenticatedUser: [Function],
      deleteRepoSubscription: [Function],
      deleteThreadSubscription: [Function],
      getFeeds: [Function],
      getRepoSubscription: [Function],
      getThread: [Function],
      getThreadSubscriptionForAuthenticatedUser: [Function],
      listEventsForAuthenticatedUser: [Function],
      listNotificationsForAuthenticatedUser: [Function],
      listOrgEventsForAuthenticatedUser: [Function],
      listPublicEvents: [Function],
      listPublicEventsForRepoNetwork: [Function],
      listPublicEventsForUser: [Function],
      listPublicOrgEvents: [Function],
      listReceivedEventsForUser: [Function],
      listReceivedPublicEventsForUser: [Function],
      listRepoEvents: [Function],
      listRepoNotificationsForAuthenticatedUser: [Function],
      listReposStarredByAuthenticatedUser: [Function],
      listReposStarredByUser: [Function],
      listReposWatchedByUser: [Function],
      listStargazersForRepo: [Function],
      listWatchedReposForAuthenticatedUser: [Function],
      listWatchersForRepo: [Function],
      markNotificationsAsRead: [Function],
      markRepoNotificationsAsRead: [Function],
      markThreadAsRead: [Function],
      setRepoSubscription: [Function],
      setThreadSubscription: [Function],
      starRepoForAuthenticatedUser: [Function],
      unstarRepoForAuthenticatedUser: [Function]
    },
    apps: {
      addRepoToInstallation: [Function],
      addRepoToInstallationForAuthenticatedUser: [Function],
      checkToken: [Function],
      createFromManifest: [Function],
      createInstallationAccessToken: [Function],
      deleteAuthorization: [Function],
      deleteInstallation: [Function],
      deleteToken: [Function],
      getAuthenticated: [Function],
      getBySlug: [Function],
      getInstallation: [Function],
      getOrgInstallation: [Function],
      getRepoInstallation: [Function],
      getSubscriptionPlanForAccount: [Function],
      getSubscriptionPlanForAccountStubbed: [Function],
      getUserInstallation: [Function],
      getWebhookConfigForApp: [Function],
      getWebhookDelivery: [Function],
      listAccountsForPlan: [Function],
      listAccountsForPlanStubbed: [Function],
      listInstallationReposForAuthenticatedUser: [Function],
      listInstallations: [Function],
      listInstallationsForAuthenticatedUser: [Function],
      listPlans: [Function],
      listPlansStubbed: [Function],
      listReposAccessibleToInstallation: [Function],
      listSubscriptionsForAuthenticatedUser: [Function],
      listSubscriptionsForAuthenticatedUserStubbed: [Function],
      listWebhookDeliveries: [Function],
      redeliverWebhookDelivery: [Function],
      removeRepoFromInstallation: [Function],
      removeRepoFromInstallationForAuthenticatedUser: [Function],
      resetToken: [Function],
      revokeInstallationAccessToken: [Function],
      scopeToken: [Function],
      suspendInstallation: [Function],
      unsuspendInstallation: [Function],
      updateWebhookConfigForApp: [Function]
    },
    billing: {
      getGithubActionsBillingOrg: [Function],
      getGithubActionsBillingUser: [Function],
      getGithubAdvancedSecurityBillingGhe: [Function],
      getGithubAdvancedSecurityBillingOrg: [Function],
      getGithubPackagesBillingOrg: [Function],
      getGithubPackagesBillingUser: [Function],
      getSharedStorageBillingOrg: [Function],
      getSharedStorageBillingUser: [Function]
    },
    checks: {
      create: [Function],
      createSuite: [Function],
      get: [Function],
      getSuite: [Function],
      listAnnotations: [Function],
      listForRef: [Function],
      listForSuite: [Function],
      listSuitesForRef: [Function],
      rerequestRun: [Function],
      rerequestSuite: [Function],
      setSuitesPreferences: [Function],
      update: [Function]
    },
    codeScanning: {
      deleteAnalysis: [Function],
      getAlert: [Function],
      getAnalysis: [Function],
      getCodeqlDatabase: [Function],
      getSarif: [Function],
      listAlertInstances: [Function],
      listAlertsForEnterprise: [Function],
      listAlertsForOrg: [Function],
      listAlertsForRepo: [Function],
      listAlertsInstances: [Function],
      listCodeqlDatabases: [Function],
      listRecentAnalyses: [Function],
      updateAlert: [Function],
      uploadSarif: [Function]
    },
    codesOfConduct: { getAllCodesOfConduct: [Function], getConductCode: [Function] },
    codespaces: {
      addRepositoryForSecretForAuthenticatedUser: [Function],
      addSelectedRepoToOrgSecret: [Function],
      codespaceMachinesForAuthenticatedUser: [Function],
      createForAuthenticatedUser: [Function],
      createOrUpdateOrgSecret: [Function],
      createOrUpdateRepoSecret: [Function],
      createOrUpdateSecretForAuthenticatedUser: [Function],
      createWithPrForAuthenticatedUser: [Function],
      createWithRepoForAuthenticatedUser: [Function],
      deleteForAuthenticatedUser: [Function],
      deleteFromOrganization: [Function],
      deleteOrgSecret: [Function],
      deleteRepoSecret: [Function],
      deleteSecretForAuthenticatedUser: [Function],
      exportForAuthenticatedUser: [Function],
      getExportDetailsForAuthenticatedUser: [Function],
      getForAuthenticatedUser: [Function],
      getOrgPublicKey: [Function],
      getOrgSecret: [Function],
      getPublicKeyForAuthenticatedUser: [Function],
      getRepoPublicKey: [Function],
      getRepoSecret: [Function],
      getSecretForAuthenticatedUser: [Function],
      listDevcontainersInRepositoryForAuthenticatedUser: [Function],
      listForAuthenticatedUser: [Function],
      listInOrganization: [Function],
      listInRepositoryForAuthenticatedUser: [Function],
      listOrgSecrets: [Function],
      listRepoSecrets: [Function],
      listRepositoriesForSecretForAuthenticatedUser: [Function],
      listSecretsForAuthenticatedUser: [Function],
      listSelectedReposForOrgSecret: [Function],
      preFlightWithRepoForAuthenticatedUser: [Function],
      removeRepositoryForSecretForAuthenticatedUser: [Function],
      removeSelectedRepoFromOrgSecret: [Function],
      repoMachinesForAuthenticatedUser: [Function],
      setRepositoriesForSecretForAuthenticatedUser: [Function],
      setSelectedReposForOrgSecret: [Function],
      startForAuthenticatedUser: [Function],
      stopForAuthenticatedUser: [Function],
      stopInOrganization: [Function],
      updateForAuthenticatedUser: [Function]
    },
    dependabot: {
      addSelectedRepoToOrgSecret: [Function],
      createOrUpdateOrgSecret: [Function],
      createOrUpdateRepoSecret: [Function],
      deleteOrgSecret: [Function],
      deleteRepoSecret: [Function],
      getAlert: [Function],
      getOrgPublicKey: [Function],
      getOrgSecret: [Function],
      getRepoPublicKey: [Function],
      getRepoSecret: [Function],
      listAlertsForRepo: [Function],
      listOrgSecrets: [Function],
      listRepoSecrets: [Function],
      listSelectedReposForOrgSecret: [Function],
      removeSelectedRepoFromOrgSecret: [Function],
      setSelectedReposForOrgSecret: [Function],
      updateAlert: [Function]
    },
    dependencyGraph: { createRepositorySnapshot: [Function], diffRange: [Function] },
    emojis: { get: [Function] },
    enterpriseAdmin: {
      addCustomLabelsToSelfHostedRunnerForEnterprise: [Function],
      disableSelectedOrganizationGithubActionsEnterprise: [Function],
      enableSelectedOrganizationGithubActionsEnterprise: [Function],
      getAllowedActionsEnterprise: [Function],
      getGithubActionsPermissionsEnterprise: [Function],
      getServerStatistics: [Function],
      listLabelsForSelfHostedRunnerForEnterprise: [Function],
      listSelectedOrganizationsEnabledGithubActionsEnterprise: [Function],
      removeAllCustomLabelsFromSelfHostedRunnerForEnterprise: [Function],
      removeCustomLabelFromSelfHostedRunnerForEnterprise: [Function],
      setAllowedActionsEnterprise: [Function],
      setCustomLabelsForSelfHostedRunnerForEnterprise: [Function],
      setGithubActionsPermissionsEnterprise: [Function],
      setSelectedOrganizationsEnabledGithubActionsEnterprise: [Function]
    },
    gists: {
      checkIsStarred: [Function],
      create: [Function],
      createComment: [Function],
      delete: [Function],
      deleteComment: [Function],
      fork: [Function],
      get: [Function],
      getComment: [Function],
      getRevision: [Function],
      list: [Function],
      listComments: [Function],
      listCommits: [Function],
      listForUser: [Function],
      listForks: [Function],
      listPublic: [Function],
      listStarred: [Function],
      star: [Function],
      unstar: [Function],
      update: [Function],
      updateComment: [Function]
    },
    git: {
      createBlob: [Function],
      createCommit: [Function],
      createRef: [Function],
      createTag: [Function],
      createTree: [Function],
      deleteRef: [Function],
      getBlob: [Function],
      getCommit: [Function],
      getRef: [Function],
      getTag: [Function],
      getTree: [Function],
      listMatchingRefs: [Function],
      updateRef: [Function]
    },
    gitignore: { getAllTemplates: [Function], getTemplate: [Function] },
    interactions: {
      getRestrictionsForAuthenticatedUser: [Function],
      getRestrictionsForOrg: [Function],
      getRestrictionsForRepo: [Function],
      getRestrictionsForYourPublicRepos: [Function],
      removeRestrictionsForAuthenticatedUser: [Function],
      removeRestrictionsForOrg: [Function],
      removeRestrictionsForRepo: [Function],
      removeRestrictionsForYourPublicRepos: [Function],
      setRestrictionsForAuthenticatedUser: [Function],
      setRestrictionsForOrg: [Function],
      setRestrictionsForRepo: [Function],
      setRestrictionsForYourPublicRepos: [Function]
    },
    issues: {
      addAssignees: [Function],
      addLabels: [Function],
      checkUserCanBeAssigned: [Function],
      create: [Function],
      createComment: [Function],
      createLabel: [Function],
      createMilestone: [Function],
      deleteComment: [Function],
      deleteLabel: [Function],
      deleteMilestone: [Function],
      get: [Function],
      getComment: [Function],
      getEvent: [Function],
      getLabel: [Function],
      getMilestone: [Function],
      list: [Function],
      listAssignees: [Function],
      listComments: [Function],
      listCommentsForRepo: [Function],
      listEvents: [Function],
      listEventsForRepo: [Function],
      listEventsForTimeline: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listForRepo: [Function],
      listLabelsForMilestone: [Function],
      listLabelsForRepo: [Function],
      listLabelsOnIssue: [Function],
      listMilestones: [Function],
      lock: [Function],
      removeAllLabels: [Function],
      removeAssignees: [Function],
      removeLabel: [Function],
      setLabels: [Function],
      unlock: [Function],
      update: [Function],
      updateComment: [Function],
      updateLabel: [Function],
      updateMilestone: [Function]
    },
    licenses: {
      get: [Function],
      getAllCommonlyUsed: [Function],
      getForRepo: [Function]
    },
    markdown: { render: [Function], renderRaw: [Function] },
    meta: {
      get: [Function],
      getOctocat: [Function],
      getZen: [Function],
      root: [Function]
    },
    migrations: {
      cancelImport: [Function],
      deleteArchiveForAuthenticatedUser: [Function],
      deleteArchiveForOrg: [Function],
      downloadArchiveForOrg: [Function],
      getArchiveForAuthenticatedUser: [Function],
      getCommitAuthors: [Function],
      getImportStatus: [Function],
      getLargeFiles: [Function],
      getStatusForAuthenticatedUser: [Function],
      getStatusForOrg: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listReposForAuthenticatedUser: [Function],
      listReposForOrg: [Function],
      listReposForUser: [Function],
      mapCommitAuthor: [Function],
      setLfsPreference: [Function],
      startForAuthenticatedUser: [Function],
      startForOrg: [Function],
      startImport: [Function],
      unlockRepoForAuthenticatedUser: [Function],
      unlockRepoForOrg: [Function],
      updateImport: [Function]
    },
    orgs: {
      addSecurityManagerTeam: [Function],
      blockUser: [Function],
      cancelInvitation: [Function],
      checkBlockedUser: [Function],
      checkMembershipForUser: [Function],
      checkPublicMembershipForUser: [Function],
      convertMemberToOutsideCollaborator: [Function],
      createCustomRole: [Function],
      createInvitation: [Function],
      createWebhook: [Function],
      deleteCustomRole: [Function],
      deleteWebhook: [Function],
      enableOrDisableSecurityProductOnAllOrgRepos: [Function],
      get: [Function],
      getMembershipForAuthenticatedUser: [Function],
      getMembershipForUser: [Function],
      getWebhook: [Function],
      getWebhookConfigForOrg: [Function],
      getWebhookDelivery: [Function],
      list: [Function],
      listAppInstallations: [Function],
      listBlockedUsers: [Function],
      listCustomRoles: [Function],
      listFailedInvitations: [Function],
      listFineGrainedPermissions: [Function],
      listForAuthenticatedUser: [Function],
      listForUser: [Function],
      listInvitationTeams: [Function],
      listMembers: [Function],
      listMembershipsForAuthenticatedUser: [Function],
      listOutsideCollaborators: [Function],
      listPendingInvitations: [Function],
      listPublicMembers: [Function],
      listSecurityManagerTeams: [Function],
      listWebhookDeliveries: [Function],
      listWebhooks: [Function],
      pingWebhook: [Function],
      redeliverWebhookDelivery: [Function],
      removeMember: [Function],
      removeMembershipForUser: [Function],
      removeOutsideCollaborator: [Function],
      removePublicMembershipForAuthenticatedUser: [Function],
      removeSecurityManagerTeam: [Function],
      setMembershipForUser: [Function],
      setPublicMembershipForAuthenticatedUser: [Function],
      unblockUser: [Function],
      update: [Function],
      updateCustomRole: [Function],
      updateMembershipForAuthenticatedUser: [Function],
      updateWebhook: [Function],
      updateWebhookConfigForOrg: [Function]
    },
    packages: {
      deletePackageForAuthenticatedUser: [Function],
      deletePackageForOrg: [Function],
      deletePackageForUser: [Function],
      deletePackageVersionForAuthenticatedUser: [Function],
      deletePackageVersionForOrg: [Function],
      deletePackageVersionForUser: [Function],
      getAllPackageVersionsForAPackageOwnedByAnOrg: [Function],
      getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [Function],
      getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [Function],
      getAllPackageVersionsForPackageOwnedByOrg: [Function],
      getAllPackageVersionsForPackageOwnedByUser: [Function],
      getPackageForAuthenticatedUser: [Function],
      getPackageForOrganization: [Function],
      getPackageForUser: [Function],
      getPackageVersionForAuthenticatedUser: [Function],
      getPackageVersionForOrganization: [Function],
      getPackageVersionForUser: [Function],
      listPackagesForAuthenticatedUser: [Function],
      listPackagesForOrganization: [Function],
      listPackagesForUser: [Function],
      restorePackageForAuthenticatedUser: [Function],
      restorePackageForOrg: [Function],
      restorePackageForUser: [Function],
      restorePackageVersionForAuthenticatedUser: [Function],
      restorePackageVersionForOrg: [Function],
      restorePackageVersionForUser: [Function]
    },
    projects: {
      addCollaborator: [Function],
      createCard: [Function],
      createColumn: [Function],
      createForAuthenticatedUser: [Function],
      createForOrg: [Function],
      createForRepo: [Function],
      delete: [Function],
      deleteCard: [Function],
      deleteColumn: [Function],
      get: [Function],
      getCard: [Function],
      getColumn: [Function],
      getPermissionForUser: [Function],
      listCards: [Function],
      listCollaborators: [Function],
      listColumns: [Function],
      listForOrg: [Function],
      listForRepo: [Function],
      listForUser: [Function],
      moveCard: [Function],
      moveColumn: [Function],
      removeCollaborator: [Function],
      update: [Function],
      updateCard: [Function],
      updateColumn: [Function]
    },
    pulls: {
      checkIfMerged: [Function],
      create: [Function],
      createReplyForReviewComment: [Function],
      createReview: [Function],
      createReviewComment: [Function],
      deletePendingReview: [Function],
      deleteReviewComment: [Function],
      dismissReview: [Function],
      get: [Function],
      getReview: [Function],
      getReviewComment: [Function],
      list: [Function],
      listCommentsForReview: [Function],
      listCommits: [Function],
      listFiles: [Function],
      listRequestedReviewers: [Function],
      listReviewComments: [Function],
      listReviewCommentsForRepo: [Function],
      listReviews: [Function],
      merge: [Function],
      removeRequestedReviewers: [Function],
      requestReviewers: [Function],
      submitReview: [Function],
      update: [Function],
      updateBranch: [Function],
      updateReview: [Function],
      updateReviewComment: [Function]
    },
    rateLimit: { get: [Function] },
    reactions: {
      createForCommitComment: [Function],
      createForIssue: [Function],
      createForIssueComment: [Function],
      createForPullRequestReviewComment: [Function],
      createForRelease: [Function],
      createForTeamDiscussionCommentInOrg: [Function],
      createForTeamDiscussionInOrg: [Function],
      deleteForCommitComment: [Function],
      deleteForIssue: [Function],
      deleteForIssueComment: [Function],
      deleteForPullRequestComment: [Function],
      deleteForRelease: [Function],
      deleteForTeamDiscussion: [Function],
      deleteForTeamDiscussionComment: [Function],
      listForCommitComment: [Function],
      listForIssue: [Function],
      listForIssueComment: [Function],
      listForPullRequestReviewComment: [Function],
      listForRelease: [Function],
      listForTeamDiscussionCommentInOrg: [Function],
      listForTeamDiscussionInOrg: [Function]
    },
    repos: {
      acceptInvitation: [Function],
      acceptInvitationForAuthenticatedUser: [Function],
      addAppAccessRestrictions: [Function],
      addCollaborator: [Function],
      addStatusCheckContexts: [Function],
      addTeamAccessRestrictions: [Function],
      addUserAccessRestrictions: [Function],
      checkCollaborator: [Function],
      checkVulnerabilityAlerts: [Function],
      codeownersErrors: [Function],
      compareCommits: [Function],
      compareCommitsWithBasehead: [Function],
      createAutolink: [Function],
      createCommitComment: [Function],
      createCommitSignatureProtection: [Function],
      createCommitStatus: [Function],
      createDeployKey: [Function],
      createDeployment: [Function],
      createDeploymentBranchPolicy: [Function],
      createDeploymentStatus: [Function],
      createDispatchEvent: [Function],
      createForAuthenticatedUser: [Function],
      createFork: [Function],
      createInOrg: [Function],
      createOrUpdateEnvironment: [Function],
      createOrUpdateFileContents: [Function],
      createPagesDeployment: [Function],
      createPagesSite: [Function],
      createRelease: [Function],
      createTagProtection: [Function],
      createUsingTemplate: [Function],
      createWebhook: [Function],
      declineInvitation: [Function],
      declineInvitationForAuthenticatedUser: [Function],
      delete: [Function],
      deleteAccessRestrictions: [Function],
      deleteAdminBranchProtection: [Function],
      deleteAnEnvironment: [Function],
      deleteAutolink: [Function],
      deleteBranchProtection: [Function],
      deleteCommitComment: [Function],
      deleteCommitSignatureProtection: [Function],
      deleteDeployKey: [Function],
      deleteDeployment: [Function],
      deleteDeploymentBranchPolicy: [Function],
      deleteFile: [Function],
      deleteInvitation: [Function],
      deletePagesSite: [Function],
      deletePullRequestReviewProtection: [Function],
      deleteRelease: [Function],
      deleteReleaseAsset: [Function],
      deleteTagProtection: [Function],
      deleteWebhook: [Function],
      disableAutomatedSecurityFixes: [Function],
      disableLfsForRepo: [Function],
      disableVulnerabilityAlerts: [Function],
      downloadArchive: [Function],
      downloadTarballArchive: [Function],
      downloadZipballArchive: [Function],
      enableAutomatedSecurityFixes: [Function],
      enableLfsForRepo: [Function],
      enableVulnerabilityAlerts: [Function],
      generateReleaseNotes: [Function],
      get: [Function],
      getAccessRestrictions: [Function],
      getAdminBranchProtection: [Function],
      getAllEnvironments: [Function],
      getAllStatusCheckContexts: [Function],
      getAllTopics: [Function],
      getAppsWithAccessToProtectedBranch: [Function],
      getAutolink: [Function],
      getBranch: [Function],
      getBranchProtection: [Function],
      getClones: [Function],
      getCodeFrequencyStats: [Function],
      getCollaboratorPermissionLevel: [Function],
      getCombinedStatusForRef: [Function],
      getCommit: [Function],
      getCommitActivityStats: [Function],
      getCommitComment: [Function],
      getCommitSignatureProtection: [Function],
      getCommunityProfileMetrics: [Function],
      getContent: [Function],
      getContributorsStats: [Function],
      getDeployKey: [Function],
      getDeployment: [Function],
      getDeploymentBranchPolicy: [Function],
      getDeploymentStatus: [Function],
      getEnvironment: [Function],
      getLatestPagesBuild: [Function],
      getLatestRelease: [Function],
      getPages: [Function],
      getPagesBuild: [Function],
      getPagesHealthCheck: [Function],
      getParticipationStats: [Function],
      getPullRequestReviewProtection: [Function],
      getPunchCardStats: [Function],
      getReadme: [Function],
      getReadmeInDirectory: [Function],
      getRelease: [Function],
      getReleaseAsset: [Function],
      getReleaseByTag: [Function],
      getStatusChecksProtection: [Function],
      getTeamsWithAccessToProtectedBranch: [Function],
      getTopPaths: [Function],
      getTopReferrers: [Function],
      getUsersWithAccessToProtectedBranch: [Function],
      getViews: [Function],
      getWebhook: [Function],
      getWebhookConfigForRepo: [Function],
      getWebhookDelivery: [Function],
      listAutolinks: [Function],
      listBranches: [Function],
      listBranchesForHeadCommit: [Function],
      listCollaborators: [Function],
      listCommentsForCommit: [Function],
      listCommitCommentsForRepo: [Function],
      listCommitStatusesForRef: [Function],
      listCommits: [Function],
      listContributors: [Function],
      listDeployKeys: [Function],
      listDeploymentBranchPolicies: [Function],
      listDeploymentStatuses: [Function],
      listDeployments: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listForUser: [Function],
      listForks: [Function],
      listInvitations: [Function],
      listInvitationsForAuthenticatedUser: [Function],
      listLanguages: [Function],
      listPagesBuilds: [Function],
      listPublic: [Function],
      listPullRequestsAssociatedWithCommit: [Function],
      listReleaseAssets: [Function],
      listReleases: [Function],
      listTagProtection: [Function],
      listTags: [Function],
      listTeams: [Function],
      listWebhookDeliveries: [Function],
      listWebhooks: [Function],
      merge: [Function],
      mergeUpstream: [Function],
      pingWebhook: [Function],
      redeliverWebhookDelivery: [Function],
      removeAppAccessRestrictions: [Function],
      removeCollaborator: [Function],
      removeStatusCheckContexts: [Function],
      removeStatusCheckProtection: [Function],
      removeTeamAccessRestrictions: [Function],
      removeUserAccessRestrictions: [Function],
      renameBranch: [Function],
      replaceAllTopics: [Function],
      requestPagesBuild: [Function],
      setAdminBranchProtection: [Function],
      setAppAccessRestrictions: [Function],
      setStatusCheckContexts: [Function],
      setTeamAccessRestrictions: [Function],
      setUserAccessRestrictions: [Function],
      testPushWebhook: [Function],
      transfer: [Function],
      update: [Function],
      updateBranchProtection: [Function],
      updateCommitComment: [Function],
      updateDeploymentBranchPolicy: [Function],
      updateInformationAboutPagesSite: [Function],
      updateInvitation: [Function],
      updatePullRequestReviewProtection: [Function],
      updateRelease: [Function],
      updateReleaseAsset: [Function],
      updateStatusCheckPotection: [Function],
      updateStatusCheckProtection: [Function],
      updateWebhook: [Function],
      updateWebhookConfigForRepo: [Function],
      uploadReleaseAsset: [Function]
    },
    search: {
      code: [Function],
      commits: [Function],
      issuesAndPullRequests: [Function],
      labels: [Function],
      repos: [Function],
      topics: [Function],
      users: [Function]
    },
    secretScanning: {
      getAlert: [Function],
      listAlertsForEnterprise: [Function],
      listAlertsForOrg: [Function],
      listAlertsForRepo: [Function],
      listLocationsForAlert: [Function],
      updateAlert: [Function]
    },
    teams: {
      addOrUpdateMembershipForUserInOrg: [Function],
      addOrUpdateProjectPermissionsInOrg: [Function],
      addOrUpdateRepoPermissionsInOrg: [Function],
      checkPermissionsForProjectInOrg: [Function],
      checkPermissionsForRepoInOrg: [Function],
      create: [Function],
      createDiscussionCommentInOrg: [Function],
      createDiscussionInOrg: [Function],
      deleteDiscussionCommentInOrg: [Function],
      deleteDiscussionInOrg: [Function],
      deleteInOrg: [Function],
      getByName: [Function],
      getDiscussionCommentInOrg: [Function],
      getDiscussionInOrg: [Function],
      getMembershipForUserInOrg: [Function],
      list: [Function],
      listChildInOrg: [Function],
      listDiscussionCommentsInOrg: [Function],
      listDiscussionsInOrg: [Function],
      listForAuthenticatedUser: [Function],
      listMembersInOrg: [Function],
      listPendingInvitationsInOrg: [Function],
      listProjectsInOrg: [Function],
      listReposInOrg: [Function],
      removeMembershipForUserInOrg: [Function],
      removeProjectInOrg: [Function],
      removeRepoInOrg: [Function],
      updateDiscussionCommentInOrg: [Function],
      updateDiscussionInOrg: [Function],
      updateInOrg: [Function]
    },
    users: {
      addEmailForAuthenticated: [Function],
      addEmailForAuthenticatedUser: [Function],
      block: [Function],
      checkBlocked: [Function],
      checkFollowingForUser: [Function],
      checkPersonIsFollowedByAuthenticated: [Function],
      createGpgKeyForAuthenticated: [Function],
      createGpgKeyForAuthenticatedUser: [Function],
      createPublicSshKeyForAuthenticated: [Function],
      createPublicSshKeyForAuthenticatedUser: [Function],
      createSshSigningKeyForAuthenticatedUser: [Function],
      deleteEmailForAuthenticated: [Function],
      deleteEmailForAuthenticatedUser: [Function],
      deleteGpgKeyForAuthenticated: [Function],
      deleteGpgKeyForAuthenticatedUser: [Function],
      deletePublicSshKeyForAuthenticated: [Function],
      deletePublicSshKeyForAuthenticatedUser: [Function],
      deleteSshSigningKeyForAuthenticatedUser: [Function],
      follow: [Function],
      getAuthenticated: [Function],
      getByUsername: [Function],
      getContextForUser: [Function],
      getGpgKeyForAuthenticated: [Function],
      getGpgKeyForAuthenticatedUser: [Function],
      getPublicSshKeyForAuthenticated: [Function],
      getPublicSshKeyForAuthenticatedUser: [Function],
      getSshSigningKeyForAuthenticatedUser: [Function],
      list: [Function],
      listBlockedByAuthenticated: [Function],
      listBlockedByAuthenticatedUser: [Function],
      listEmailsForAuthenticated: [Function],
      listEmailsForAuthenticatedUser: [Function],
      listFollowedByAuthenticated: [Function],
      listFollowedByAuthenticatedUser: [Function],
      listFollowersForAuthenticatedUser: [Function],
      listFollowersForUser: [Function],
      listFollowingForUser: [Function],
      listGpgKeysForAuthenticated: [Function],
      listGpgKeysForAuthenticatedUser: [Function],
      listGpgKeysForUser: [Function],
      listPublicEmailsForAuthenticated: [Function],
      listPublicEmailsForAuthenticatedUser: [Function],
      listPublicKeysForUser: [Function],
      listPublicSshKeysForAuthenticated: [Function],
      listPublicSshKeysForAuthenticatedUser: [Function],
      listSshSigningKeysForAuthenticatedUser: [Function],
      listSshSigningKeysForUser: [Function],
      setPrimaryEmailVisibilityForAuthenticated: [Function],
      setPrimaryEmailVisibilityForAuthenticatedUser: [Function],
      unblock: [Function],
      unfollow: [Function],
      updateAuthenticated: [Function]
    },
    rest: {
      actions: [Object],
      activity: [Object],
      apps: [Object],
      billing: [Object],
      checks: [Object],
      codeScanning: [Object],
      codesOfConduct: [Object],
      codespaces: [Object],
      dependabot: [Object],
      dependencyGraph: [Object],
      emojis: [Object],
      enterpriseAdmin: [Object],
      gists: [Object],
      git: [Object],
      gitignore: [Object],
      interactions: [Object],
      issues: [Object],
      licenses: [Object],
      markdown: [Object],
      meta: [Object],
      migrations: [Object],
      orgs: [Object],
      packages: [Object],
      projects: [Object],
      pulls: [Object],
      rateLimit: [Object],
      reactions: [Object],
      repos: [Object],
      search: [Object],
      secretScanning: [Object],
      teams: [Object],
      users: [Object]
    },
    paginate: [Function: bound paginate] { iterator: [Function: bound iterator] }
  },
  request: [Function: newApi] {
    endpoint: [Function: bound endpointWithDefaults] {
      DEFAULTS: [Object],
      defaults: [Function: bound withDefaults],
      merge: [Function: bound merge],
      parse: [Function: parse]
    },
    defaults: [Function: bound withDefaults]
  },
  graphql: [Function: newApi] {
    defaults: [Function: bound withDefaults],
    endpoint: [Function: bound endpointWithDefaults] {
      DEFAULTS: [Object],
      defaults: [Function: bound withDefaults],
      merge: [Function: bound merge],
      parse: [Function: parse]
    }
  },
  fileCache: RepositoryFileCache {
    octokit: OctokitWithDefaults {
      request: [Function],
      graphql: [Function],
      log: [Object],
      hook: [Function],
      auth: [AsyncFunction],
      actions: [Object],
      activity: [Object],
      apps: [Object],
      billing: [Object],
      checks: [Object],
      codeScanning: [Object],
      codesOfConduct: [Object],
      codespaces: [Object],
      dependabot: [Object],
      dependencyGraph: [Object],
      emojis: [Object],
      enterpriseAdmin: [Object],
      gists: [Object],
      git: [Object],
      gitignore: [Object],
      interactions: [Object],
      issues: [Object],
      licenses: [Object],
      markdown: [Object],
      meta: [Object],
      migrations: [Object],
      orgs: [Object],
      packages: [Object],
      projects: [Object],
      pulls: [Object],
      rateLimit: [Object],
      reactions: [Object],
      repos: [Object],
      search: [Object],
      secretScanning: [Object],
      teams: [Object],
      users: [Object],
      rest: [Object],
      paginate: [Function]
    },
    repository: {
      owner: 'chingor13',
      repo: 'google-auth-library-java',
      defaultBranch: 'master'
    },
    cache: Map(0) {}
  },
  logger: GCFLogger {
    destination: SonicBoom {
      _bufs: [],
      _len: 0,
      fd: 1,
      _writing: false,
      _writingBuf: '',
      _ending: false,
      _reopening: false,
      _asyncDrainScheduled: true,
      _hwm: 16387,
      file: null,
      destroyed: false,
      minLength: 0,
      maxLength: 0,
      maxWrite: 16384,
      sync: true,
      _fsync: false,
      append: true,
      mode: undefined,
      retryEAGAIN: [Function (anonymous)],
      mkdir: false,
      release: [Function (anonymous)],
      _events: [Object: null prototype],
      _eventsCount: 2
    },
    pino: EventEmitter {
      levels: [Object],
      silent: [Function: noop],
      onChild: [Function: noop],
      trace: [Function: LOG],
      debug: [Function: LOG],
      info: [Function: LOG],
      warn: [Function: LOG],
      error: [Function: LOG],
      fatal: [Function (anonymous)],
      metric: [Function: LOG],
      [Symbol(pino.useOnlyCustomLevels)]: false,
      [Symbol(pino.stream)]: [SonicBoom],
      [Symbol(pino.time)]: [Function: nullTime],
      [Symbol(pino.timeSliceIndex)]: 0,
      [Symbol(pino.stringify)]: [Function: stringify],
      [Symbol(pino.stringifySafe)]: [Function: stringify],
      [Symbol(pino.stringifiers)]: {},
      [Symbol(pino.end)]: '}\n',
      [Symbol(pino.formatOpts)]: [Object],
      [Symbol(pino.messageKey)]: 'message',
      [Symbol(pino.errorKey)]: 'err',
      [Symbol(pino.nestedKey)]: null,
      [Symbol(pino.nestedKeyStr)]: '',
      [Symbol(pino.serializers)]: [Object],
      [Symbol(pino.mixin)]: undefined,
      [Symbol(pino.mixinMergeStrategy)]: undefined,
      [Symbol(pino.chindings)]: '',
      [Symbol(pino.formatters)]: [Object],
      [Symbol(pino.hooks)]: [Object],
      [Symbol(pino.lsCache)]: [Object],
      [Symbol(pino.levelVal)]: 10
    },
    trace: [Function: bound trace],
    debug: [Function: bound debug],
    info: [Function: bound info],
    warn: [Function: bound warn],
    metric: [Function: bound metric],
    error: [Function: bound error],
    child: [Function: bound child]
  }
} instanceOf(GitHub)
'"master"'
{
  releaseType: 'java-yoshi',
  versioning: undefined,
  bumpMinorPreMajor: undefined,
  bumpPatchForMinorPreMajor: undefined,
  draft: undefined,
  draftPullRequest: undefined,
  packageName: undefined,
  includeComponentInTag: false,
  pullRequestTitlePattern: undefined,
  changelogHost: undefined,
  changelogPath: undefined,
  changelogType: undefined,
  versionFile: undefined,
  extraFiles: undefined,
  initialVersion: undefined
} any
{
  manifestPath: undefined,
  labels: undefined,
  releaseLabels: [ 'autorelease: published' ],
  plugins: [ { type: 'sentence-case', specialWords: [Array] } ],
  logger: GCFLogger {
    destination: SonicBoom {
      _bufs: [],
      _len: 0,
      fd: 1,
      _writing: false,
      _writingBuf: '',
      _ending: false,
      _reopening: false,
      _asyncDrainScheduled: true,
      _hwm: 16387,
      file: null,
      destroyed: false,
      minLength: 0,
      maxLength: 0,
      maxWrite: 16384,
      sync: true,
      _fsync: false,
      append: true,
      mode: undefined,
      retryEAGAIN: [Function (anonymous)],
      mkdir: false,
      release: [Function (anonymous)],
      _events: [Object: null prototype],
      _eventsCount: 2
    },
    pino: EventEmitter {
      levels: [Object],
      silent: [Function: noop],
      onChild: [Function: noop],
      trace: [Function: LOG],
      debug: [Function: LOG],
      info: [Function: LOG],
      warn: [Function: LOG],
      error: [Function: LOG],
      fatal: [Function (anonymous)],
      metric: [Function: LOG],
      [Symbol(pino.useOnlyCustomLevels)]: false,
      [Symbol(pino.stream)]: [SonicBoom],
      [Symbol(pino.time)]: [Function: nullTime],
      [Symbol(pino.timeSliceIndex)]: 0,
      [Symbol(pino.stringify)]: [Function: stringify],
      [Symbol(pino.stringifySafe)]: [Function: stringify],
      [Symbol(pino.stringifiers)]: {},
      [Symbol(pino.end)]: '}\n',
      [Symbol(pino.formatOpts)]: [Object],
      [Symbol(pino.messageKey)]: 'message',
      [Symbol(pino.errorKey)]: 'err',
      [Symbol(pino.nestedKey)]: null,
      [Symbol(pino.nestedKeyStr)]: '',
      [Symbol(pino.serializers)]: [Object],
      [Symbol(pino.mixin)]: undefined,
      [Symbol(pino.mixinMergeStrategy)]: undefined,
      [Symbol(pino.chindings)]: '',
      [Symbol(pino.formatters)]: [Object],
      [Symbol(pino.hooks)]: [Object],
      [Symbol(pino.lsCache)]: [Object],
      [Symbol(pino.levelVal)]: 10
    },
    trace: [Function: bound trace],
    debug: [Function: bound debug],
    info: [Function: bound info],
    warn: [Function: bound warn],
    metric: [Function: bound metric],
    error: [Function: bound error],
    child: [Function: bound child]
  }
} has("releaseLabels", autorelease: published)
undefined
      at Object.fail (node_modules/sinon/lib/sinon/assert.js:120:25)
      at failAssertion (node_modules/sinon/lib/sinon/assert.js:66:20)
      at Object.assert.<computed> [as calledOnceWithExactly] (node_modules/sinon/lib/sinon/assert.js:95:17)
      at Context.<anonymous> (test/release-please.ts:309:22)

  2) ReleasePleaseBot
       push to master branch
         for manifest releases
           should handle GitHub releases, if configured:
     expected fromManifest to be called once but was called twice
    fromManifest(GitHub {
  getCommitFiles: [AsyncFunction (anonymous)],
  graphqlRequest: [AsyncFunction (anonymous)],
  findFilesByFilenameAndRef: [AsyncFunction (anonymous)],
  findFilesByGlobAndRef: [AsyncFunction (anonymous)],
  createPullRequest: [AsyncFunction (anonymous)],
  getPullRequest: [AsyncFunction (anonymous)],
  updatePullRequest: [AsyncFunction (anonymous)],
  findFilesByExtensionAndRef: [AsyncFunction (anonymous)],
  createRelease: [AsyncFunction (anonymous)],
  commentOnIssue: [AsyncFunction (anonymous)],
  removeIssueLabels: [AsyncFunction (anonymous)],
  addIssueLabels: [AsyncFunction (anonymous)],
  repository: {
    owner: 'chingor13',
    repo: 'google-auth-library-java',
    defaultBranch: 'master'
  },
  octokit: OctokitWithDefaults {
    request: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    graphql: [Function: newApi] {
      defaults: [Function: bound withDefaults],
      endpoint: [Function]
    },
    log: {
      debug: [Function: debug],
      info: [Function: info],
      warn: [Function: bound warn],
      error: [Function: bound error]
    },
    hook: [Function: bound register] {
      api: [Object],
      remove: [Function: bound removeHook],
      before: [Function: bound addHook],
      error: [Function: bound addHook],
      after: [Function: bound addHook],
      wrap: [Function: bound addHook]
    },
    auth: [Function: bound auth] AsyncFunction {
      hook: [Function: bound hook] AsyncFunction
    },
    actions: {
      addCustomLabelsToSelfHostedRunnerForOrg: [Function],
      addCustomLabelsToSelfHostedRunnerForRepo: [Function],
      addSelectedRepoToOrgSecret: [Function],
      approveWorkflowRun: [Function],
      cancelWorkflowRun: [Function],
      createOrUpdateEnvironmentSecret: [Function],
      createOrUpdateOrgSecret: [Function],
      createOrUpdateRepoSecret: [Function],
      createRegistrationTokenForOrg: [Function],
      createRegistrationTokenForRepo: [Function],
      createRemoveTokenForOrg: [Function],
      createRemoveTokenForRepo: [Function],
      createWorkflowDispatch: [Function],
      deleteActionsCacheById: [Function],
      deleteActionsCacheByKey: [Function],
      deleteArtifact: [Function],
      deleteEnvironmentSecret: [Function],
      deleteOrgSecret: [Function],
      deleteRepoSecret: [Function],
      deleteSelfHostedRunnerFromOrg: [Function],
      deleteSelfHostedRunnerFromRepo: [Function],
      deleteWorkflowRun: [Function],
      deleteWorkflowRunLogs: [Function],
      disableSelectedRepositoryGithubActionsOrganization: [Function],
      disableWorkflow: [Function],
      downloadArtifact: [Function],
      downloadJobLogsForWorkflowRun: [Function],
      downloadWorkflowRunAttemptLogs: [Function],
      downloadWorkflowRunLogs: [Function],
      enableSelectedRepositoryGithubActionsOrganization: [Function],
      enableWorkflow: [Function],
      getActionsCacheList: [Function],
      getActionsCacheUsage: [Function],
      getActionsCacheUsageByRepoForOrg: [Function],
      getActionsCacheUsageForEnterprise: [Function],
      getActionsCacheUsageForOrg: [Function],
      getAllowedActionsOrganization: [Function],
      getAllowedActionsRepository: [Function],
      getArtifact: [Function],
      getEnvironmentPublicKey: [Function],
      getEnvironmentSecret: [Function],
      getGithubActionsDefaultWorkflowPermissionsEnterprise: [Function],
      getGithubActionsDefaultWorkflowPermissionsOrganization: [Function],
      getGithubActionsDefaultWorkflowPermissionsRepository: [Function],
      getGithubActionsPermissionsOrganization: [Function],
      getGithubActionsPermissionsRepository: [Function],
      getJobForWorkflowRun: [Function],
      getOrgPublicKey: [Function],
      getOrgSecret: [Function],
      getPendingDeploymentsForRun: [Function],
      getRepoPermissions: [Function],
      getRepoPublicKey: [Function],
      getRepoSecret: [Function],
      getReviewsForRun: [Function],
      getSelfHostedRunnerForOrg: [Function],
      getSelfHostedRunnerForRepo: [Function],
      getWorkflow: [Function],
      getWorkflowAccessToRepository: [Function],
      getWorkflowRun: [Function],
      getWorkflowRunAttempt: [Function],
      getWorkflowRunUsage: [Function],
      getWorkflowUsage: [Function],
      listArtifactsForRepo: [Function],
      listEnvironmentSecrets: [Function],
      listJobsForWorkflowRun: [Function],
      listJobsForWorkflowRunAttempt: [Function],
      listLabelsForSelfHostedRunnerForOrg: [Function],
      listLabelsForSelfHostedRunnerForRepo: [Function],
      listOrgSecrets: [Function],
      listRepoSecrets: [Function],
      listRepoWorkflows: [Function],
      listRunnerApplicationsForOrg: [Function],
      listRunnerApplicationsForRepo: [Function],
      listSelectedReposForOrgSecret: [Function],
      listSelectedRepositoriesEnabledGithubActionsOrganization: [Function],
      listSelfHostedRunnersForOrg: [Function],
      listSelfHostedRunnersForRepo: [Function],
      listWorkflowRunArtifacts: [Function],
      listWorkflowRuns: [Function],
      listWorkflowRunsForRepo: [Function],
      reRunJobForWorkflowRun: [Function],
      reRunWorkflow: [Function],
      reRunWorkflowFailedJobs: [Function],
      removeAllCustomLabelsFromSelfHostedRunnerForOrg: [Function],
      removeAllCustomLabelsFromSelfHostedRunnerForRepo: [Function],
      removeCustomLabelFromSelfHostedRunnerForOrg: [Function],
      removeCustomLabelFromSelfHostedRunnerForRepo: [Function],
      removeSelectedRepoFromOrgSecret: [Function],
      reviewPendingDeploymentsForRun: [Function],
      setAllowedActionsOrganization: [Function],
      setAllowedActionsRepository: [Function],
      setCustomLabelsForSelfHostedRunnerForOrg: [Function],
      setCustomLabelsForSelfHostedRunnerForRepo: [Function],
      setGithubActionsDefaultWorkflowPermissionsEnterprise: [Function],
      setGithubActionsDefaultWorkflowPermissionsOrganization: [Function],
      setGithubActionsDefaultWorkflowPermissionsRepository: [Function],
      setGithubActionsPermissionsOrganization: [Function],
      setGithubActionsPermissionsRepository: [Function],
      setSelectedReposForOrgSecret: [Function],
      setSelectedRepositoriesEnabledGithubActionsOrganization: [Function],
      setWorkflowAccessToRepository: [Function]
    },
    activity: {
      checkRepoIsStarredByAuthenticatedUser: [Function],
      deleteRepoSubscription: [Function],
      deleteThreadSubscription: [Function],
      getFeeds: [Function],
      getRepoSubscription: [Function],
      getThread: [Function],
      getThreadSubscriptionForAuthenticatedUser: [Function],
      listEventsForAuthenticatedUser: [Function],
      listNotificationsForAuthenticatedUser: [Function],
      listOrgEventsForAuthenticatedUser: [Function],
      listPublicEvents: [Function],
      listPublicEventsForRepoNetwork: [Function],
      listPublicEventsForUser: [Function],
      listPublicOrgEvents: [Function],
      listReceivedEventsForUser: [Function],
      listReceivedPublicEventsForUser: [Function],
      listRepoEvents: [Function],
      listRepoNotificationsForAuthenticatedUser: [Function],
      listReposStarredByAuthenticatedUser: [Function],
      listReposStarredByUser: [Function],
      listReposWatchedByUser: [Function],
      listStargazersForRepo: [Function],
      listWatchedReposForAuthenticatedUser: [Function],
      listWatchersForRepo: [Function],
      markNotificationsAsRead: [Function],
      markRepoNotificationsAsRead: [Function],
      markThreadAsRead: [Function],
      setRepoSubscription: [Function],
      setThreadSubscription: [Function],
      starRepoForAuthenticatedUser: [Function],
      unstarRepoForAuthenticatedUser: [Function]
    },
    apps: {
      addRepoToInstallation: [Function],
      addRepoToInstallationForAuthenticatedUser: [Function],
      checkToken: [Function],
      createFromManifest: [Function],
      createInstallationAccessToken: [Function],
      deleteAuthorization: [Function],
      deleteInstallation: [Function],
      deleteToken: [Function],
      getAuthenticated: [Function],
      getBySlug: [Function],
      getInstallation: [Function],
      getOrgInstallation: [Function],
      getRepoInstallation: [Function],
      getSubscriptionPlanForAccount: [Function],
      getSubscriptionPlanForAccountStubbed: [Function],
      getUserInstallation: [Function],
      getWebhookConfigForApp: [Function],
      getWebhookDelivery: [Function],
      listAccountsForPlan: [Function],
      listAccountsForPlanStubbed: [Function],
      listInstallationReposForAuthenticatedUser: [Function],
      listInstallations: [Function],
      listInstallationsForAuthenticatedUser: [Function],
      listPlans: [Function],
      listPlansStubbed: [Function],
      listReposAccessibleToInstallation: [Function],
      listSubscriptionsForAuthenticatedUser: [Function],
      listSubscriptionsForAuthenticatedUserStubbed: [Function],
      listWebhookDeliveries: [Function],
      redeliverWebhookDelivery: [Function],
      removeRepoFromInstallation: [Function],
      removeRepoFromInstallationForAuthenticatedUser: [Function],
      resetToken: [Function],
      revokeInstallationAccessToken: [Function],
      scopeToken: [Function],
      suspendInstallation: [Function],
      unsuspendInstallation: [Function],
      updateWebhookConfigForApp: [Function]
    },
    billing: {
      getGithubActionsBillingOrg: [Function],
      getGithubActionsBillingUser: [Function],
      getGithubAdvancedSecurityBillingGhe: [Function],
      getGithubAdvancedSecurityBillingOrg: [Function],
      getGithubPackagesBillingOrg: [Function],
      getGithubPackagesBillingUser: [Function],
      getSharedStorageBillingOrg: [Function],
      getSharedStorageBillingUser: [Function]
    },
    checks: {
      create: [Function],
      createSuite: [Function],
      get: [Function],
      getSuite: [Function],
      listAnnotations: [Function],
      listForRef: [Function],
      listForSuite: [Function],
      listSuitesForRef: [Function],
      rerequestRun: [Function],
      rerequestSuite: [Function],
      setSuitesPreferences: [Function],
      update: [Function]
    },
    codeScanning: {
      deleteAnalysis: [Function],
      getAlert: [Function],
      getAnalysis: [Function],
      getCodeqlDatabase: [Function],
      getSarif: [Function],
      listAlertInstances: [Function],
      listAlertsForEnterprise: [Function],
      listAlertsForOrg: [Function],
      listAlertsForRepo: [Function],
      listAlertsInstances: [Function],
      listCodeqlDatabases: [Function],
      listRecentAnalyses: [Function],
      updateAlert: [Function],
      uploadSarif: [Function]
    },
    codesOfConduct: { getAllCodesOfConduct: [Function], getConductCode: [Function] },
    codespaces: {
      addRepositoryForSecretForAuthenticatedUser: [Function],
      addSelectedRepoToOrgSecret: [Function],
      codespaceMachinesForAuthenticatedUser: [Function],
      createForAuthenticatedUser: [Function],
      createOrUpdateOrgSecret: [Function],
      createOrUpdateRepoSecret: [Function],
      createOrUpdateSecretForAuthenticatedUser: [Function],
      createWithPrForAuthenticatedUser: [Function],
      createWithRepoForAuthenticatedUser: [Function],
      deleteForAuthenticatedUser: [Function],
      deleteFromOrganization: [Function],
      deleteOrgSecret: [Function],
      deleteRepoSecret: [Function],
      deleteSecretForAuthenticatedUser: [Function],
      exportForAuthenticatedUser: [Function],
      getExportDetailsForAuthenticatedUser: [Function],
      getForAuthenticatedUser: [Function],
      getOrgPublicKey: [Function],
      getOrgSecret: [Function],
      getPublicKeyForAuthenticatedUser: [Function],
      getRepoPublicKey: [Function],
      getRepoSecret: [Function],
      getSecretForAuthenticatedUser: [Function],
      listDevcontainersInRepositoryForAuthenticatedUser: [Function],
      listForAuthenticatedUser: [Function],
      listInOrganization: [Function],
      listInRepositoryForAuthenticatedUser: [Function],
      listOrgSecrets: [Function],
      listRepoSecrets: [Function],
      listRepositoriesForSecretForAuthenticatedUser: [Function],
      listSecretsForAuthenticatedUser: [Function],
      listSelectedReposForOrgSecret: [Function],
      preFlightWithRepoForAuthenticatedUser: [Function],
      removeRepositoryForSecretForAuthenticatedUser: [Function],
      removeSelectedRepoFromOrgSecret: [Function],
      repoMachinesForAuthenticatedUser: [Function],
      setRepositoriesForSecretForAuthenticatedUser: [Function],
      setSelectedReposForOrgSecret: [Function],
      startForAuthenticatedUser: [Function],
      stopForAuthenticatedUser: [Function],
      stopInOrganization: [Function],
      updateForAuthenticatedUser: [Function]
    },
    dependabot: {
      addSelectedRepoToOrgSecret: [Function],
      createOrUpdateOrgSecret: [Function],
      createOrUpdateRepoSecret: [Function],
      deleteOrgSecret: [Function],
      deleteRepoSecret: [Function],
      getAlert: [Function],
      getOrgPublicKey: [Function],
      getOrgSecret: [Function],
      getRepoPublicKey: [Function],
      getRepoSecret: [Function],
      listAlertsForRepo: [Function],
      listOrgSecrets: [Function],
      listRepoSecrets: [Function],
      listSelectedReposForOrgSecret: [Function],
      removeSelectedRepoFromOrgSecret: [Function],
      setSelectedReposForOrgSecret: [Function],
      updateAlert: [Function]
    },
    dependencyGraph: { createRepositorySnapshot: [Function], diffRange: [Function] },
    emojis: { get: [Function] },
    enterpriseAdmin: {
      addCustomLabelsToSelfHostedRunnerForEnterprise: [Function],
      disableSelectedOrganizationGithubActionsEnterprise: [Function],
      enableSelectedOrganizationGithubActionsEnterprise: [Function],
      getAllowedActionsEnterprise: [Function],
      getGithubActionsPermissionsEnterprise: [Function],
      getServerStatistics: [Function],
      listLabelsForSelfHostedRunnerForEnterprise: [Function],
      listSelectedOrganizationsEnabledGithubActionsEnterprise: [Function],
      removeAllCustomLabelsFromSelfHostedRunnerForEnterprise: [Function],
      removeCustomLabelFromSelfHostedRunnerForEnterprise: [Function],
      setAllowedActionsEnterprise: [Function],
      setCustomLabelsForSelfHostedRunnerForEnterprise: [Function],
      setGithubActionsPermissionsEnterprise: [Function],
      setSelectedOrganizationsEnabledGithubActionsEnterprise: [Function]
    },
    gists: {
      checkIsStarred: [Function],
      create: [Function],
      createComment: [Function],
      delete: [Function],
      deleteComment: [Function],
      fork: [Function],
      get: [Function],
      getComment: [Function],
      getRevision: [Function],
      list: [Function],
      listComments: [Function],
      listCommits: [Function],
      listForUser: [Function],
      listForks: [Function],
      listPublic: [Function],
      listStarred: [Function],
      star: [Function],
      unstar: [Function],
      update: [Function],
      updateComment: [Function]
    },
    git: {
      createBlob: [Function],
      createCommit: [Function],
      createRef: [Function],
      createTag: [Function],
      createTree: [Function],
      deleteRef: [Function],
      getBlob: [Function],
      getCommit: [Function],
      getRef: [Function],
      getTag: [Function],
      getTree: [Function],
      listMatchingRefs: [Function],
      updateRef: [Function]
    },
    gitignore: { getAllTemplates: [Function], getTemplate: [Function] },
    interactions: {
      getRestrictionsForAuthenticatedUser: [Function],
      getRestrictionsForOrg: [Function],
      getRestrictionsForRepo: [Function],
      getRestrictionsForYourPublicRepos: [Function],
      removeRestrictionsForAuthenticatedUser: [Function],
      removeRestrictionsForOrg: [Function],
      removeRestrictionsForRepo: [Function],
      removeRestrictionsForYourPublicRepos: [Function],
      setRestrictionsForAuthenticatedUser: [Function],
      setRestrictionsForOrg: [Function],
      setRestrictionsForRepo: [Function],
      setRestrictionsForYourPublicRepos: [Function]
    },
    issues: {
      addAssignees: [Function],
      addLabels: [Function],
      checkUserCanBeAssigned: [Function],
      create: [Function],
      createComment: [Function],
      createLabel: [Function],
      createMilestone: [Function],
      deleteComment: [Function],
      deleteLabel: [Function],
      deleteMilestone: [Function],
      get: [Function],
      getComment: [Function],
      getEvent: [Function],
      getLabel: [Function],
      getMilestone: [Function],
      list: [Function],
      listAssignees: [Function],
      listComments: [Function],
      listCommentsForRepo: [Function],
      listEvents: [Function],
      listEventsForRepo: [Function],
      listEventsForTimeline: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listForRepo: [Function],
      listLabelsForMilestone: [Function],
      listLabelsForRepo: [Function],
      listLabelsOnIssue: [Function],
      listMilestones: [Function],
      lock: [Function],
      removeAllLabels: [Function],
      removeAssignees: [Function],
      removeLabel: [Function],
      setLabels: [Function],
      unlock: [Function],
      update: [Function],
      updateComment: [Function],
      updateLabel: [Function],
      updateMilestone: [Function]
    },
    licenses: {
      get: [Function],
      getAllCommonlyUsed: [Function],
      getForRepo: [Function]
    },
    markdown: { render: [Function], renderRaw: [Function] },
    meta: {
      get: [Function],
      getOctocat: [Function],
      getZen: [Function],
      root: [Function]
    },
    migrations: {
      cancelImport: [Function],
      deleteArchiveForAuthenticatedUser: [Function],
      deleteArchiveForOrg: [Function],
      downloadArchiveForOrg: [Function],
      getArchiveForAuthenticatedUser: [Function],
      getCommitAuthors: [Function],
      getImportStatus: [Function],
      getLargeFiles: [Function],
      getStatusForAuthenticatedUser: [Function],
      getStatusForOrg: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listReposForAuthenticatedUser: [Function],
      listReposForOrg: [Function],
      listReposForUser: [Function],
      mapCommitAuthor: [Function],
      setLfsPreference: [Function],
      startForAuthenticatedUser: [Function],
      startForOrg: [Function],
      startImport: [Function],
      unlockRepoForAuthenticatedUser: [Function],
      unlockRepoForOrg: [Function],
      updateImport: [Function]
    },
    orgs: {
      addSecurityManagerTeam: [Function],
      blockUser: [Function],
      cancelInvitation: [Function],
      checkBlockedUser: [Function],
      checkMembershipForUser: [Function],
      checkPublicMembershipForUser: [Function],
      convertMemberToOutsideCollaborator: [Function],
      createCustomRole: [Function],
      createInvitation: [Function],
      createWebhook: [Function],
      deleteCustomRole: [Function],
      deleteWebhook: [Function],
      enableOrDisableSecurityProductOnAllOrgRepos: [Function],
      get: [Function],
      getMembershipForAuthenticatedUser: [Function],
      getMembershipForUser: [Function],
      getWebhook: [Function],
      getWebhookConfigForOrg: [Function],
      getWebhookDelivery: [Function],
      list: [Function],
      listAppInstallations: [Function],
      listBlockedUsers: [Function],
      listCustomRoles: [Function],
      listFailedInvitations: [Function],
      listFineGrainedPermissions: [Function],
      listForAuthenticatedUser: [Function],
      listForUser: [Function],
      listInvitationTeams: [Function],
      listMembers: [Function],
      listMembershipsForAuthenticatedUser: [Function],
      listOutsideCollaborators: [Function],
      listPendingInvitations: [Function],
      listPublicMembers: [Function],
      listSecurityManagerTeams: [Function],
      listWebhookDeliveries: [Function],
      listWebhooks: [Function],
      pingWebhook: [Function],
      redeliverWebhookDelivery: [Function],
      removeMember: [Function],
      removeMembershipForUser: [Function],
      removeOutsideCollaborator: [Function],
      removePublicMembershipForAuthenticatedUser: [Function],
      removeSecurityManagerTeam: [Function],
      setMembershipForUser: [Function],
      setPublicMembershipForAuthenticatedUser: [Function],
      unblockUser: [Function],
      update: [Function],
      updateCustomRole: [Function],
      updateMembershipForAuthenticatedUser: [Function],
      updateWebhook: [Function],
      updateWebhookConfigForOrg: [Function]
    },
    packages: {
      deletePackageForAuthenticatedUser: [Function],
      deletePackageForOrg: [Function],
      deletePackageForUser: [Function],
      deletePackageVersionForAuthenticatedUser: [Function],
      deletePackageVersionForOrg: [Function],
      deletePackageVersionForUser: [Function],
      getAllPackageVersionsForAPackageOwnedByAnOrg: [Function],
      getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [Function],
      getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [Function],
      getAllPackageVersionsForPackageOwnedByOrg: [Function],
      getAllPackageVersionsForPackageOwnedByUser: [Function],
      getPackageForAuthenticatedUser: [Function],
      getPackageForOrganization: [Function],
      getPackageForUser: [Function],
      getPackageVersionForAuthenticatedUser: [Function],
      getPackageVersionForOrganization: [Function],
      getPackageVersionForUser: [Function],
      listPackagesForAuthenticatedUser: [Function],
      listPackagesForOrganization: [Function],
      listPackagesForUser: [Function],
      restorePackageForAuthenticatedUser: [Function],
      restorePackageForOrg: [Function],
      restorePackageForUser: [Function],
      restorePackageVersionForAuthenticatedUser: [Function],
      restorePackageVersionForOrg: [Function],
      restorePackageVersionForUser: [Function]
    },
    projects: {
      addCollaborator: [Function],
      createCard: [Function],
      createColumn: [Function],
      createForAuthenticatedUser: [Function],
      createForOrg: [Function],
      createForRepo: [Function],
      delete: [Function],
      deleteCard: [Function],
      deleteColumn: [Function],
      get: [Function],
      getCard: [Function],
      getColumn: [Function],
      getPermissionForUser: [Function],
      listCards: [Function],
      listCollaborators: [Function],
      listColumns: [Function],
      listForOrg: [Function],
      listForRepo: [Function],
      listForUser: [Function],
      moveCard: [Function],
      moveColumn: [Function],
      removeCollaborator: [Function],
      update: [Function],
      updateCard: [Function],
      updateColumn: [Function]
    },
    pulls: {
      checkIfMerged: [Function],
      create: [Function],
      createReplyForReviewComment: [Function],
      createReview: [Function],
      createReviewComment: [Function],
      deletePendingReview: [Function],
      deleteReviewComment: [Function],
      dismissReview: [Function],
      get: [Function],
      getReview: [Function],
      getReviewComment: [Function],
      list: [Function],
      listCommentsForReview: [Function],
      listCommits: [Function],
      listFiles: [Function],
      listRequestedReviewers: [Function],
      listReviewComments: [Function],
      listReviewCommentsForRepo: [Function],
      listReviews: [Function],
      merge: [Function],
      removeRequestedReviewers: [Function],
      requestReviewers: [Function],
      submitReview: [Function],
      update: [Function],
      updateBranch: [Function],
      updateReview: [Function],
      updateReviewComment: [Function]
    },
    rateLimit: { get: [Function] },
    reactions: {
      createForCommitComment: [Function],
      createForIssue: [Function],
      createForIssueComment: [Function],
      createForPullRequestReviewComment: [Function],
      createForRelease: [Function],
      createForTeamDiscussionCommentInOrg: [Function],
      createForTeamDiscussionInOrg: [Function],
      deleteForCommitComment: [Function],
      deleteForIssue: [Function],
      deleteForIssueComment: [Function],
      deleteForPullRequestComment: [Function],
      deleteForRelease: [Function],
      deleteForTeamDiscussion: [Function],
      deleteForTeamDiscussionComment: [Function],
      listForCommitComment: [Function],
      listForIssue: [Function],
      listForIssueComment: [Function],
      listForPullRequestReviewComment: [Function],
      listForRelease: [Function],
      listForTeamDiscussionCommentInOrg: [Function],
      listForTeamDiscussionInOrg: [Function]
    },
    repos: {
      acceptInvitation: [Function],
      acceptInvitationForAuthenticatedUser: [Function],
      addAppAccessRestrictions: [Function],
      addCollaborator: [Function],
      addStatusCheckContexts: [Function],
      addTeamAccessRestrictions: [Function],
      addUserAccessRestrictions: [Function],
      checkCollaborator: [Function],
      checkVulnerabilityAlerts: [Function],
      codeownersErrors: [Function],
      compareCommits: [Function],
      compareCommitsWithBasehead: [Function],
      createAutolink: [Function],
      createCommitComment: [Function],
      createCommitSignatureProtection: [Function],
      createCommitStatus: [Function],
      createDeployKey: [Function],
      createDeployment: [Function],
      createDeploymentBranchPolicy: [Function],
      createDeploymentStatus: [Function],
      createDispatchEvent: [Function],
      createForAuthenticatedUser: [Function],
      createFork: [Function],
      createInOrg: [Function],
      createOrUpdateEnvironment: [Function],
      createOrUpdateFileContents: [Function],
      createPagesDeployment: [Function],
      createPagesSite: [Function],
      createRelease: [Function],
      createTagProtection: [Function],
      createUsingTemplate: [Function],
      createWebhook: [Function],
      declineInvitation: [Function],
      declineInvitationForAuthenticatedUser: [Function],
      delete: [Function],
      deleteAccessRestrictions: [Function],
      deleteAdminBranchProtection: [Function],
      deleteAnEnvironment: [Function],
      deleteAutolink: [Function],
      deleteBranchProtection: [Function],
      deleteCommitComment: [Function],
      deleteCommitSignatureProtection: [Function],
      deleteDeployKey: [Function],
      deleteDeployment: [Function],
      deleteDeploymentBranchPolicy: [Function],
      deleteFile: [Function],
      deleteInvitation: [Function],
      deletePagesSite: [Function],
      deletePullRequestReviewProtection: [Function],
      deleteRelease: [Function],
      deleteReleaseAsset: [Function],
      deleteTagProtection: [Function],
      deleteWebhook: [Function],
      disableAutomatedSecurityFixes: [Function],
      disableLfsForRepo: [Function],
      disableVulnerabilityAlerts: [Function],
      downloadArchive: [Function],
      downloadTarballArchive: [Function],
      downloadZipballArchive: [Function],
      enableAutomatedSecurityFixes: [Function],
      enableLfsForRepo: [Function],
      enableVulnerabilityAlerts: [Function],
      generateReleaseNotes: [Function],
      get: [Function],
      getAccessRestrictions: [Function],
      getAdminBranchProtection: [Function],
      getAllEnvironments: [Function],
      getAllStatusCheckContexts: [Function],
      getAllTopics: [Function],
      getAppsWithAccessToProtectedBranch: [Function],
      getAutolink: [Function],
      getBranch: [Function],
      getBranchProtection: [Function],
      getClones: [Function],
      getCodeFrequencyStats: [Function],
      getCollaboratorPermissionLevel: [Function],
      getCombinedStatusForRef: [Function],
      getCommit: [Function],
      getCommitActivityStats: [Function],
      getCommitComment: [Function],
      getCommitSignatureProtection: [Function],
      getCommunityProfileMetrics: [Function],
      getContent: [Function],
      getContributorsStats: [Function],
      getDeployKey: [Function],
      getDeployment: [Function],
      getDeploymentBranchPolicy: [Function],
      getDeploymentStatus: [Function],
      getEnvironment: [Function],
      getLatestPagesBuild: [Function],
      getLatestRelease: [Function],
      getPages: [Function],
      getPagesBuild: [Function],
      getPagesHealthCheck: [Function],
      getParticipationStats: [Function],
      getPullRequestReviewProtection: [Function],
      getPunchCardStats: [Function],
      getReadme: [Function],
      getReadmeInDirectory: [Function],
      getRelease: [Function],
      getReleaseAsset: [Function],
      getReleaseByTag: [Function],
      getStatusChecksProtection: [Function],
      getTeamsWithAccessToProtectedBranch: [Function],
      getTopPaths: [Function],
      getTopReferrers: [Function],
      getUsersWithAccessToProtectedBranch: [Function],
      getViews: [Function],
      getWebhook: [Function],
      getWebhookConfigForRepo: [Function],
      getWebhookDelivery: [Function],
      listAutolinks: [Function],
      listBranches: [Function],
      listBranchesForHeadCommit: [Function],
      listCollaborators: [Function],
      listCommentsForCommit: [Function],
      listCommitCommentsForRepo: [Function],
      listCommitStatusesForRef: [Function],
      listCommits: [Function],
      listContributors: [Function],
      listDeployKeys: [Function],
      listDeploymentBranchPolicies: [Function],
      listDeploymentStatuses: [Function],
      listDeployments: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listForUser: [Function],
      listForks: [Function],
      listInvitations: [Function],
      listInvitationsForAuthenticatedUser: [Function],
      listLanguages: [Function],
      listPagesBuilds: [Function],
      listPublic: [Function],
      listPullRequestsAssociatedWithCommit: [Function],
      listReleaseAssets: [Function],
      listReleases: [Function],
      listTagProtection: [Function],
      listTags: [Function],
      listTeams: [Function],
      listWebhookDeliveries: [Function],
      listWebhooks: [Function],
      merge: [Function],
      mergeUpstream: [Function],
      pingWebhook: [Function],
      redeliverWebhookDelivery: [Function],
      removeAppAccessRestrictions: [Function],
      removeCollaborator: [Function],
      removeStatusCheckContexts: [Function],
      removeStatusCheckProtection: [Function],
      removeTeamAccessRestrictions: [Function],
      removeUserAccessRestrictions: [Function],
      renameBranch: [Function],
      replaceAllTopics: [Function],
      requestPagesBuild: [Function],
      setAdminBranchProtection: [Function],
      setAppAccessRestrictions: [Function],
      setStatusCheckContexts: [Function],
      setTeamAccessRestrictions: [Function],
      setUserAccessRestrictions: [Function],
      testPushWebhook: [Function],
      transfer: [Function],
      update: [Function],
      updateBranchProtection: [Function],
      updateCommitComment: [Function],
      updateDeploymentBranchPolicy: [Function],
      updateInformationAboutPagesSite: [Function],
      updateInvitation: [Function],
      updatePullRequestReviewProtection: [Function],
      updateRelease: [Function],
      updateReleaseAsset: [Function],
      updateStatusCheckPotection: [Function],
      updateStatusCheckProtection: [Function],
      updateWebhook: [Function],
      updateWebhookConfigForRepo: [Function],
      uploadReleaseAsset: [Function]
    },
    search: {
      code: [Function],
      commits: [Function],
      issuesAndPullRequests: [Function],
      labels: [Function],
      repos: [Function],
      topics: [Function],
      users: [Function]
    },
    secretScanning: {
      getAlert: [Function],
      listAlertsForEnterprise: [Function],
      listAlertsForOrg: [Function],
      listAlertsForRepo: [Function],
      listLocationsForAlert: [Function],
      updateAlert: [Function]
    },
    teams: {
      addOrUpdateMembershipForUserInOrg: [Function],
      addOrUpdateProjectPermissionsInOrg: [Function],
      addOrUpdateRepoPermissionsInOrg: [Function],
      checkPermissionsForProjectInOrg: [Function],
      checkPermissionsForRepoInOrg: [Function],
      create: [Function],
      createDiscussionCommentInOrg: [Function],
      createDiscussionInOrg: [Function],
      deleteDiscussionCommentInOrg: [Function],
      deleteDiscussionInOrg: [Function],
      deleteInOrg: [Function],
      getByName: [Function],
      getDiscussionCommentInOrg: [Function],
      getDiscussionInOrg: [Function],
      getMembershipForUserInOrg: [Function],
      list: [Function],
      listChildInOrg: [Function],
      listDiscussionCommentsInOrg: [Function],
      listDiscussionsInOrg: [Function],
      listForAuthenticatedUser: [Function],
      listMembersInOrg: [Function],
      listPendingInvitationsInOrg: [Function],
      listProjectsInOrg: [Function],
      listReposInOrg: [Function],
      removeMembershipForUserInOrg: [Function],
      removeProjectInOrg: [Function],
      removeRepoInOrg: [Function],
      updateDiscussionCommentInOrg: [Function],
      updateDiscussionInOrg: [Function],
      updateInOrg: [Function]
    },
    users: {
      addEmailForAuthenticated: [Function],
      addEmailForAuthenticatedUser: [Function],
      block: [Function],
      checkBlocked: [Function],
      checkFollowingForUser: [Function],
      checkPersonIsFollowedByAuthenticated: [Function],
      createGpgKeyForAuthenticated: [Function],
      createGpgKeyForAuthenticatedUser: [Function],
      createPublicSshKeyForAuthenticated: [Function],
      createPublicSshKeyForAuthenticatedUser: [Function],
      createSshSigningKeyForAuthenticatedUser: [Function],
      deleteEmailForAuthenticated: [Function],
      deleteEmailForAuthenticatedUser: [Function],
      deleteGpgKeyForAuthenticated: [Function],
      deleteGpgKeyForAuthenticatedUser: [Function],
      deletePublicSshKeyForAuthenticated: [Function],
      deletePublicSshKeyForAuthenticatedUser: [Function],
      deleteSshSigningKeyForAuthenticatedUser: [Function],
      follow: [Function],
      getAuthenticated: [Function],
      getByUsername: [Function],
      getContextForUser: [Function],
      getGpgKeyForAuthenticated: [Function],
      getGpgKeyForAuthenticatedUser: [Function],
      getPublicSshKeyForAuthenticated: [Function],
      getPublicSshKeyForAuthenticatedUser: [Function],
      getSshSigningKeyForAuthenticatedUser: [Function],
      list: [Function],
      listBlockedByAuthenticated: [Function],
      listBlockedByAuthenticatedUser: [Function],
      listEmailsForAuthenticated: [Function],
      listEmailsForAuthenticatedUser: [Function],
      listFollowedByAuthenticated: [Function],
      listFollowedByAuthenticatedUser: [Function],
      listFollowersForAuthenticatedUser: [Function],
      listFollowersForUser: [Function],
      listFollowingForUser: [Function],
      listGpgKeysForAuthenticated: [Function],
      listGpgKeysForAuthenticatedUser: [Function],
      listGpgKeysForUser: [Function],
      listPublicEmailsForAuthenticated: [Function],
      listPublicEmailsForAuthenticatedUser: [Function],
      listPublicKeysForUser: [Function],
      listPublicSshKeysForAuthenticated: [Function],
      listPublicSshKeysForAuthenticatedUser: [Function],
      listSshSigningKeysForAuthenticatedUser: [Function],
      listSshSigningKeysForUser: [Function],
      setPrimaryEmailVisibilityForAuthenticated: [Function],
      setPrimaryEmailVisibilityForAuthenticatedUser: [Function],
      unblock: [Function],
      unfollow: [Function],
      updateAuthenticated: [Function]
    },
    rest: {
      actions: [Object],
      activity: [Object],
      apps: [Object],
      billing: [Object],
      checks: [Object],
      codeScanning: [Object],
      codesOfConduct: [Object],
      codespaces: [Object],
      dependabot: [Object],
      dependencyGraph: [Object],
      emojis: [Object],
      enterpriseAdmin: [Object],
      gists: [Object],
      git: [Object],
      gitignore: [Object],
      interactions: [Object],
      issues: [Object],
      licenses: [Object],
      markdown: [Object],
      meta: [Object],
      migrations: [Object],
      orgs: [Object],
      packages: [Object],
      projects: [Object],
      pulls: [Object],
      rateLimit: [Object],
      reactions: [Object],
      repos: [Object],
      search: [Object],
      secretScanning: [Object],
      teams: [Object],
      users: [Object]
    },
    paginate: [Function: bound paginate] { iterator: [Function: bound iterator] }
  },
  request: [Function: newApi] {
    endpoint: [Function: bound endpointWithDefaults] {
      DEFAULTS: [Object],
      defaults: [Function: bound withDefaults],
      merge: [Function: bound merge],
      parse: [Function: parse]
    },
    defaults: [Function: bound withDefaults]
  },
  graphql: [Function: newApi] {
    defaults: [Function: bound withDefaults],
    endpoint: [Function: bound endpointWithDefaults] {
      DEFAULTS: [Object],
      defaults: [Function: bound withDefaults],
      merge: [Function: bound merge],
      parse: [Function: parse]
    }
  },
  fileCache: RepositoryFileCache {
    octokit: OctokitWithDefaults {
      request: [Function],
      graphql: [Function],
      log: [Object],
      hook: [Function],
      auth: [AsyncFunction],
      actions: [Object],
      activity: [Object],
      apps: [Object],
      billing: [Object],
      checks: [Object],
      codeScanning: [Object],
      codesOfConduct: [Object],
      codespaces: [Object],
      dependabot: [Object],
      dependencyGraph: [Object],
      emojis: [Object],
      enterpriseAdmin: [Object],
      gists: [Object],
      git: [Object],
      gitignore: [Object],
      interactions: [Object],
      issues: [Object],
      licenses: [Object],
      markdown: [Object],
      meta: [Object],
      migrations: [Object],
      orgs: [Object],
      packages: [Object],
      projects: [Object],
      pulls: [Object],
      rateLimit: [Object],
      reactions: [Object],
      repos: [Object],
      search: [Object],
      secretScanning: [Object],
      teams: [Object],
      users: [Object],
      rest: [Object],
      paginate: [Function]
    },
    repository: {
      owner: 'chingor13',
      repo: 'google-auth-library-java',
      defaultBranch: 'master'
    },
    cache: Map(0) {}
  },
  logger: GCFLogger {
    destination: SonicBoom {
      _bufs: [],
      _len: 0,
      fd: 1,
      _writing: false,
      _writingBuf: '',
      _ending: false,
      _reopening: false,
      _asyncDrainScheduled: true,
      _hwm: 16387,
      file: null,
      destroyed: false,
      minLength: 0,
      maxLength: 0,
      maxWrite: 16384,
      sync: true,
      _fsync: false,
      append: true,
      mode: undefined,
      retryEAGAIN: [Function (anonymous)],
      mkdir: false,
      release: [Function (anonymous)],
      _events: [Object: null prototype],
      _eventsCount: 2
    },
    pino: EventEmitter {
      levels: [Object],
      silent: [Function: noop],
      onChild: [Function: noop],
      trace: [Function: LOG],
      debug: [Function: LOG],
      info: [Function: LOG],
      warn: [Function: LOG],
      error: [Function: LOG],
      fatal: [Function (anonymous)],
      metric: [Function: LOG],
      [Symbol(pino.useOnlyCustomLevels)]: false,
      [Symbol(pino.stream)]: [SonicBoom],
      [Symbol(pino.time)]: [Function: nullTime],
      [Symbol(pino.timeSliceIndex)]: 0,
      [Symbol(pino.stringify)]: [Function: stringify],
      [Symbol(pino.stringifySafe)]: [Function: stringify],
      [Symbol(pino.stringifiers)]: {},
      [Symbol(pino.end)]: '}\n',
      [Symbol(pino.formatOpts)]: [Object],
      [Symbol(pino.messageKey)]: 'message',
      [Symbol(pino.errorKey)]: 'err',
      [Symbol(pino.nestedKey)]: null,
      [Symbol(pino.nestedKeyStr)]: '',
      [Symbol(pino.serializers)]: [Object],
      [Symbol(pino.mixin)]: undefined,
      [Symbol(pino.mixinMergeStrategy)]: undefined,
      [Symbol(pino.chindings)]: '',
      [Symbol(pino.formatters)]: [Object],
      [Symbol(pino.hooks)]: [Object],
      [Symbol(pino.lsCache)]: [Object],
      [Symbol(pino.levelVal)]: 10
    },
    trace: [Function: bound trace],
    debug: [Function: bound debug],
    info: [Function: bound info],
    warn: [Function: bound warn],
    metric: [Function: bound metric],
    error: [Function: bound error],
    child: [Function: bound child]
  }
}, 'master', undefined, undefined, {
  logger: GCFLogger {
    destination: SonicBoom {
      _bufs: [],
      _len: 0,
      fd: 1,
      _writing: false,
      _writingBuf: '',
      _ending: false,
      _reopening: false,
      _asyncDrainScheduled: true,
      _hwm: 16387,
      file: null,
      destroyed: false,
      minLength: 0,
      maxLength: 0,
      maxWrite: 16384,
      sync: true,
      _fsync: false,
      append: true,
      mode: undefined,
      retryEAGAIN: [Function (anonymous)],
      mkdir: false,
      release: [Function (anonymous)],
      _events: [Object: null prototype],
      _eventsCount: 2
    },
    pino: EventEmitter {
      levels: [Object],
      silent: [Function: noop],
      onChild: [Function: noop],
      trace: [Function: LOG],
      debug: [Function: LOG],
      info: [Function: LOG],
      warn: [Function: LOG],
      error: [Function: LOG],
      fatal: [Function (anonymous)],
      metric: [Function: LOG],
      [Symbol(pino.useOnlyCustomLevels)]: false,
      [Symbol(pino.stream)]: [SonicBoom],
      [Symbol(pino.time)]: [Function: nullTime],
      [Symbol(pino.timeSliceIndex)]: 0,
      [Symbol(pino.stringify)]: [Function: stringify],
      [Symbol(pino.stringifySafe)]: [Function: stringify],
      [Symbol(pino.stringifiers)]: {},
      [Symbol(pino.end)]: '}\n',
      [Symbol(pino.formatOpts)]: [Object],
      [Symbol(pino.messageKey)]: 'message',
      [Symbol(pino.errorKey)]: 'err',
      [Symbol(pino.nestedKey)]: null,
      [Symbol(pino.nestedKeyStr)]: '',
      [Symbol(pino.serializers)]: [Object],
      [Symbol(pino.mixin)]: undefined,
      [Symbol(pino.mixinMergeStrategy)]: undefined,
      [Symbol(pino.chindings)]: '',
      [Symbol(pino.formatters)]: [Object],
      [Symbol(pino.hooks)]: [Object],
      [Symbol(pino.lsCache)]: [Object],
      [Symbol(pino.levelVal)]: 10
    },
    trace: [Function: bound trace],
    debug: [Function: bound debug],
    info: [Function: bound info],
    warn: [Function: bound warn],
    metric: [Function: bound metric],
    error: [Function: bound error],
    child: [Function: bound child]
  }
}) => Promise {
  Manifest {
    repository: { owner: 'fake', repo: 'fake', defaultBranch: 'main' },
    github: GitHub {
      getCommitFiles: [AsyncFunction (anonymous)],
      graphqlRequest: [AsyncFunction (anonymous)],
      findFilesByFilenameAndRef: [AsyncFunction (anonymous)],
      findFilesByGlobAndRef: [AsyncFunction (anonymous)],
      createPullRequest: [AsyncFunction (anonymous)],
      getPullRequest: [AsyncFunction (anonymous)],
      updatePullRequest: [AsyncFunction (anonymous)],
      findFilesByExtensionAndRef: [AsyncFunction (anonymous)],
      createRelease: [AsyncFunction (anonymous)],
      commentOnIssue: [AsyncFunction (anonymous)],
      removeIssueLabels: [AsyncFunction (anonymous)],
      addIssueLabels: [AsyncFunction (anonymous)],
      repository: [Object],
      octokit: [OctokitWithDefaults],
      request: [Function],
      graphql: [Function],
      fileCache: [RepositoryFileCache],
      logger: [GCFLogger]
    },
    targetBranch: 'main',
    repositoryConfig: {},
    releasedVersions: {},
    manifestPath: '.release-please-manifest.json',
    separatePullRequests: false,
    fork: false,
    signoffUser: undefined,
    releaseLabels: [ 'autorelease: tagged' ],
    labels: [ 'autorelease: pending' ],
    skipLabeling: false,
    sequentialCalls: false,
    snapshotLabels: [ 'autorelease: snapshot' ],
    bootstrapSha: undefined,
    lastReleaseSha: undefined,
    draft: undefined,
    draftPullRequest: undefined,
    groupPullRequestTitlePattern: undefined,
    releaseSearchDepth: 400,
    commitSearchDepth: 500,
    logger: GCFLogger {
      destination: [SonicBoom],
      pino: [EventEmitter],
      trace: [Function: bound trace],
      debug: [Function: bound debug],
      info: [Function: bound info],
      warn: [Function: bound warn],
      metric: [Function: bound metric],
      error: [Function: bound error],
      child: [Function: bound child]
    },
    plugins: [],
    pullRequestOverflowHandler: FilePullRequestOverflowHandler {
      github: [GitHub],
      logger: [GCFLogger]
    }
  }
} at null.buildManifest (/home/chingor/code/repo-automation-bots/packages/release-please/src/release-please.ts:206:27)

    fromManifest(GitHub {
  getCommitFiles: [AsyncFunction (anonymous)],
  graphqlRequest: [AsyncFunction (anonymous)],
  findFilesByFilenameAndRef: [AsyncFunction (anonymous)],
  findFilesByGlobAndRef: [AsyncFunction (anonymous)],
  createPullRequest: [AsyncFunction (anonymous)],
  getPullRequest: [AsyncFunction (anonymous)],
  updatePullRequest: [AsyncFunction (anonymous)],
  findFilesByExtensionAndRef: [AsyncFunction (anonymous)],
  createRelease: [AsyncFunction (anonymous)],
  commentOnIssue: [AsyncFunction (anonymous)],
  removeIssueLabels: [AsyncFunction (anonymous)],
  addIssueLabels: [AsyncFunction (anonymous)],
  repository: {
    owner: 'chingor13',
    repo: 'google-auth-library-java',
    defaultBranch: 'master'
  },
  octokit: OctokitWithDefaults {
    request: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    graphql: [Function: newApi] {
      defaults: [Function: bound withDefaults],
      endpoint: [Function]
    },
    log: {
      debug: [Function: debug],
      info: [Function: info],
      warn: [Function: bound warn],
      error: [Function: bound error]
    },
    hook: [Function: bound register] {
      api: [Object],
      remove: [Function: bound removeHook],
      before: [Function: bound addHook],
      error: [Function: bound addHook],
      after: [Function: bound addHook],
      wrap: [Function: bound addHook]
    },
    auth: [Function: bound auth] AsyncFunction {
      hook: [Function: bound hook] AsyncFunction
    },
    actions: {
      addCustomLabelsToSelfHostedRunnerForOrg: [Function],
      addCustomLabelsToSelfHostedRunnerForRepo: [Function],
      addSelectedRepoToOrgSecret: [Function],
      approveWorkflowRun: [Function],
      cancelWorkflowRun: [Function],
      createOrUpdateEnvironmentSecret: [Function],
      createOrUpdateOrgSecret: [Function],
      createOrUpdateRepoSecret: [Function],
      createRegistrationTokenForOrg: [Function],
      createRegistrationTokenForRepo: [Function],
      createRemoveTokenForOrg: [Function],
      createRemoveTokenForRepo: [Function],
      createWorkflowDispatch: [Function],
      deleteActionsCacheById: [Function],
      deleteActionsCacheByKey: [Function],
      deleteArtifact: [Function],
      deleteEnvironmentSecret: [Function],
      deleteOrgSecret: [Function],
      deleteRepoSecret: [Function],
      deleteSelfHostedRunnerFromOrg: [Function],
      deleteSelfHostedRunnerFromRepo: [Function],
      deleteWorkflowRun: [Function],
      deleteWorkflowRunLogs: [Function],
      disableSelectedRepositoryGithubActionsOrganization: [Function],
      disableWorkflow: [Function],
      downloadArtifact: [Function],
      downloadJobLogsForWorkflowRun: [Function],
      downloadWorkflowRunAttemptLogs: [Function],
      downloadWorkflowRunLogs: [Function],
      enableSelectedRepositoryGithubActionsOrganization: [Function],
      enableWorkflow: [Function],
      getActionsCacheList: [Function],
      getActionsCacheUsage: [Function],
      getActionsCacheUsageByRepoForOrg: [Function],
      getActionsCacheUsageForEnterprise: [Function],
      getActionsCacheUsageForOrg: [Function],
      getAllowedActionsOrganization: [Function],
      getAllowedActionsRepository: [Function],
      getArtifact: [Function],
      getEnvironmentPublicKey: [Function],
      getEnvironmentSecret: [Function],
      getGithubActionsDefaultWorkflowPermissionsEnterprise: [Function],
      getGithubActionsDefaultWorkflowPermissionsOrganization: [Function],
      getGithubActionsDefaultWorkflowPermissionsRepository: [Function],
      getGithubActionsPermissionsOrganization: [Function],
      getGithubActionsPermissionsRepository: [Function],
      getJobForWorkflowRun: [Function],
      getOrgPublicKey: [Function],
      getOrgSecret: [Function],
      getPendingDeploymentsForRun: [Function],
      getRepoPermissions: [Function],
      getRepoPublicKey: [Function],
      getRepoSecret: [Function],
      getReviewsForRun: [Function],
      getSelfHostedRunnerForOrg: [Function],
      getSelfHostedRunnerForRepo: [Function],
      getWorkflow: [Function],
      getWorkflowAccessToRepository: [Function],
      getWorkflowRun: [Function],
      getWorkflowRunAttempt: [Function],
      getWorkflowRunUsage: [Function],
      getWorkflowUsage: [Function],
      listArtifactsForRepo: [Function],
      listEnvironmentSecrets: [Function],
      listJobsForWorkflowRun: [Function],
      listJobsForWorkflowRunAttempt: [Function],
      listLabelsForSelfHostedRunnerForOrg: [Function],
      listLabelsForSelfHostedRunnerForRepo: [Function],
      listOrgSecrets: [Function],
      listRepoSecrets: [Function],
      listRepoWorkflows: [Function],
      listRunnerApplicationsForOrg: [Function],
      listRunnerApplicationsForRepo: [Function],
      listSelectedReposForOrgSecret: [Function],
      listSelectedRepositoriesEnabledGithubActionsOrganization: [Function],
      listSelfHostedRunnersForOrg: [Function],
      listSelfHostedRunnersForRepo: [Function],
      listWorkflowRunArtifacts: [Function],
      listWorkflowRuns: [Function],
      listWorkflowRunsForRepo: [Function],
      reRunJobForWorkflowRun: [Function],
      reRunWorkflow: [Function],
      reRunWorkflowFailedJobs: [Function],
      removeAllCustomLabelsFromSelfHostedRunnerForOrg: [Function],
      removeAllCustomLabelsFromSelfHostedRunnerForRepo: [Function],
      removeCustomLabelFromSelfHostedRunnerForOrg: [Function],
      removeCustomLabelFromSelfHostedRunnerForRepo: [Function],
      removeSelectedRepoFromOrgSecret: [Function],
      reviewPendingDeploymentsForRun: [Function],
      setAllowedActionsOrganization: [Function],
      setAllowedActionsRepository: [Function],
      setCustomLabelsForSelfHostedRunnerForOrg: [Function],
      setCustomLabelsForSelfHostedRunnerForRepo: [Function],
      setGithubActionsDefaultWorkflowPermissionsEnterprise: [Function],
      setGithubActionsDefaultWorkflowPermissionsOrganization: [Function],
      setGithubActionsDefaultWorkflowPermissionsRepository: [Function],
      setGithubActionsPermissionsOrganization: [Function],
      setGithubActionsPermissionsRepository: [Function],
      setSelectedReposForOrgSecret: [Function],
      setSelectedRepositoriesEnabledGithubActionsOrganization: [Function],
      setWorkflowAccessToRepository: [Function]
    },
    activity: {
      checkRepoIsStarredByAuthenticatedUser: [Function],
      deleteRepoSubscription: [Function],
      deleteThreadSubscription: [Function],
      getFeeds: [Function],
      getRepoSubscription: [Function],
      getThread: [Function],
      getThreadSubscriptionForAuthenticatedUser: [Function],
      listEventsForAuthenticatedUser: [Function],
      listNotificationsForAuthenticatedUser: [Function],
      listOrgEventsForAuthenticatedUser: [Function],
      listPublicEvents: [Function],
      listPublicEventsForRepoNetwork: [Function],
      listPublicEventsForUser: [Function],
      listPublicOrgEvents: [Function],
      listReceivedEventsForUser: [Function],
      listReceivedPublicEventsForUser: [Function],
      listRepoEvents: [Function],
      listRepoNotificationsForAuthenticatedUser: [Function],
      listReposStarredByAuthenticatedUser: [Function],
      listReposStarredByUser: [Function],
      listReposWatchedByUser: [Function],
      listStargazersForRepo: [Function],
      listWatchedReposForAuthenticatedUser: [Function],
      listWatchersForRepo: [Function],
      markNotificationsAsRead: [Function],
      markRepoNotificationsAsRead: [Function],
      markThreadAsRead: [Function],
      setRepoSubscription: [Function],
      setThreadSubscription: [Function],
      starRepoForAuthenticatedUser: [Function],
      unstarRepoForAuthenticatedUser: [Function]
    },
    apps: {
      addRepoToInstallation: [Function],
      addRepoToInstallationForAuthenticatedUser: [Function],
      checkToken: [Function],
      createFromManifest: [Function],
      createInstallationAccessToken: [Function],
      deleteAuthorization: [Function],
      deleteInstallation: [Function],
      deleteToken: [Function],
      getAuthenticated: [Function],
      getBySlug: [Function],
      getInstallation: [Function],
      getOrgInstallation: [Function],
      getRepoInstallation: [Function],
      getSubscriptionPlanForAccount: [Function],
      getSubscriptionPlanForAccountStubbed: [Function],
      getUserInstallation: [Function],
      getWebhookConfigForApp: [Function],
      getWebhookDelivery: [Function],
      listAccountsForPlan: [Function],
      listAccountsForPlanStubbed: [Function],
      listInstallationReposForAuthenticatedUser: [Function],
      listInstallations: [Function],
      listInstallationsForAuthenticatedUser: [Function],
      listPlans: [Function],
      listPlansStubbed: [Function],
      listReposAccessibleToInstallation: [Function],
      listSubscriptionsForAuthenticatedUser: [Function],
      listSubscriptionsForAuthenticatedUserStubbed: [Function],
      listWebhookDeliveries: [Function],
      redeliverWebhookDelivery: [Function],
      removeRepoFromInstallation: [Function],
      removeRepoFromInstallationForAuthenticatedUser: [Function],
      resetToken: [Function],
      revokeInstallationAccessToken: [Function],
      scopeToken: [Function],
      suspendInstallation: [Function],
      unsuspendInstallation: [Function],
      updateWebhookConfigForApp: [Function]
    },
    billing: {
      getGithubActionsBillingOrg: [Function],
      getGithubActionsBillingUser: [Function],
      getGithubAdvancedSecurityBillingGhe: [Function],
      getGithubAdvancedSecurityBillingOrg: [Function],
      getGithubPackagesBillingOrg: [Function],
      getGithubPackagesBillingUser: [Function],
      getSharedStorageBillingOrg: [Function],
      getSharedStorageBillingUser: [Function]
    },
    checks: {
      create: [Function],
      createSuite: [Function],
      get: [Function],
      getSuite: [Function],
      listAnnotations: [Function],
      listForRef: [Function],
      listForSuite: [Function],
      listSuitesForRef: [Function],
      rerequestRun: [Function],
      rerequestSuite: [Function],
      setSuitesPreferences: [Function],
      update: [Function]
    },
    codeScanning: {
      deleteAnalysis: [Function],
      getAlert: [Function],
      getAnalysis: [Function],
      getCodeqlDatabase: [Function],
      getSarif: [Function],
      listAlertInstances: [Function],
      listAlertsForEnterprise: [Function],
      listAlertsForOrg: [Function],
      listAlertsForRepo: [Function],
      listAlertsInstances: [Function],
      listCodeqlDatabases: [Function],
      listRecentAnalyses: [Function],
      updateAlert: [Function],
      uploadSarif: [Function]
    },
    codesOfConduct: { getAllCodesOfConduct: [Function], getConductCode: [Function] },
    codespaces: {
      addRepositoryForSecretForAuthenticatedUser: [Function],
      addSelectedRepoToOrgSecret: [Function],
      codespaceMachinesForAuthenticatedUser: [Function],
      createForAuthenticatedUser: [Function],
      createOrUpdateOrgSecret: [Function],
      createOrUpdateRepoSecret: [Function],
      createOrUpdateSecretForAuthenticatedUser: [Function],
      createWithPrForAuthenticatedUser: [Function],
      createWithRepoForAuthenticatedUser: [Function],
      deleteForAuthenticatedUser: [Function],
      deleteFromOrganization: [Function],
      deleteOrgSecret: [Function],
      deleteRepoSecret: [Function],
      deleteSecretForAuthenticatedUser: [Function],
      exportForAuthenticatedUser: [Function],
      getExportDetailsForAuthenticatedUser: [Function],
      getForAuthenticatedUser: [Function],
      getOrgPublicKey: [Function],
      getOrgSecret: [Function],
      getPublicKeyForAuthenticatedUser: [Function],
      getRepoPublicKey: [Function],
      getRepoSecret: [Function],
      getSecretForAuthenticatedUser: [Function],
      listDevcontainersInRepositoryForAuthenticatedUser: [Function],
      listForAuthenticatedUser: [Function],
      listInOrganization: [Function],
      listInRepositoryForAuthenticatedUser: [Function],
      listOrgSecrets: [Function],
      listRepoSecrets: [Function],
      listRepositoriesForSecretForAuthenticatedUser: [Function],
      listSecretsForAuthenticatedUser: [Function],
      listSelectedReposForOrgSecret: [Function],
      preFlightWithRepoForAuthenticatedUser: [Function],
      removeRepositoryForSecretForAuthenticatedUser: [Function],
      removeSelectedRepoFromOrgSecret: [Function],
      repoMachinesForAuthenticatedUser: [Function],
      setRepositoriesForSecretForAuthenticatedUser: [Function],
      setSelectedReposForOrgSecret: [Function],
      startForAuthenticatedUser: [Function],
      stopForAuthenticatedUser: [Function],
      stopInOrganization: [Function],
      updateForAuthenticatedUser: [Function]
    },
    dependabot: {
      addSelectedRepoToOrgSecret: [Function],
      createOrUpdateOrgSecret: [Function],
      createOrUpdateRepoSecret: [Function],
      deleteOrgSecret: [Function],
      deleteRepoSecret: [Function],
      getAlert: [Function],
      getOrgPublicKey: [Function],
      getOrgSecret: [Function],
      getRepoPublicKey: [Function],
      getRepoSecret: [Function],
      listAlertsForRepo: [Function],
      listOrgSecrets: [Function],
      listRepoSecrets: [Function],
      listSelectedReposForOrgSecret: [Function],
      removeSelectedRepoFromOrgSecret: [Function],
      setSelectedReposForOrgSecret: [Function],
      updateAlert: [Function]
    },
    dependencyGraph: { createRepositorySnapshot: [Function], diffRange: [Function] },
    emojis: { get: [Function] },
    enterpriseAdmin: {
      addCustomLabelsToSelfHostedRunnerForEnterprise: [Function],
      disableSelectedOrganizationGithubActionsEnterprise: [Function],
      enableSelectedOrganizationGithubActionsEnterprise: [Function],
      getAllowedActionsEnterprise: [Function],
      getGithubActionsPermissionsEnterprise: [Function],
      getServerStatistics: [Function],
      listLabelsForSelfHostedRunnerForEnterprise: [Function],
      listSelectedOrganizationsEnabledGithubActionsEnterprise: [Function],
      removeAllCustomLabelsFromSelfHostedRunnerForEnterprise: [Function],
      removeCustomLabelFromSelfHostedRunnerForEnterprise: [Function],
      setAllowedActionsEnterprise: [Function],
      setCustomLabelsForSelfHostedRunnerForEnterprise: [Function],
      setGithubActionsPermissionsEnterprise: [Function],
      setSelectedOrganizationsEnabledGithubActionsEnterprise: [Function]
    },
    gists: {
      checkIsStarred: [Function],
      create: [Function],
      createComment: [Function],
      delete: [Function],
      deleteComment: [Function],
      fork: [Function],
      get: [Function],
      getComment: [Function],
      getRevision: [Function],
      list: [Function],
      listComments: [Function],
      listCommits: [Function],
      listForUser: [Function],
      listForks: [Function],
      listPublic: [Function],
      listStarred: [Function],
      star: [Function],
      unstar: [Function],
      update: [Function],
      updateComment: [Function]
    },
    git: {
      createBlob: [Function],
      createCommit: [Function],
      createRef: [Function],
      createTag: [Function],
      createTree: [Function],
      deleteRef: [Function],
      getBlob: [Function],
      getCommit: [Function],
      getRef: [Function],
      getTag: [Function],
      getTree: [Function],
      listMatchingRefs: [Function],
      updateRef: [Function]
    },
    gitignore: { getAllTemplates: [Function], getTemplate: [Function] },
    interactions: {
      getRestrictionsForAuthenticatedUser: [Function],
      getRestrictionsForOrg: [Function],
      getRestrictionsForRepo: [Function],
      getRestrictionsForYourPublicRepos: [Function],
      removeRestrictionsForAuthenticatedUser: [Function],
      removeRestrictionsForOrg: [Function],
      removeRestrictionsForRepo: [Function],
      removeRestrictionsForYourPublicRepos: [Function],
      setRestrictionsForAuthenticatedUser: [Function],
      setRestrictionsForOrg: [Function],
      setRestrictionsForRepo: [Function],
      setRestrictionsForYourPublicRepos: [Function]
    },
    issues: {
      addAssignees: [Function],
      addLabels: [Function],
      checkUserCanBeAssigned: [Function],
      create: [Function],
      createComment: [Function],
      createLabel: [Function],
      createMilestone: [Function],
      deleteComment: [Function],
      deleteLabel: [Function],
      deleteMilestone: [Function],
      get: [Function],
      getComment: [Function],
      getEvent: [Function],
      getLabel: [Function],
      getMilestone: [Function],
      list: [Function],
      listAssignees: [Function],
      listComments: [Function],
      listCommentsForRepo: [Function],
      listEvents: [Function],
      listEventsForRepo: [Function],
      listEventsForTimeline: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listForRepo: [Function],
      listLabelsForMilestone: [Function],
      listLabelsForRepo: [Function],
      listLabelsOnIssue: [Function],
      listMilestones: [Function],
      lock: [Function],
      removeAllLabels: [Function],
      removeAssignees: [Function],
      removeLabel: [Function],
      setLabels: [Function],
      unlock: [Function],
      update: [Function],
      updateComment: [Function],
      updateLabel: [Function],
      updateMilestone: [Function]
    },
    licenses: {
      get: [Function],
      getAllCommonlyUsed: [Function],
      getForRepo: [Function]
    },
    markdown: { render: [Function], renderRaw: [Function] },
    meta: {
      get: [Function],
      getOctocat: [Function],
      getZen: [Function],
      root: [Function]
    },
    migrations: {
      cancelImport: [Function],
      deleteArchiveForAuthenticatedUser: [Function],
      deleteArchiveForOrg: [Function],
      downloadArchiveForOrg: [Function],
      getArchiveForAuthenticatedUser: [Function],
      getCommitAuthors: [Function],
      getImportStatus: [Function],
      getLargeFiles: [Function],
      getStatusForAuthenticatedUser: [Function],
      getStatusForOrg: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listReposForAuthenticatedUser: [Function],
      listReposForOrg: [Function],
      listReposForUser: [Function],
      mapCommitAuthor: [Function],
      setLfsPreference: [Function],
      startForAuthenticatedUser: [Function],
      startForOrg: [Function],
      startImport: [Function],
      unlockRepoForAuthenticatedUser: [Function],
      unlockRepoForOrg: [Function],
      updateImport: [Function]
    },
    orgs: {
      addSecurityManagerTeam: [Function],
      blockUser: [Function],
      cancelInvitation: [Function],
      checkBlockedUser: [Function],
      checkMembershipForUser: [Function],
      checkPublicMembershipForUser: [Function],
      convertMemberToOutsideCollaborator: [Function],
      createCustomRole: [Function],
      createInvitation: [Function],
      createWebhook: [Function],
      deleteCustomRole: [Function],
      deleteWebhook: [Function],
      enableOrDisableSecurityProductOnAllOrgRepos: [Function],
      get: [Function],
      getMembershipForAuthenticatedUser: [Function],
      getMembershipForUser: [Function],
      getWebhook: [Function],
      getWebhookConfigForOrg: [Function],
      getWebhookDelivery: [Function],
      list: [Function],
      listAppInstallations: [Function],
      listBlockedUsers: [Function],
      listCustomRoles: [Function],
      listFailedInvitations: [Function],
      listFineGrainedPermissions: [Function],
      listForAuthenticatedUser: [Function],
      listForUser: [Function],
      listInvitationTeams: [Function],
      listMembers: [Function],
      listMembershipsForAuthenticatedUser: [Function],
      listOutsideCollaborators: [Function],
      listPendingInvitations: [Function],
      listPublicMembers: [Function],
      listSecurityManagerTeams: [Function],
      listWebhookDeliveries: [Function],
      listWebhooks: [Function],
      pingWebhook: [Function],
      redeliverWebhookDelivery: [Function],
      removeMember: [Function],
      removeMembershipForUser: [Function],
      removeOutsideCollaborator: [Function],
      removePublicMembershipForAuthenticatedUser: [Function],
      removeSecurityManagerTeam: [Function],
      setMembershipForUser: [Function],
      setPublicMembershipForAuthenticatedUser: [Function],
      unblockUser: [Function],
      update: [Function],
      updateCustomRole: [Function],
      updateMembershipForAuthenticatedUser: [Function],
      updateWebhook: [Function],
      updateWebhookConfigForOrg: [Function]
    },
    packages: {
      deletePackageForAuthenticatedUser: [Function],
      deletePackageForOrg: [Function],
      deletePackageForUser: [Function],
      deletePackageVersionForAuthenticatedUser: [Function],
      deletePackageVersionForOrg: [Function],
      deletePackageVersionForUser: [Function],
      getAllPackageVersionsForAPackageOwnedByAnOrg: [Function],
      getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [Function],
      getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [Function],
      getAllPackageVersionsForPackageOwnedByOrg: [Function],
      getAllPackageVersionsForPackageOwnedByUser: [Function],
      getPackageForAuthenticatedUser: [Function],
      getPackageForOrganization: [Function],
      getPackageForUser: [Function],
      getPackageVersionForAuthenticatedUser: [Function],
      getPackageVersionForOrganization: [Function],
      getPackageVersionForUser: [Function],
      listPackagesForAuthenticatedUser: [Function],
      listPackagesForOrganization: [Function],
      listPackagesForUser: [Function],
      restorePackageForAuthenticatedUser: [Function],
      restorePackageForOrg: [Function],
      restorePackageForUser: [Function],
      restorePackageVersionForAuthenticatedUser: [Function],
      restorePackageVersionForOrg: [Function],
      restorePackageVersionForUser: [Function]
    },
    projects: {
      addCollaborator: [Function],
      createCard: [Function],
      createColumn: [Function],
      createForAuthenticatedUser: [Function],
      createForOrg: [Function],
      createForRepo: [Function],
      delete: [Function],
      deleteCard: [Function],
      deleteColumn: [Function],
      get: [Function],
      getCard: [Function],
      getColumn: [Function],
      getPermissionForUser: [Function],
      listCards: [Function],
      listCollaborators: [Function],
      listColumns: [Function],
      listForOrg: [Function],
      listForRepo: [Function],
      listForUser: [Function],
      moveCard: [Function],
      moveColumn: [Function],
      removeCollaborator: [Function],
      update: [Function],
      updateCard: [Function],
      updateColumn: [Function]
    },
    pulls: {
      checkIfMerged: [Function],
      create: [Function],
      createReplyForReviewComment: [Function],
      createReview: [Function],
      createReviewComment: [Function],
      deletePendingReview: [Function],
      deleteReviewComment: [Function],
      dismissReview: [Function],
      get: [Function],
      getReview: [Function],
      getReviewComment: [Function],
      list: [Function],
      listCommentsForReview: [Function],
      listCommits: [Function],
      listFiles: [Function],
      listRequestedReviewers: [Function],
      listReviewComments: [Function],
      listReviewCommentsForRepo: [Function],
      listReviews: [Function],
      merge: [Function],
      removeRequestedReviewers: [Function],
      requestReviewers: [Function],
      submitReview: [Function],
      update: [Function],
      updateBranch: [Function],
      updateReview: [Function],
      updateReviewComment: [Function]
    },
    rateLimit: { get: [Function] },
    reactions: {
      createForCommitComment: [Function],
      createForIssue: [Function],
      createForIssueComment: [Function],
      createForPullRequestReviewComment: [Function],
      createForRelease: [Function],
      createForTeamDiscussionCommentInOrg: [Function],
      createForTeamDiscussionInOrg: [Function],
      deleteForCommitComment: [Function],
      deleteForIssue: [Function],
      deleteForIssueComment: [Function],
      deleteForPullRequestComment: [Function],
      deleteForRelease: [Function],
      deleteForTeamDiscussion: [Function],
      deleteForTeamDiscussionComment: [Function],
      listForCommitComment: [Function],
      listForIssue: [Function],
      listForIssueComment: [Function],
      listForPullRequestReviewComment: [Function],
      listForRelease: [Function],
      listForTeamDiscussionCommentInOrg: [Function],
      listForTeamDiscussionInOrg: [Function]
    },
    repos: {
      acceptInvitation: [Function],
      acceptInvitationForAuthenticatedUser: [Function],
      addAppAccessRestrictions: [Function],
      addCollaborator: [Function],
      addStatusCheckContexts: [Function],
      addTeamAccessRestrictions: [Function],
      addUserAccessRestrictions: [Function],
      checkCollaborator: [Function],
      checkVulnerabilityAlerts: [Function],
      codeownersErrors: [Function],
      compareCommits: [Function],
      compareCommitsWithBasehead: [Function],
      createAutolink: [Function],
      createCommitComment: [Function],
      createCommitSignatureProtection: [Function],
      createCommitStatus: [Function],
      createDeployKey: [Function],
      createDeployment: [Function],
      createDeploymentBranchPolicy: [Function],
      createDeploymentStatus: [Function],
      createDispatchEvent: [Function],
      createForAuthenticatedUser: [Function],
      createFork: [Function],
      createInOrg: [Function],
      createOrUpdateEnvironment: [Function],
      createOrUpdateFileContents: [Function],
      createPagesDeployment: [Function],
      createPagesSite: [Function],
      createRelease: [Function],
      createTagProtection: [Function],
      createUsingTemplate: [Function],
      createWebhook: [Function],
      declineInvitation: [Function],
      declineInvitationForAuthenticatedUser: [Function],
      delete: [Function],
      deleteAccessRestrictions: [Function],
      deleteAdminBranchProtection: [Function],
      deleteAnEnvironment: [Function],
      deleteAutolink: [Function],
      deleteBranchProtection: [Function],
      deleteCommitComment: [Function],
      deleteCommitSignatureProtection: [Function],
      deleteDeployKey: [Function],
      deleteDeployment: [Function],
      deleteDeploymentBranchPolicy: [Function],
      deleteFile: [Function],
      deleteInvitation: [Function],
      deletePagesSite: [Function],
      deletePullRequestReviewProtection: [Function],
      deleteRelease: [Function],
      deleteReleaseAsset: [Function],
      deleteTagProtection: [Function],
      deleteWebhook: [Function],
      disableAutomatedSecurityFixes: [Function],
      disableLfsForRepo: [Function],
      disableVulnerabilityAlerts: [Function],
      downloadArchive: [Function],
      downloadTarballArchive: [Function],
      downloadZipballArchive: [Function],
      enableAutomatedSecurityFixes: [Function],
      enableLfsForRepo: [Function],
      enableVulnerabilityAlerts: [Function],
      generateReleaseNotes: [Function],
      get: [Function],
      getAccessRestrictions: [Function],
      getAdminBranchProtection: [Function],
      getAllEnvironments: [Function],
      getAllStatusCheckContexts: [Function],
      getAllTopics: [Function],
      getAppsWithAccessToProtectedBranch: [Function],
      getAutolink: [Function],
      getBranch: [Function],
      getBranchProtection: [Function],
      getClones: [Function],
      getCodeFrequencyStats: [Function],
      getCollaboratorPermissionLevel: [Function],
      getCombinedStatusForRef: [Function],
      getCommit: [Function],
      getCommitActivityStats: [Function],
      getCommitComment: [Function],
      getCommitSignatureProtection: [Function],
      getCommunityProfileMetrics: [Function],
      getContent: [Function],
      getContributorsStats: [Function],
      getDeployKey: [Function],
      getDeployment: [Function],
      getDeploymentBranchPolicy: [Function],
      getDeploymentStatus: [Function],
      getEnvironment: [Function],
      getLatestPagesBuild: [Function],
      getLatestRelease: [Function],
      getPages: [Function],
      getPagesBuild: [Function],
      getPagesHealthCheck: [Function],
      getParticipationStats: [Function],
      getPullRequestReviewProtection: [Function],
      getPunchCardStats: [Function],
      getReadme: [Function],
      getReadmeInDirectory: [Function],
      getRelease: [Function],
      getReleaseAsset: [Function],
      getReleaseByTag: [Function],
      getStatusChecksProtection: [Function],
      getTeamsWithAccessToProtectedBranch: [Function],
      getTopPaths: [Function],
      getTopReferrers: [Function],
      getUsersWithAccessToProtectedBranch: [Function],
      getViews: [Function],
      getWebhook: [Function],
      getWebhookConfigForRepo: [Function],
      getWebhookDelivery: [Function],
      listAutolinks: [Function],
      listBranches: [Function],
      listBranchesForHeadCommit: [Function],
      listCollaborators: [Function],
      listCommentsForCommit: [Function],
      listCommitCommentsForRepo: [Function],
      listCommitStatusesForRef: [Function],
      listCommits: [Function],
      listContributors: [Function],
      listDeployKeys: [Function],
      listDeploymentBranchPolicies: [Function],
      listDeploymentStatuses: [Function],
      listDeployments: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listForUser: [Function],
      listForks: [Function],
      listInvitations: [Function],
      listInvitationsForAuthenticatedUser: [Function],
      listLanguages: [Function],
      listPagesBuilds: [Function],
      listPublic: [Function],
      listPullRequestsAssociatedWithCommit: [Function],
      listReleaseAssets: [Function],
      listReleases: [Function],
      listTagProtection: [Function],
      listTags: [Function],
      listTeams: [Function],
      listWebhookDeliveries: [Function],
      listWebhooks: [Function],
      merge: [Function],
      mergeUpstream: [Function],
      pingWebhook: [Function],
      redeliverWebhookDelivery: [Function],
      removeAppAccessRestrictions: [Function],
      removeCollaborator: [Function],
      removeStatusCheckContexts: [Function],
      removeStatusCheckProtection: [Function],
      removeTeamAccessRestrictions: [Function],
      removeUserAccessRestrictions: [Function],
      renameBranch: [Function],
      replaceAllTopics: [Function],
      requestPagesBuild: [Function],
      setAdminBranchProtection: [Function],
      setAppAccessRestrictions: [Function],
      setStatusCheckContexts: [Function],
      setTeamAccessRestrictions: [Function],
      setUserAccessRestrictions: [Function],
      testPushWebhook: [Function],
      transfer: [Function],
      update: [Function],
      updateBranchProtection: [Function],
      updateCommitComment: [Function],
      updateDeploymentBranchPolicy: [Function],
      updateInformationAboutPagesSite: [Function],
      updateInvitation: [Function],
      updatePullRequestReviewProtection: [Function],
      updateRelease: [Function],
      updateReleaseAsset: [Function],
      updateStatusCheckPotection: [Function],
      updateStatusCheckProtection: [Function],
      updateWebhook: [Function],
      updateWebhookConfigForRepo: [Function],
      uploadReleaseAsset: [Function]
    },
    search: {
      code: [Function],
      commits: [Function],
      issuesAndPullRequests: [Function],
      labels: [Function],
      repos: [Function],
      topics: [Function],
      users: [Function]
    },
    secretScanning: {
      getAlert: [Function],
      listAlertsForEnterprise: [Function],
      listAlertsForOrg: [Function],
      listAlertsForRepo: [Function],
      listLocationsForAlert: [Function],
      updateAlert: [Function]
    },
    teams: {
      addOrUpdateMembershipForUserInOrg: [Function],
      addOrUpdateProjectPermissionsInOrg: [Function],
      addOrUpdateRepoPermissionsInOrg: [Function],
      checkPermissionsForProjectInOrg: [Function],
      checkPermissionsForRepoInOrg: [Function],
      create: [Function],
      createDiscussionCommentInOrg: [Function],
      createDiscussionInOrg: [Function],
      deleteDiscussionCommentInOrg: [Function],
      deleteDiscussionInOrg: [Function],
      deleteInOrg: [Function],
      getByName: [Function],
      getDiscussionCommentInOrg: [Function],
      getDiscussionInOrg: [Function],
      getMembershipForUserInOrg: [Function],
      list: [Function],
      listChildInOrg: [Function],
      listDiscussionCommentsInOrg: [Function],
      listDiscussionsInOrg: [Function],
      listForAuthenticatedUser: [Function],
      listMembersInOrg: [Function],
      listPendingInvitationsInOrg: [Function],
      listProjectsInOrg: [Function],
      listReposInOrg: [Function],
      removeMembershipForUserInOrg: [Function],
      removeProjectInOrg: [Function],
      removeRepoInOrg: [Function],
      updateDiscussionCommentInOrg: [Function],
      updateDiscussionInOrg: [Function],
      updateInOrg: [Function]
    },
    users: {
      addEmailForAuthenticated: [Function],
      addEmailForAuthenticatedUser: [Function],
      block: [Function],
      checkBlocked: [Function],
      checkFollowingForUser: [Function],
      checkPersonIsFollowedByAuthenticated: [Function],
      createGpgKeyForAuthenticated: [Function],
      createGpgKeyForAuthenticatedUser: [Function],
      createPublicSshKeyForAuthenticated: [Function],
      createPublicSshKeyForAuthenticatedUser: [Function],
      createSshSigningKeyForAuthenticatedUser: [Function],
      deleteEmailForAuthenticated: [Function],
      deleteEmailForAuthenticatedUser: [Function],
      deleteGpgKeyForAuthenticated: [Function],
      deleteGpgKeyForAuthenticatedUser: [Function],
      deletePublicSshKeyForAuthenticated: [Function],
      deletePublicSshKeyForAuthenticatedUser: [Function],
      deleteSshSigningKeyForAuthenticatedUser: [Function],
      follow: [Function],
      getAuthenticated: [Function],
      getByUsername: [Function],
      getContextForUser: [Function],
      getGpgKeyForAuthenticated: [Function],
      getGpgKeyForAuthenticatedUser: [Function],
      getPublicSshKeyForAuthenticated: [Function],
      getPublicSshKeyForAuthenticatedUser: [Function],
      getSshSigningKeyForAuthenticatedUser: [Function],
      list: [Function],
      listBlockedByAuthenticated: [Function],
      listBlockedByAuthenticatedUser: [Function],
      listEmailsForAuthenticated: [Function],
      listEmailsForAuthenticatedUser: [Function],
      listFollowedByAuthenticated: [Function],
      listFollowedByAuthenticatedUser: [Function],
      listFollowersForAuthenticatedUser: [Function],
      listFollowersForUser: [Function],
      listFollowingForUser: [Function],
      listGpgKeysForAuthenticated: [Function],
      listGpgKeysForAuthenticatedUser: [Function],
      listGpgKeysForUser: [Function],
      listPublicEmailsForAuthenticated: [Function],
      listPublicEmailsForAuthenticatedUser: [Function],
      listPublicKeysForUser: [Function],
      listPublicSshKeysForAuthenticated: [Function],
      listPublicSshKeysForAuthenticatedUser: [Function],
      listSshSigningKeysForAuthenticatedUser: [Function],
      listSshSigningKeysForUser: [Function],
      setPrimaryEmailVisibilityForAuthenticated: [Function],
      setPrimaryEmailVisibilityForAuthenticatedUser: [Function],
      unblock: [Function],
      unfollow: [Function],
      updateAuthenticated: [Function]
    },
    rest: {
      actions: [Object],
      activity: [Object],
      apps: [Object],
      billing: [Object],
      checks: [Object],
      codeScanning: [Object],
      codesOfConduct: [Object],
      codespaces: [Object],
      dependabot: [Object],
      dependencyGraph: [Object],
      emojis: [Object],
      enterpriseAdmin: [Object],
      gists: [Object],
      git: [Object],
      gitignore: [Object],
      interactions: [Object],
      issues: [Object],
      licenses: [Object],
      markdown: [Object],
      meta: [Object],
      migrations: [Object],
      orgs: [Object],
      packages: [Object],
      projects: [Object],
      pulls: [Object],
      rateLimit: [Object],
      reactions: [Object],
      repos: [Object],
      search: [Object],
      secretScanning: [Object],
      teams: [Object],
      users: [Object]
    },
    paginate: [Function: bound paginate] { iterator: [Function: bound iterator] }
  },
  request: [Function: newApi] {
    endpoint: [Function: bound endpointWithDefaults] {
      DEFAULTS: [Object],
      defaults: [Function: bound withDefaults],
      merge: [Function: bound merge],
      parse: [Function: parse]
    },
    defaults: [Function: bound withDefaults]
  },
  graphql: [Function: newApi] {
    defaults: [Function: bound withDefaults],
    endpoint: [Function: bound endpointWithDefaults] {
      DEFAULTS: [Object],
      defaults: [Function: bound withDefaults],
      merge: [Function: bound merge],
      parse: [Function: parse]
    }
  },
  fileCache: RepositoryFileCache {
    octokit: OctokitWithDefaults {
      request: [Function],
      graphql: [Function],
      log: [Object],
      hook: [Function],
      auth: [AsyncFunction],
      actions: [Object],
      activity: [Object],
      apps: [Object],
      billing: [Object],
      checks: [Object],
      codeScanning: [Object],
      codesOfConduct: [Object],
      codespaces: [Object],
      dependabot: [Object],
      dependencyGraph: [Object],
      emojis: [Object],
      enterpriseAdmin: [Object],
      gists: [Object],
      git: [Object],
      gitignore: [Object],
      interactions: [Object],
      issues: [Object],
      licenses: [Object],
      markdown: [Object],
      meta: [Object],
      migrations: [Object],
      orgs: [Object],
      packages: [Object],
      projects: [Object],
      pulls: [Object],
      rateLimit: [Object],
      reactions: [Object],
      repos: [Object],
      search: [Object],
      secretScanning: [Object],
      teams: [Object],
      users: [Object],
      rest: [Object],
      paginate: [Function]
    },
    repository: {
      owner: 'chingor13',
      repo: 'google-auth-library-java',
      defaultBranch: 'master'
    },
    cache: Map(0) {}
  },
  logger: GCFLogger {
    destination: SonicBoom {
      _bufs: [],
      _len: 0,
      fd: 1,
      _writing: false,
      _writingBuf: '',
      _ending: false,
      _reopening: false,
      _asyncDrainScheduled: true,
      _hwm: 16387,
      file: null,
      destroyed: false,
      minLength: 0,
      maxLength: 0,
      maxWrite: 16384,
      sync: true,
      _fsync: false,
      append: true,
      mode: undefined,
      retryEAGAIN: [Function (anonymous)],
      mkdir: false,
      release: [Function (anonymous)],
      _events: [Object: null prototype],
      _eventsCount: 2
    },
    pino: EventEmitter {
      levels: [Object],
      silent: [Function: noop],
      onChild: [Function: noop],
      trace: [Function: LOG],
      debug: [Function: LOG],
      info: [Function: LOG],
      warn: [Function: LOG],
      error: [Function: LOG],
      fatal: [Function (anonymous)],
      metric: [Function: LOG],
      [Symbol(pino.useOnlyCustomLevels)]: false,
      [Symbol(pino.stream)]: [SonicBoom],
      [Symbol(pino.time)]: [Function: nullTime],
      [Symbol(pino.timeSliceIndex)]: 0,
      [Symbol(pino.stringify)]: [Function: stringify],
      [Symbol(pino.stringifySafe)]: [Function: stringify],
      [Symbol(pino.stringifiers)]: {},
      [Symbol(pino.end)]: '}\n',
      [Symbol(pino.formatOpts)]: [Object],
      [Symbol(pino.messageKey)]: 'message',
      [Symbol(pino.errorKey)]: 'err',
      [Symbol(pino.nestedKey)]: null,
      [Symbol(pino.nestedKeyStr)]: '',
      [Symbol(pino.serializers)]: [Object],
      [Symbol(pino.mixin)]: undefined,
      [Symbol(pino.mixinMergeStrategy)]: undefined,
      [Symbol(pino.chindings)]: '',
      [Symbol(pino.formatters)]: [Object],
      [Symbol(pino.hooks)]: [Object],
      [Symbol(pino.lsCache)]: [Object],
      [Symbol(pino.levelVal)]: 10
    },
    trace: [Function: bound trace],
    debug: [Function: bound debug],
    info: [Function: bound info],
    warn: [Function: bound warn],
    metric: [Function: bound metric],
    error: [Function: bound error],
    child: [Function: bound child]
  }
}, 'master', undefined, undefined, {
  logger: GCFLogger {
    destination: SonicBoom {
      _bufs: [],
      _len: 0,
      fd: 1,
      _writing: false,
      _writingBuf: '',
      _ending: false,
      _reopening: false,
      _asyncDrainScheduled: true,
      _hwm: 16387,
      file: null,
      destroyed: false,
      minLength: 0,
      maxLength: 0,
      maxWrite: 16384,
      sync: true,
      _fsync: false,
      append: true,
      mode: undefined,
      retryEAGAIN: [Function (anonymous)],
      mkdir: false,
      release: [Function (anonymous)],
      _events: [Object: null prototype],
      _eventsCount: 2
    },
    pino: EventEmitter {
      levels: [Object],
      silent: [Function: noop],
      onChild: [Function: noop],
      trace: [Function: LOG],
      debug: [Function: LOG],
      info: [Function: LOG],
      warn: [Function: LOG],
      error: [Function: LOG],
      fatal: [Function (anonymous)],
      metric: [Function: LOG],
      [Symbol(pino.useOnlyCustomLevels)]: false,
      [Symbol(pino.stream)]: [SonicBoom],
      [Symbol(pino.time)]: [Function: nullTime],
      [Symbol(pino.timeSliceIndex)]: 0,
      [Symbol(pino.stringify)]: [Function: stringify],
      [Symbol(pino.stringifySafe)]: [Function: stringify],
      [Symbol(pino.stringifiers)]: {},
      [Symbol(pino.end)]: '}\n',
      [Symbol(pino.formatOpts)]: [Object],
      [Symbol(pino.messageKey)]: 'message',
      [Symbol(pino.errorKey)]: 'err',
      [Symbol(pino.nestedKey)]: null,
      [Symbol(pino.nestedKeyStr)]: '',
      [Symbol(pino.serializers)]: [Object],
      [Symbol(pino.mixin)]: undefined,
      [Symbol(pino.mixinMergeStrategy)]: undefined,
      [Symbol(pino.chindings)]: '',
      [Symbol(pino.formatters)]: [Object],
      [Symbol(pino.hooks)]: [Object],
      [Symbol(pino.lsCache)]: [Object],
      [Symbol(pino.levelVal)]: 10
    },
    trace: [Function: bound trace],
    debug: [Function: bound debug],
    info: [Function: bound info],
    warn: [Function: bound warn],
    metric: [Function: bound metric],
    error: [Function: bound error],
    child: [Function: bound child]
  }
}) => Promise {
  Manifest {
    repository: { owner: 'fake', repo: 'fake', defaultBranch: 'main' },
    github: GitHub {
      getCommitFiles: [AsyncFunction (anonymous)],
      graphqlRequest: [AsyncFunction (anonymous)],
      findFilesByFilenameAndRef: [AsyncFunction (anonymous)],
      findFilesByGlobAndRef: [AsyncFunction (anonymous)],
      createPullRequest: [AsyncFunction (anonymous)],
      getPullRequest: [AsyncFunction (anonymous)],
      updatePullRequest: [AsyncFunction (anonymous)],
      findFilesByExtensionAndRef: [AsyncFunction (anonymous)],
      createRelease: [AsyncFunction (anonymous)],
      commentOnIssue: [AsyncFunction (anonymous)],
      removeIssueLabels: [AsyncFunction (anonymous)],
      addIssueLabels: [AsyncFunction (anonymous)],
      repository: [Object],
      octokit: [OctokitWithDefaults],
      request: [Function],
      graphql: [Function],
      fileCache: [RepositoryFileCache],
      logger: [GCFLogger]
    },
    targetBranch: 'main',
    repositoryConfig: {},
    releasedVersions: {},
    manifestPath: '.release-please-manifest.json',
    separatePullRequests: false,
    fork: false,
    signoffUser: undefined,
    releaseLabels: [ 'autorelease: tagged' ],
    labels: [ 'autorelease: pending' ],
    skipLabeling: false,
    sequentialCalls: false,
    snapshotLabels: [ 'autorelease: snapshot' ],
    bootstrapSha: undefined,
    lastReleaseSha: undefined,
    draft: undefined,
    draftPullRequest: undefined,
    groupPullRequestTitlePattern: undefined,
    releaseSearchDepth: 400,
    commitSearchDepth: 500,
    logger: GCFLogger {
      destination: [SonicBoom],
      pino: [EventEmitter],
      trace: [Function: bound trace],
      debug: [Function: bound debug],
      info: [Function: bound info],
      warn: [Function: bound warn],
      metric: [Function: bound metric],
      error: [Function: bound error],
      child: [Function: bound child]
    },
    plugins: [],
    pullRequestOverflowHandler: FilePullRequestOverflowHandler {
      github: [GitHub],
      logger: [GCFLogger]
    }
  }
} at null.buildManifest (/home/chingor/code/repo-automation-bots/packages/release-please/src/release-please.ts:206:27)
  AssertError: expected fromManifest to be called once but was called twice
      fromManifest(GitHub {
    getCommitFiles: [AsyncFunction (anonymous)],
    graphqlRequest: [AsyncFunction (anonymous)],
    findFilesByFilenameAndRef: [AsyncFunction (anonymous)],
    findFilesByGlobAndRef: [AsyncFunction (anonymous)],
    createPullRequest: [AsyncFunction (anonymous)],
    getPullRequest: [AsyncFunction (anonymous)],
    updatePullRequest: [AsyncFunction (anonymous)],
    findFilesByExtensionAndRef: [AsyncFunction (anonymous)],
    createRelease: [AsyncFunction (anonymous)],
    commentOnIssue: [AsyncFunction (anonymous)],
    removeIssueLabels: [AsyncFunction (anonymous)],
    addIssueLabels: [AsyncFunction (anonymous)],
    repository: {
      owner: 'chingor13',
      repo: 'google-auth-library-java',
      defaultBranch: 'master'
    },
    octokit: OctokitWithDefaults {
      request: [Function: newApi] {
        endpoint: [Function],
        defaults: [Function: bound withDefaults]
      },
      graphql: [Function: newApi] {
        defaults: [Function: bound withDefaults],
        endpoint: [Function]
      },
      log: {
        debug: [Function: debug],
        info: [Function: info],
        warn: [Function: bound warn],
        error: [Function: bound error]
      },
      hook: [Function: bound register] {
        api: [Object],
        remove: [Function: bound removeHook],
        before: [Function: bound addHook],
        error: [Function: bound addHook],
        after: [Function: bound addHook],
        wrap: [Function: bound addHook]
      },
      auth: [Function: bound auth] AsyncFunction {
        hook: [Function: bound hook] AsyncFunction
      },
      actions: {
        addCustomLabelsToSelfHostedRunnerForOrg: [Function],
        addCustomLabelsToSelfHostedRunnerForRepo: [Function],
        addSelectedRepoToOrgSecret: [Function],
        approveWorkflowRun: [Function],
        cancelWorkflowRun: [Function],
        createOrUpdateEnvironmentSecret: [Function],
        createOrUpdateOrgSecret: [Function],
        createOrUpdateRepoSecret: [Function],
        createRegistrationTokenForOrg: [Function],
        createRegistrationTokenForRepo: [Function],
        createRemoveTokenForOrg: [Function],
        createRemoveTokenForRepo: [Function],
        createWorkflowDispatch: [Function],
        deleteActionsCacheById: [Function],
        deleteActionsCacheByKey: [Function],
        deleteArtifact: [Function],
        deleteEnvironmentSecret: [Function],
        deleteOrgSecret: [Function],
        deleteRepoSecret: [Function],
        deleteSelfHostedRunnerFromOrg: [Function],
        deleteSelfHostedRunnerFromRepo: [Function],
        deleteWorkflowRun: [Function],
        deleteWorkflowRunLogs: [Function],
        disableSelectedRepositoryGithubActionsOrganization: [Function],
        disableWorkflow: [Function],
        downloadArtifact: [Function],
        downloadJobLogsForWorkflowRun: [Function],
        downloadWorkflowRunAttemptLogs: [Function],
        downloadWorkflowRunLogs: [Function],
        enableSelectedRepositoryGithubActionsOrganization: [Function],
        enableWorkflow: [Function],
        getActionsCacheList: [Function],
        getActionsCacheUsage: [Function],
        getActionsCacheUsageByRepoForOrg: [Function],
        getActionsCacheUsageForEnterprise: [Function],
        getActionsCacheUsageForOrg: [Function],
        getAllowedActionsOrganization: [Function],
        getAllowedActionsRepository: [Function],
        getArtifact: [Function],
        getEnvironmentPublicKey: [Function],
        getEnvironmentSecret: [Function],
        getGithubActionsDefaultWorkflowPermissionsEnterprise: [Function],
        getGithubActionsDefaultWorkflowPermissionsOrganization: [Function],
        getGithubActionsDefaultWorkflowPermissionsRepository: [Function],
        getGithubActionsPermissionsOrganization: [Function],
        getGithubActionsPermissionsRepository: [Function],
        getJobForWorkflowRun: [Function],
        getOrgPublicKey: [Function],
        getOrgSecret: [Function],
        getPendingDeploymentsForRun: [Function],
        getRepoPermissions: [Function],
        getRepoPublicKey: [Function],
        getRepoSecret: [Function],
        getReviewsForRun: [Function],
        getSelfHostedRunnerForOrg: [Function],
        getSelfHostedRunnerForRepo: [Function],
        getWorkflow: [Function],
        getWorkflowAccessToRepository: [Function],
        getWorkflowRun: [Function],
        getWorkflowRunAttempt: [Function],
        getWorkflowRunUsage: [Function],
        getWorkflowUsage: [Function],
        listArtifactsForRepo: [Function],
        listEnvironmentSecrets: [Function],
        listJobsForWorkflowRun: [Function],
        listJobsForWorkflowRunAttempt: [Function],
        listLabelsForSelfHostedRunnerForOrg: [Function],
        listLabelsForSelfHostedRunnerForRepo: [Function],
        listOrgSecrets: [Function],
        listRepoSecrets: [Function],
        listRepoWorkflows: [Function],
        listRunnerApplicationsForOrg: [Function],
        listRunnerApplicationsForRepo: [Function],
        listSelectedReposForOrgSecret: [Function],
        listSelectedRepositoriesEnabledGithubActionsOrganization: [Function],
        listSelfHostedRunnersForOrg: [Function],
        listSelfHostedRunnersForRepo: [Function],
        listWorkflowRunArtifacts: [Function],
        listWorkflowRuns: [Function],
        listWorkflowRunsForRepo: [Function],
        reRunJobForWorkflowRun: [Function],
        reRunWorkflow: [Function],
        reRunWorkflowFailedJobs: [Function],
        removeAllCustomLabelsFromSelfHostedRunnerForOrg: [Function],
        removeAllCustomLabelsFromSelfHostedRunnerForRepo: [Function],
        removeCustomLabelFromSelfHostedRunnerForOrg: [Function],
        removeCustomLabelFromSelfHostedRunnerForRepo: [Function],
        removeSelectedRepoFromOrgSecret: [Function],
        reviewPendingDeploymentsForRun: [Function],
        setAllowedActionsOrganization: [Function],
        setAllowedActionsRepository: [Function],
        setCustomLabelsForSelfHostedRunnerForOrg: [Function],
        setCustomLabelsForSelfHostedRunnerForRepo: [Function],
        setGithubActionsDefaultWorkflowPermissionsEnterprise: [Function],
        setGithubActionsDefaultWorkflowPermissionsOrganization: [Function],
        setGithubActionsDefaultWorkflowPermissionsRepository: [Function],
        setGithubActionsPermissionsOrganization: [Function],
        setGithubActionsPermissionsRepository: [Function],
        setSelectedReposForOrgSecret: [Function],
        setSelectedRepositoriesEnabledGithubActionsOrganization: [Function],
        setWorkflowAccessToRepository: [Function]
      },
      activity: {
        checkRepoIsStarredByAuthenticatedUser: [Function],
        deleteRepoSubscription: [Function],
        deleteThreadSubscription: [Function],
        getFeeds: [Function],
        getRepoSubscription: [Function],
        getThread: [Function],
        getThreadSubscriptionForAuthenticatedUser: [Function],
        listEventsForAuthenticatedUser: [Function],
        listNotificationsForAuthenticatedUser: [Function],
        listOrgEventsForAuthenticatedUser: [Function],
        listPublicEvents: [Function],
        listPublicEventsForRepoNetwork: [Function],
        listPublicEventsForUser: [Function],
        listPublicOrgEvents: [Function],
        listReceivedEventsForUser: [Function],
        listReceivedPublicEventsForUser: [Function],
        listRepoEvents: [Function],
        listRepoNotificationsForAuthenticatedUser: [Function],
        listReposStarredByAuthenticatedUser: [Function],
        listReposStarredByUser: [Function],
        listReposWatchedByUser: [Function],
        listStargazersForRepo: [Function],
        listWatchedReposForAuthenticatedUser: [Function],
        listWatchersForRepo: [Function],
        markNotificationsAsRead: [Function],
        markRepoNotificationsAsRead: [Function],
        markThreadAsRead: [Function],
        setRepoSubscription: [Function],
        setThreadSubscription: [Function],
        starRepoForAuthenticatedUser: [Function],
        unstarRepoForAuthenticatedUser: [Function]
      },
      apps: {
        addRepoToInstallation: [Function],
        addRepoToInstallationForAuthenticatedUser: [Function],
        checkToken: [Function],
        createFromManifest: [Function],
        createInstallationAccessToken: [Function],
        deleteAuthorization: [Function],
        deleteInstallation: [Function],
        deleteToken: [Function],
        getAuthenticated: [Function],
        getBySlug: [Function],
        getInstallation: [Function],
        getOrgInstallation: [Function],
        getRepoInstallation: [Function],
        getSubscriptionPlanForAccount: [Function],
        getSubscriptionPlanForAccountStubbed: [Function],
        getUserInstallation: [Function],
        getWebhookConfigForApp: [Function],
        getWebhookDelivery: [Function],
        listAccountsForPlan: [Function],
        listAccountsForPlanStubbed: [Function],
        listInstallationReposForAuthenticatedUser: [Function],
        listInstallations: [Function],
        listInstallationsForAuthenticatedUser: [Function],
        listPlans: [Function],
        listPlansStubbed: [Function],
        listReposAccessibleToInstallation: [Function],
        listSubscriptionsForAuthenticatedUser: [Function],
        listSubscriptionsForAuthenticatedUserStubbed: [Function],
        listWebhookDeliveries: [Function],
        redeliverWebhookDelivery: [Function],
        removeRepoFromInstallation: [Function],
        removeRepoFromInstallationForAuthenticatedUser: [Function],
        resetToken: [Function],
        revokeInstallationAccessToken: [Function],
        scopeToken: [Function],
        suspendInstallation: [Function],
        unsuspendInstallation: [Function],
        updateWebhookConfigForApp: [Function]
      },
      billing: {
        getGithubActionsBillingOrg: [Function],
        getGithubActionsBillingUser: [Function],
        getGithubAdvancedSecurityBillingGhe: [Function],
        getGithubAdvancedSecurityBillingOrg: [Function],
        getGithubPackagesBillingOrg: [Function],
        getGithubPackagesBillingUser: [Function],
        getSharedStorageBillingOrg: [Function],
        getSharedStorageBillingUser: [Function]
      },
      checks: {
        create: [Function],
        createSuite: [Function],
        get: [Function],
        getSuite: [Function],
        listAnnotations: [Function],
        listForRef: [Function],
        listForSuite: [Function],
        listSuitesForRef: [Function],
        rerequestRun: [Function],
        rerequestSuite: [Function],
        setSuitesPreferences: [Function],
        update: [Function]
      },
      codeScanning: {
        deleteAnalysis: [Function],
        getAlert: [Function],
        getAnalysis: [Function],
        getCodeqlDatabase: [Function],
        getSarif: [Function],
        listAlertInstances: [Function],
        listAlertsForEnterprise: [Function],
        listAlertsForOrg: [Function],
        listAlertsForRepo: [Function],
        listAlertsInstances: [Function],
        listCodeqlDatabases: [Function],
        listRecentAnalyses: [Function],
        updateAlert: [Function],
        uploadSarif: [Function]
      },
      codesOfConduct: { getAllCodesOfConduct: [Function], getConductCode: [Function] },
      codespaces: {
        addRepositoryForSecretForAuthenticatedUser: [Function],
        addSelectedRepoToOrgSecret: [Function],
        codespaceMachinesForAuthenticatedUser: [Function],
        createForAuthenticatedUser: [Function],
        createOrUpdateOrgSecret: [Function],
        createOrUpdateRepoSecret: [Function],
        createOrUpdateSecretForAuthenticatedUser: [Function],
        createWithPrForAuthenticatedUser: [Function],
        createWithRepoForAuthenticatedUser: [Function],
        deleteForAuthenticatedUser: [Function],
        deleteFromOrganization: [Function],
        deleteOrgSecret: [Function],
        deleteRepoSecret: [Function],
        deleteSecretForAuthenticatedUser: [Function],
        exportForAuthenticatedUser: [Function],
        getExportDetailsForAuthenticatedUser: [Function],
        getForAuthenticatedUser: [Function],
        getOrgPublicKey: [Function],
        getOrgSecret: [Function],
        getPublicKeyForAuthenticatedUser: [Function],
        getRepoPublicKey: [Function],
        getRepoSecret: [Function],
        getSecretForAuthenticatedUser: [Function],
        listDevcontainersInRepositoryForAuthenticatedUser: [Function],
        listForAuthenticatedUser: [Function],
        listInOrganization: [Function],
        listInRepositoryForAuthenticatedUser: [Function],
        listOrgSecrets: [Function],
        listRepoSecrets: [Function],
        listRepositoriesForSecretForAuthenticatedUser: [Function],
        listSecretsForAuthenticatedUser: [Function],
        listSelectedReposForOrgSecret: [Function],
        preFlightWithRepoForAuthenticatedUser: [Function],
        removeRepositoryForSecretForAuthenticatedUser: [Function],
        removeSelectedRepoFromOrgSecret: [Function],
        repoMachinesForAuthenticatedUser: [Function],
        setRepositoriesForSecretForAuthenticatedUser: [Function],
        setSelectedReposForOrgSecret: [Function],
        startForAuthenticatedUser: [Function],
        stopForAuthenticatedUser: [Function],
        stopInOrganization: [Function],
        updateForAuthenticatedUser: [Function]
      },
      dependabot: {
        addSelectedRepoToOrgSecret: [Function],
        createOrUpdateOrgSecret: [Function],
        createOrUpdateRepoSecret: [Function],
        deleteOrgSecret: [Function],
        deleteRepoSecret: [Function],
        getAlert: [Function],
        getOrgPublicKey: [Function],
        getOrgSecret: [Function],
        getRepoPublicKey: [Function],
        getRepoSecret: [Function],
        listAlertsForRepo: [Function],
        listOrgSecrets: [Function],
        listRepoSecrets: [Function],
        listSelectedReposForOrgSecret: [Function],
        removeSelectedRepoFromOrgSecret: [Function],
        setSelectedReposForOrgSecret: [Function],
        updateAlert: [Function]
      },
      dependencyGraph: { createRepositorySnapshot: [Function], diffRange: [Function] },
      emojis: { get: [Function] },
      enterpriseAdmin: {
        addCustomLabelsToSelfHostedRunnerForEnterprise: [Function],
        disableSelectedOrganizationGithubActionsEnterprise: [Function],
        enableSelectedOrganizationGithubActionsEnterprise: [Function],
        getAllowedActionsEnterprise: [Function],
        getGithubActionsPermissionsEnterprise: [Function],
        getServerStatistics: [Function],
        listLabelsForSelfHostedRunnerForEnterprise: [Function],
        listSelectedOrganizationsEnabledGithubActionsEnterprise: [Function],
        removeAllCustomLabelsFromSelfHostedRunnerForEnterprise: [Function],
        removeCustomLabelFromSelfHostedRunnerForEnterprise: [Function],
        setAllowedActionsEnterprise: [Function],
        setCustomLabelsForSelfHostedRunnerForEnterprise: [Function],
        setGithubActionsPermissionsEnterprise: [Function],
        setSelectedOrganizationsEnabledGithubActionsEnterprise: [Function]
      },
      gists: {
        checkIsStarred: [Function],
        create: [Function],
        createComment: [Function],
        delete: [Function],
        deleteComment: [Function],
        fork: [Function],
        get: [Function],
        getComment: [Function],
        getRevision: [Function],
        list: [Function],
        listComments: [Function],
        listCommits: [Function],
        listForUser: [Function],
        listForks: [Function],
        listPublic: [Function],
        listStarred: [Function],
        star: [Function],
        unstar: [Function],
        update: [Function],
        updateComment: [Function]
      },
      git: {
        createBlob: [Function],
        createCommit: [Function],
        createRef: [Function],
        createTag: [Function],
        createTree: [Function],
        deleteRef: [Function],
        getBlob: [Function],
        getCommit: [Function],
        getRef: [Function],
        getTag: [Function],
        getTree: [Function],
        listMatchingRefs: [Function],
        updateRef: [Function]
      },
      gitignore: { getAllTemplates: [Function], getTemplate: [Function] },
      interactions: {
        getRestrictionsForAuthenticatedUser: [Function],
        getRestrictionsForOrg: [Function],
        getRestrictionsForRepo: [Function],
        getRestrictionsForYourPublicRepos: [Function],
        removeRestrictionsForAuthenticatedUser: [Function],
        removeRestrictionsForOrg: [Function],
        removeRestrictionsForRepo: [Function],
        removeRestrictionsForYourPublicRepos: [Function],
        setRestrictionsForAuthenticatedUser: [Function],
        setRestrictionsForOrg: [Function],
        setRestrictionsForRepo: [Function],
        setRestrictionsForYourPublicRepos: [Function]
      },
      issues: {
        addAssignees: [Function],
        addLabels: [Function],
        checkUserCanBeAssigned: [Function],
        create: [Function],
        createComment: [Function],
        createLabel: [Function],
        createMilestone: [Function],
        deleteComment: [Function],
        deleteLabel: [Function],
        deleteMilestone: [Function],
        get: [Function],
        getComment: [Function],
        getEvent: [Function],
        getLabel: [Function],
        getMilestone: [Function],
        list: [Function],
        listAssignees: [Function],
        listComments: [Function],
        listCommentsForRepo: [Function],
        listEvents: [Function],
        listEventsForRepo: [Function],
        listEventsForTimeline: [Function],
        listForAuthenticatedUser: [Function],
        listForOrg: [Function],
        listForRepo: [Function],
        listLabelsForMilestone: [Function],
        listLabelsForRepo: [Function],
        listLabelsOnIssue: [Function],
        listMilestones: [Function],
        lock: [Function],
        removeAllLabels: [Function],
        removeAssignees: [Function],
        removeLabel: [Function],
        setLabels: [Function],
        unlock: [Function],
        update: [Function],
        updateComment: [Function],
        updateLabel: [Function],
        updateMilestone: [Function]
      },
      licenses: {
        get: [Function],
        getAllCommonlyUsed: [Function],
        getForRepo: [Function]
      },
      markdown: { render: [Function], renderRaw: [Function] },
      meta: {
        get: [Function],
        getOctocat: [Function],
        getZen: [Function],
        root: [Function]
      },
      migrations: {
        cancelImport: [Function],
        deleteArchiveForAuthenticatedUser: [Function],
        deleteArchiveForOrg: [Function],
        downloadArchiveForOrg: [Function],
        getArchiveForAuthenticatedUser: [Function],
        getCommitAuthors: [Function],
        getImportStatus: [Function],
        getLargeFiles: [Function],
        getStatusForAuthenticatedUser: [Function],
        getStatusForOrg: [Function],
        listForAuthenticatedUser: [Function],
        listForOrg: [Function],
        listReposForAuthenticatedUser: [Function],
        listReposForOrg: [Function],
        listReposForUser: [Function],
        mapCommitAuthor: [Function],
        setLfsPreference: [Function],
        startForAuthenticatedUser: [Function],
        startForOrg: [Function],
        startImport: [Function],
        unlockRepoForAuthenticatedUser: [Function],
        unlockRepoForOrg: [Function],
        updateImport: [Function]
      },
      orgs: {
        addSecurityManagerTeam: [Function],
        blockUser: [Function],
        cancelInvitation: [Function],
        checkBlockedUser: [Function],
        checkMembershipForUser: [Function],
        checkPublicMembershipForUser: [Function],
        convertMemberToOutsideCollaborator: [Function],
        createCustomRole: [Function],
        createInvitation: [Function],
        createWebhook: [Function],
        deleteCustomRole: [Function],
        deleteWebhook: [Function],
        enableOrDisableSecurityProductOnAllOrgRepos: [Function],
        get: [Function],
        getMembershipForAuthenticatedUser: [Function],
        getMembershipForUser: [Function],
        getWebhook: [Function],
        getWebhookConfigForOrg: [Function],
        getWebhookDelivery: [Function],
        list: [Function],
        listAppInstallations: [Function],
        listBlockedUsers: [Function],
        listCustomRoles: [Function],
        listFailedInvitations: [Function],
        listFineGrainedPermissions: [Function],
        listForAuthenticatedUser: [Function],
        listForUser: [Function],
        listInvitationTeams: [Function],
        listMembers: [Function],
        listMembershipsForAuthenticatedUser: [Function],
        listOutsideCollaborators: [Function],
        listPendingInvitations: [Function],
        listPublicMembers: [Function],
        listSecurityManagerTeams: [Function],
        listWebhookDeliveries: [Function],
        listWebhooks: [Function],
        pingWebhook: [Function],
        redeliverWebhookDelivery: [Function],
        removeMember: [Function],
        removeMembershipForUser: [Function],
        removeOutsideCollaborator: [Function],
        removePublicMembershipForAuthenticatedUser: [Function],
        removeSecurityManagerTeam: [Function],
        setMembershipForUser: [Function],
        setPublicMembershipForAuthenticatedUser: [Function],
        unblockUser: [Function],
        update: [Function],
        updateCustomRole: [Function],
        updateMembershipForAuthenticatedUser: [Function],
        updateWebhook: [Function],
        updateWebhookConfigForOrg: [Function]
      },
      packages: {
        deletePackageForAuthenticatedUser: [Function],
        deletePackageForOrg: [Function],
        deletePackageForUser: [Function],
        deletePackageVersionForAuthenticatedUser: [Function],
        deletePackageVersionForOrg: [Function],
        deletePackageVersionForUser: [Function],
        getAllPackageVersionsForAPackageOwnedByAnOrg: [Function],
        getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [Function],
        getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [Function],
        getAllPackageVersionsForPackageOwnedByOrg: [Function],
        getAllPackageVersionsForPackageOwnedByUser: [Function],
        getPackageForAuthenticatedUser: [Function],
        getPackageForOrganization: [Function],
        getPackageForUser: [Function],
        getPackageVersionForAuthenticatedUser: [Function],
        getPackageVersionForOrganization: [Function],
        getPackageVersionForUser: [Function],
        listPackagesForAuthenticatedUser: [Function],
        listPackagesForOrganization: [Function],
        listPackagesForUser: [Function],
        restorePackageForAuthenticatedUser: [Function],
        restorePackageForOrg: [Function],
        restorePackageForUser: [Function],
        restorePackageVersionForAuthenticatedUser: [Function],
        restorePackageVersionForOrg: [Function],
        restorePackageVersionForUser: [Function]
      },
      projects: {
        addCollaborator: [Function],
        createCard: [Function],
        createColumn: [Function],
        createForAuthenticatedUser: [Function],
        createForOrg: [Function],
        createForRepo: [Function],
        delete: [Function],
        deleteCard: [Function],
        deleteColumn: [Function],
        get: [Function],
        getCard: [Function],
        getColumn: [Function],
        getPermissionForUser: [Function],
        listCards: [Function],
        listCollaborators: [Function],
        listColumns: [Function],
        listForOrg: [Function],
        listForRepo: [Function],
        listForUser: [Function],
        moveCard: [Function],
        moveColumn: [Function],
        removeCollaborator: [Function],
        update: [Function],
        updateCard: [Function],
        updateColumn: [Function]
      },
      pulls: {
        checkIfMerged: [Function],
        create: [Function],
        createReplyForReviewComment: [Function],
        createReview: [Function],
        createReviewComment: [Function],
        deletePendingReview: [Function],
        deleteReviewComment: [Function],
        dismissReview: [Function],
        get: [Function],
        getReview: [Function],
        getReviewComment: [Function],
        list: [Function],
        listCommentsForReview: [Function],
        listCommits: [Function],
        listFiles: [Function],
        listRequestedReviewers: [Function],
        listReviewComments: [Function],
        listReviewCommentsForRepo: [Function],
        listReviews: [Function],
        merge: [Function],
        removeRequestedReviewers: [Function],
        requestReviewers: [Function],
        submitReview: [Function],
        update: [Function],
        updateBranch: [Function],
        updateReview: [Function],
        updateReviewComment: [Function]
      },
      rateLimit: { get: [Function] },
      reactions: {
        createForCommitComment: [Function],
        createForIssue: [Function],
        createForIssueComment: [Function],
        createForPullRequestReviewComment: [Function],
        createForRelease: [Function],
        createForTeamDiscussionCommentInOrg: [Function],
        createForTeamDiscussionInOrg: [Function],
        deleteForCommitComment: [Function],
        deleteForIssue: [Function],
        deleteForIssueComment: [Function],
        deleteForPullRequestComment: [Function],
        deleteForRelease: [Function],
        deleteForTeamDiscussion: [Function],
        deleteForTeamDiscussionComment: [Function],
        listForCommitComment: [Function],
        listForIssue: [Function],
        listForIssueComment: [Function],
        listForPullRequestReviewComment: [Function],
        listForRelease: [Function],
        listForTeamDiscussionCommentInOrg: [Function],
        listForTeamDiscussionInOrg: [Function]
      },
      repos: {
        acceptInvitation: [Function],
        acceptInvitationForAuthenticatedUser: [Function],
        addAppAccessRestrictions: [Function],
        addCollaborator: [Function],
        addStatusCheckContexts: [Function],
        addTeamAccessRestrictions: [Function],
        addUserAccessRestrictions: [Function],
        checkCollaborator: [Function],
        checkVulnerabilityAlerts: [Function],
        codeownersErrors: [Function],
        compareCommits: [Function],
        compareCommitsWithBasehead: [Function],
        createAutolink: [Function],
        createCommitComment: [Function],
        createCommitSignatureProtection: [Function],
        createCommitStatus: [Function],
        createDeployKey: [Function],
        createDeployment: [Function],
        createDeploymentBranchPolicy: [Function],
        createDeploymentStatus: [Function],
        createDispatchEvent: [Function],
        createForAuthenticatedUser: [Function],
        createFork: [Function],
        createInOrg: [Function],
        createOrUpdateEnvironment: [Function],
        createOrUpdateFileContents: [Function],
        createPagesDeployment: [Function],
        createPagesSite: [Function],
        createRelease: [Function],
        createTagProtection: [Function],
        createUsingTemplate: [Function],
        createWebhook: [Function],
        declineInvitation: [Function],
        declineInvitationForAuthenticatedUser: [Function],
        delete: [Function],
        deleteAccessRestrictions: [Function],
        deleteAdminBranchProtection: [Function],
        deleteAnEnvironment: [Function],
        deleteAutolink: [Function],
        deleteBranchProtection: [Function],
        deleteCommitComment: [Function],
        deleteCommitSignatureProtection: [Function],
        deleteDeployKey: [Function],
        deleteDeployment: [Function],
        deleteDeploymentBranchPolicy: [Function],
        deleteFile: [Function],
        deleteInvitation: [Function],
        deletePagesSite: [Function],
        deletePullRequestReviewProtection: [Function],
        deleteRelease: [Function],
        deleteReleaseAsset: [Function],
        deleteTagProtection: [Function],
        deleteWebhook: [Function],
        disableAutomatedSecurityFixes: [Function],
        disableLfsForRepo: [Function],
        disableVulnerabilityAlerts: [Function],
        downloadArchive: [Function],
        downloadTarballArchive: [Function],
        downloadZipballArchive: [Function],
        enableAutomatedSecurityFixes: [Function],
        enableLfsForRepo: [Function],
        enableVulnerabilityAlerts: [Function],
        generateReleaseNotes: [Function],
        get: [Function],
        getAccessRestrictions: [Function],
        getAdminBranchProtection: [Function],
        getAllEnvironments: [Function],
        getAllStatusCheckContexts: [Function],
        getAllTopics: [Function],
        getAppsWithAccessToProtectedBranch: [Function],
        getAutolink: [Function],
        getBranch: [Function],
        getBranchProtection: [Function],
        getClones: [Function],
        getCodeFrequencyStats: [Function],
        getCollaboratorPermissionLevel: [Function],
        getCombinedStatusForRef: [Function],
        getCommit: [Function],
        getCommitActivityStats: [Function],
        getCommitComment: [Function],
        getCommitSignatureProtection: [Function],
        getCommunityProfileMetrics: [Function],
        getContent: [Function],
        getContributorsStats: [Function],
        getDeployKey: [Function],
        getDeployment: [Function],
        getDeploymentBranchPolicy: [Function],
        getDeploymentStatus: [Function],
        getEnvironment: [Function],
        getLatestPagesBuild: [Function],
        getLatestRelease: [Function],
        getPages: [Function],
        getPagesBuild: [Function],
        getPagesHealthCheck: [Function],
        getParticipationStats: [Function],
        getPullRequestReviewProtection: [Function],
        getPunchCardStats: [Function],
        getReadme: [Function],
        getReadmeInDirectory: [Function],
        getRelease: [Function],
        getReleaseAsset: [Function],
        getReleaseByTag: [Function],
        getStatusChecksProtection: [Function],
        getTeamsWithAccessToProtectedBranch: [Function],
        getTopPaths: [Function],
        getTopReferrers: [Function],
        getUsersWithAccessToProtectedBranch: [Function],
        getViews: [Function],
        getWebhook: [Function],
        getWebhookConfigForRepo: [Function],
        getWebhookDelivery: [Function],
        listAutolinks: [Function],
        listBranches: [Function],
        listBranchesForHeadCommit: [Function],
        listCollaborators: [Function],
        listCommentsForCommit: [Function],
        listCommitCommentsForRepo: [Function],
        listCommitStatusesForRef: [Function],
        listCommits: [Function],
        listContributors: [Function],
        listDeployKeys: [Function],
        listDeploymentBranchPolicies: [Function],
        listDeploymentStatuses: [Function],
        listDeployments: [Function],
        listForAuthenticatedUser: [Function],
        listForOrg: [Function],
        listForUser: [Function],
        listForks: [Function],
        listInvitations: [Function],
        listInvitationsForAuthenticatedUser: [Function],
        listLanguages: [Function],
        listPagesBuilds: [Function],
        listPublic: [Function],
        listPullRequestsAssociatedWithCommit: [Function],
        listReleaseAssets: [Function],
        listReleases: [Function],
        listTagProtection: [Function],
        listTags: [Function],
        listTeams: [Function],
        listWebhookDeliveries: [Function],
        listWebhooks: [Function],
        merge: [Function],
        mergeUpstream: [Function],
        pingWebhook: [Function],
        redeliverWebhookDelivery: [Function],
        removeAppAccessRestrictions: [Function],
        removeCollaborator: [Function],
        removeStatusCheckContexts: [Function],
        removeStatusCheckProtection: [Function],
        removeTeamAccessRestrictions: [Function],
        removeUserAccessRestrictions: [Function],
        renameBranch: [Function],
        replaceAllTopics: [Function],
        requestPagesBuild: [Function],
        setAdminBranchProtection: [Function],
        setAppAccessRestrictions: [Function],
        setStatusCheckContexts: [Function],
        setTeamAccessRestrictions: [Function],
        setUserAccessRestrictions: [Function],
        testPushWebhook: [Function],
        transfer: [Function],
        update: [Function],
        updateBranchProtection: [Function],
        updateCommitComment: [Function],
        updateDeploymentBranchPolicy: [Function],
        updateInformationAboutPagesSite: [Function],
        updateInvitation: [Function],
        updatePullRequestReviewProtection: [Function],
        updateRelease: [Function],
        updateReleaseAsset: [Function],
        updateStatusCheckPotection: [Function],
        updateStatusCheckProtection: [Function],
        updateWebhook: [Function],
        updateWebhookConfigForRepo: [Function],
        uploadReleaseAsset: [Function]
      },
      search: {
        code: [Function],
        commits: [Function],
        issuesAndPullRequests: [Function],
        labels: [Function],
        repos: [Function],
        topics: [Function],
        users: [Function]
      },
      secretScanning: {
        getAlert: [Function],
        listAlertsForEnterprise: [Function],
        listAlertsForOrg: [Function],
        listAlertsForRepo: [Function],
        listLocationsForAlert: [Function],
        updateAlert: [Function]
      },
      teams: {
        addOrUpdateMembershipForUserInOrg: [Function],
        addOrUpdateProjectPermissionsInOrg: [Function],
        addOrUpdateRepoPermissionsInOrg: [Function],
        checkPermissionsForProjectInOrg: [Function],
        checkPermissionsForRepoInOrg: [Function],
        create: [Function],
        createDiscussionCommentInOrg: [Function],
        createDiscussionInOrg: [Function],
        deleteDiscussionCommentInOrg: [Function],
        deleteDiscussionInOrg: [Function],
        deleteInOrg: [Function],
        getByName: [Function],
        getDiscussionCommentInOrg: [Function],
        getDiscussionInOrg: [Function],
        getMembershipForUserInOrg: [Function],
        list: [Function],
        listChildInOrg: [Function],
        listDiscussionCommentsInOrg: [Function],
        listDiscussionsInOrg: [Function],
        listForAuthenticatedUser: [Function],
        listMembersInOrg: [Function],
        listPendingInvitationsInOrg: [Function],
        listProjectsInOrg: [Function],
        listReposInOrg: [Function],
        removeMembershipForUserInOrg: [Function],
        removeProjectInOrg: [Function],
        removeRepoInOrg: [Function],
        updateDiscussionCommentInOrg: [Function],
        updateDiscussionInOrg: [Function],
        updateInOrg: [Function]
      },
      users: {
        addEmailForAuthenticated: [Function],
        addEmailForAuthenticatedUser: [Function],
        block: [Function],
        checkBlocked: [Function],
        checkFollowingForUser: [Function],
        checkPersonIsFollowedByAuthenticated: [Function],
        createGpgKeyForAuthenticated: [Function],
        createGpgKeyForAuthenticatedUser: [Function],
        createPublicSshKeyForAuthenticated: [Function],
        createPublicSshKeyForAuthenticatedUser: [Function],
        createSshSigningKeyForAuthenticatedUser: [Function],
        deleteEmailForAuthenticated: [Function],
        deleteEmailForAuthenticatedUser: [Function],
        deleteGpgKeyForAuthenticated: [Function],
        deleteGpgKeyForAuthenticatedUser: [Function],
        deletePublicSshKeyForAuthenticated: [Function],
        deletePublicSshKeyForAuthenticatedUser: [Function],
        deleteSshSigningKeyForAuthenticatedUser: [Function],
        follow: [Function],
        getAuthenticated: [Function],
        getByUsername: [Function],
        getContextForUser: [Function],
        getGpgKeyForAuthenticated: [Function],
        getGpgKeyForAuthenticatedUser: [Function],
        getPublicSshKeyForAuthenticated: [Function],
        getPublicSshKeyForAuthenticatedUser: [Function],
        getSshSigningKeyForAuthenticatedUser: [Function],
        list: [Function],
        listBlockedByAuthenticated: [Function],
        listBlockedByAuthenticatedUser: [Function],
        listEmailsForAuthenticated: [Function],
        listEmailsForAuthenticatedUser: [Function],
        listFollowedByAuthenticated: [Function],
        listFollowedByAuthenticatedUser: [Function],
        listFollowersForAuthenticatedUser: [Function],
        listFollowersForUser: [Function],
        listFollowingForUser: [Function],
        listGpgKeysForAuthenticated: [Function],
        listGpgKeysForAuthenticatedUser: [Function],
        listGpgKeysForUser: [Function],
        listPublicEmailsForAuthenticated: [Function],
        listPublicEmailsForAuthenticatedUser: [Function],
        listPublicKeysForUser: [Function],
        listPublicSshKeysForAuthenticated: [Function],
        listPublicSshKeysForAuthenticatedUser: [Function],
        listSshSigningKeysForAuthenticatedUser: [Function],
        listSshSigningKeysForUser: [Function],
        setPrimaryEmailVisibilityForAuthenticated: [Function],
        setPrimaryEmailVisibilityForAuthenticatedUser: [Function],
        unblock: [Function],
        unfollow: [Function],
        updateAuthenticated: [Function]
      },
      rest: {
        actions: [Object],
        activity: [Object],
        apps: [Object],
        billing: [Object],
        checks: [Object],
        codeScanning: [Object],
        codesOfConduct: [Object],
        codespaces: [Object],
        dependabot: [Object],
        dependencyGraph: [Object],
        emojis: [Object],
        enterpriseAdmin: [Object],
        gists: [Object],
        git: [Object],
        gitignore: [Object],
        interactions: [Object],
        issues: [Object],
        licenses: [Object],
        markdown: [Object],
        meta: [Object],
        migrations: [Object],
        orgs: [Object],
        packages: [Object],
        projects: [Object],
        pulls: [Object],
        rateLimit: [Object],
        reactions: [Object],
        repos: [Object],
        search: [Object],
        secretScanning: [Object],
        teams: [Object],
        users: [Object]
      },
      paginate: [Function: bound paginate] { iterator: [Function: bound iterator] }
    },
    request: [Function: newApi] {
      endpoint: [Function: bound endpointWithDefaults] {
        DEFAULTS: [Object],
        defaults: [Function: bound withDefaults],
        merge: [Function: bound merge],
        parse: [Function: parse]
      },
      defaults: [Function: bound withDefaults]
    },
    graphql: [Function: newApi] {
      defaults: [Function: bound withDefaults],
      endpoint: [Function: bound endpointWithDefaults] {
        DEFAULTS: [Object],
        defaults: [Function: bound withDefaults],
        merge: [Function: bound merge],
        parse: [Function: parse]
      }
    },
    fileCache: RepositoryFileCache {
      octokit: OctokitWithDefaults {
        request: [Function],
        graphql: [Function],
        log: [Object],
        hook: [Function],
        auth: [AsyncFunction],
        actions: [Object],
        activity: [Object],
        apps: [Object],
        billing: [Object],
        checks: [Object],
        codeScanning: [Object],
        codesOfConduct: [Object],
        codespaces: [Object],
        dependabot: [Object],
        dependencyGraph: [Object],
        emojis: [Object],
        enterpriseAdmin: [Object],
        gists: [Object],
        git: [Object],
        gitignore: [Object],
        interactions: [Object],
        issues: [Object],
        licenses: [Object],
        markdown: [Object],
        meta: [Object],
        migrations: [Object],
        orgs: [Object],
        packages: [Object],
        projects: [Object],
        pulls: [Object],
        rateLimit: [Object],
        reactions: [Object],
        repos: [Object],
        search: [Object],
        secretScanning: [Object],
        teams: [Object],
        users: [Object],
        rest: [Object],
        paginate: [Function]
      },
      repository: {
        owner: 'chingor13',
        repo: 'google-auth-library-java',
        defaultBranch: 'master'
      },
      cache: Map(0) {}
    },
    logger: GCFLogger {
      destination: SonicBoom {
        _bufs: [],
        _len: 0,
        fd: 1,
        _writing: false,
        _writingBuf: '',
        _ending: false,
        _reopening: false,
        _asyncDrainScheduled: true,
        _hwm: 16387,
        file: null,
        destroyed: false,
        minLength: 0,
        maxLength: 0,
        maxWrite: 16384,
        sync: true,
        _fsync: false,
        append: true,
        mode: undefined,
        retryEAGAIN: [Function (anonymous)],
        mkdir: false,
        release: [Function (anonymous)],
        _events: [Object: null prototype],
        _eventsCount: 2
      },
      pino: EventEmitter {
        levels: [Object],
        silent: [Function: noop],
        onChild: [Function: noop],
        trace: [Function: LOG],
        debug: [Function: LOG],
        info: [Function: LOG],
        warn: [Function: LOG],
        error: [Function: LOG],
        fatal: [Function (anonymous)],
        metric: [Function: LOG],
        [Symbol(pino.useOnlyCustomLevels)]: false,
        [Symbol(pino.stream)]: [SonicBoom],
        [Symbol(pino.time)]: [Function: nullTime],
        [Symbol(pino.timeSliceIndex)]: 0,
        [Symbol(pino.stringify)]: [Function: stringify],
        [Symbol(pino.stringifySafe)]: [Function: stringify],
        [Symbol(pino.stringifiers)]: {},
        [Symbol(pino.end)]: '}\n',
        [Symbol(pino.formatOpts)]: [Object],
        [Symbol(pino.messageKey)]: 'message',
        [Symbol(pino.errorKey)]: 'err',
        [Symbol(pino.nestedKey)]: null,
        [Symbol(pino.nestedKeyStr)]: '',
        [Symbol(pino.serializers)]: [Object],
        [Symbol(pino.mixin)]: undefined,
        [Symbol(pino.mixinMergeStrategy)]: undefined,
        [Symbol(pino.chindings)]: '',
        [Symbol(pino.formatters)]: [Object],
        [Symbol(pino.hooks)]: [Object],
        [Symbol(pino.lsCache)]: [Object],
        [Symbol(pino.levelVal)]: 10
      },
      trace: [Function: bound trace],
      debug: [Function: bound debug],
      info: [Function: bound info],
      warn: [Function: bound warn],
      metric: [Function: bound metric],
      error: [Function: bound error],
      child: [Function: bound child]
    }
  }, 'master', undefined, undefined, {
    logger: GCFLogger {
      destination: SonicBoom {
        _bufs: [],
        _len: 0,
        fd: 1,
        _writing: false,
        _writingBuf: '',
        _ending: false,
        _reopening: false,
        _asyncDrainScheduled: true,
        _hwm: 16387,
        file: null,
        destroyed: false,
        minLength: 0,
        maxLength: 0,
        maxWrite: 16384,
        sync: true,
        _fsync: false,
        append: true,
        mode: undefined,
        retryEAGAIN: [Function (anonymous)],
        mkdir: false,
        release: [Function (anonymous)],
        _events: [Object: null prototype],
        _eventsCount: 2
      },
      pino: EventEmitter {
        levels: [Object],
        silent: [Function: noop],
        onChild: [Function: noop],
        trace: [Function: LOG],
        debug: [Function: LOG],
        info: [Function: LOG],
        warn: [Function: LOG],
        error: [Function: LOG],
        fatal: [Function (anonymous)],
        metric: [Function: LOG],
        [Symbol(pino.useOnlyCustomLevels)]: false,
        [Symbol(pino.stream)]: [SonicBoom],
        [Symbol(pino.time)]: [Function: nullTime],
        [Symbol(pino.timeSliceIndex)]: 0,
        [Symbol(pino.stringify)]: [Function: stringify],
        [Symbol(pino.stringifySafe)]: [Function: stringify],
        [Symbol(pino.stringifiers)]: {},
        [Symbol(pino.end)]: '}\n',
        [Symbol(pino.formatOpts)]: [Object],
        [Symbol(pino.messageKey)]: 'message',
        [Symbol(pino.errorKey)]: 'err',
        [Symbol(pino.nestedKey)]: null,
        [Symbol(pino.nestedKeyStr)]: '',
        [Symbol(pino.serializers)]: [Object],
        [Symbol(pino.mixin)]: undefined,
        [Symbol(pino.mixinMergeStrategy)]: undefined,
        [Symbol(pino.chindings)]: '',
        [Symbol(pino.formatters)]: [Object],
        [Symbol(pino.hooks)]: [Object],
        [Symbol(pino.lsCache)]: [Object],
        [Symbol(pino.levelVal)]: 10
      },
      trace: [Function: bound trace],
      debug: [Function: bound debug],
      info: [Function: bound info],
      warn: [Function: bound warn],
      metric: [Function: bound metric],
      error: [Function: bound error],
      child: [Function: bound child]
    }
  }) => Promise {
    Manifest {
      repository: { owner: 'fake', repo: 'fake', defaultBranch: 'main' },
      github: GitHub {
        getCommitFiles: [AsyncFunction (anonymous)],
        graphqlRequest: [AsyncFunction (anonymous)],
        findFilesByFilenameAndRef: [AsyncFunction (anonymous)],
        findFilesByGlobAndRef: [AsyncFunction (anonymous)],
        createPullRequest: [AsyncFunction (anonymous)],
        getPullRequest: [AsyncFunction (anonymous)],
        updatePullRequest: [AsyncFunction (anonymous)],
        findFilesByExtensionAndRef: [AsyncFunction (anonymous)],
        createRelease: [AsyncFunction (anonymous)],
        commentOnIssue: [AsyncFunction (anonymous)],
        removeIssueLabels: [AsyncFunction (anonymous)],
        addIssueLabels: [AsyncFunction (anonymous)],
        repository: [Object],
        octokit: [OctokitWithDefaults],
        request: [Function],
        graphql: [Function],
        fileCache: [RepositoryFileCache],
        logger: [GCFLogger]
      },
      targetBranch: 'main',
      repositoryConfig: {},
      releasedVersions: {},
      manifestPath: '.release-please-manifest.json',
      separatePullRequests: false,
      fork: false,
      signoffUser: undefined,
      releaseLabels: [ 'autorelease: tagged' ],
      labels: [ 'autorelease: pending' ],
      skipLabeling: false,
      sequentialCalls: false,
      snapshotLabels: [ 'autorelease: snapshot' ],
      bootstrapSha: undefined,
      lastReleaseSha: undefined,
      draft: undefined,
      draftPullRequest: undefined,
      groupPullRequestTitlePattern: undefined,
      releaseSearchDepth: 400,
      commitSearchDepth: 500,
      logger: GCFLogger {
        destination: [SonicBoom],
        pino: [EventEmitter],
        trace: [Function: bound trace],
        debug: [Function: bound debug],
        info: [Function: bound info],
        warn: [Function: bound warn],
        metric: [Function: bound metric],
        error: [Function: bound error],
        child: [Function: bound child]
      },
      plugins: [],
      pullRequestOverflowHandler: FilePullRequestOverflowHandler {
        github: [GitHub],
        logger: [GCFLogger]
      }
    }
  } at null.buildManifest (src/release-please.ts:206:27)
  
      fromManifest(GitHub {
    getCommitFiles: [AsyncFunction (anonymous)],
    graphqlRequest: [AsyncFunction (anonymous)],
    findFilesByFilenameAndRef: [AsyncFunction (anonymous)],
    findFilesByGlobAndRef: [AsyncFunction (anonymous)],
    createPullRequest: [AsyncFunction (anonymous)],
    getPullRequest: [AsyncFunction (anonymous)],
    updatePullRequest: [AsyncFunction (anonymous)],
    findFilesByExtensionAndRef: [AsyncFunction (anonymous)],
    createRelease: [AsyncFunction (anonymous)],
    commentOnIssue: [AsyncFunction (anonymous)],
    removeIssueLabels: [AsyncFunction (anonymous)],
    addIssueLabels: [AsyncFunction (anonymous)],
    repository: {
      owner: 'chingor13',
      repo: 'google-auth-library-java',
      defaultBranch: 'master'
    },
    octokit: OctokitWithDefaults {
      request: [Function: newApi] {
        endpoint: [Function],
        defaults: [Function: bound withDefaults]
      },
      graphql: [Function: newApi] {
        defaults: [Function: bound withDefaults],
        endpoint: [Function]
      },
      log: {
        debug: [Function: debug],
        info: [Function: info],
        warn: [Function: bound warn],
        error: [Function: bound error]
      },
      hook: [Function: bound register] {
        api: [Object],
        remove: [Function: bound removeHook],
        before: [Function: bound addHook],
        error: [Function: bound addHook],
        after: [Function: bound addHook],
        wrap: [Function: bound addHook]
      },
      auth: [Function: bound auth] AsyncFunction {
        hook: [Function: bound hook] AsyncFunction
      },
      actions: {
        addCustomLabelsToSelfHostedRunnerForOrg: [Function],
        addCustomLabelsToSelfHostedRunnerForRepo: [Function],
        addSelectedRepoToOrgSecret: [Function],
        approveWorkflowRun: [Function],
        cancelWorkflowRun: [Function],
        createOrUpdateEnvironmentSecret: [Function],
        createOrUpdateOrgSecret: [Function],
        createOrUpdateRepoSecret: [Function],
        createRegistrationTokenForOrg: [Function],
        createRegistrationTokenForRepo: [Function],
        createRemoveTokenForOrg: [Function],
        createRemoveTokenForRepo: [Function],
        createWorkflowDispatch: [Function],
        deleteActionsCacheById: [Function],
        deleteActionsCacheByKey: [Function],
        deleteArtifact: [Function],
        deleteEnvironmentSecret: [Function],
        deleteOrgSecret: [Function],
        deleteRepoSecret: [Function],
        deleteSelfHostedRunnerFromOrg: [Function],
        deleteSelfHostedRunnerFromRepo: [Function],
        deleteWorkflowRun: [Function],
        deleteWorkflowRunLogs: [Function],
        disableSelectedRepositoryGithubActionsOrganization: [Function],
        disableWorkflow: [Function],
        downloadArtifact: [Function],
        downloadJobLogsForWorkflowRun: [Function],
        downloadWorkflowRunAttemptLogs: [Function],
        downloadWorkflowRunLogs: [Function],
        enableSelectedRepositoryGithubActionsOrganization: [Function],
        enableWorkflow: [Function],
        getActionsCacheList: [Function],
        getActionsCacheUsage: [Function],
        getActionsCacheUsageByRepoForOrg: [Function],
        getActionsCacheUsageForEnterprise: [Function],
        getActionsCacheUsageForOrg: [Function],
        getAllowedActionsOrganization: [Function],
        getAllowedActionsRepository: [Function],
        getArtifact: [Function],
        getEnvironmentPublicKey: [Function],
        getEnvironmentSecret: [Function],
        getGithubActionsDefaultWorkflowPermissionsEnterprise: [Function],
        getGithubActionsDefaultWorkflowPermissionsOrganization: [Function],
        getGithubActionsDefaultWorkflowPermissionsRepository: [Function],
        getGithubActionsPermissionsOrganization: [Function],
        getGithubActionsPermissionsRepository: [Function],
        getJobForWorkflowRun: [Function],
        getOrgPublicKey: [Function],
        getOrgSecret: [Function],
        getPendingDeploymentsForRun: [Function],
        getRepoPermissions: [Function],
        getRepoPublicKey: [Function],
        getRepoSecret: [Function],
        getReviewsForRun: [Function],
        getSelfHostedRunnerForOrg: [Function],
        getSelfHostedRunnerForRepo: [Function],
        getWorkflow: [Function],
        getWorkflowAccessToRepository: [Function],
        getWorkflowRun: [Function],
        getWorkflowRunAttempt: [Function],
        getWorkflowRunUsage: [Function],
        getWorkflowUsage: [Function],
        listArtifactsForRepo: [Function],
        listEnvironmentSecrets: [Function],
        listJobsForWorkflowRun: [Function],
        listJobsForWorkflowRunAttempt: [Function],
        listLabelsForSelfHostedRunnerForOrg: [Function],
        listLabelsForSelfHostedRunnerForRepo: [Function],
        listOrgSecrets: [Function],
        listRepoSecrets: [Function],
        listRepoWorkflows: [Function],
        listRunnerApplicationsForOrg: [Function],
        listRunnerApplicationsForRepo: [Function],
        listSelectedReposForOrgSecret: [Function],
        listSelectedRepositoriesEnabledGithubActionsOrganization: [Function],
        listSelfHostedRunnersForOrg: [Function],
        listSelfHostedRunnersForRepo: [Function],
        listWorkflowRunArtifacts: [Function],
        listWorkflowRuns: [Function],
        listWorkflowRunsForRepo: [Function],
        reRunJobForWorkflowRun: [Function],
        reRunWorkflow: [Function],
        reRunWorkflowFailedJobs: [Function],
        removeAllCustomLabelsFromSelfHostedRunnerForOrg: [Function],
        removeAllCustomLabelsFromSelfHostedRunnerForRepo: [Function],
        removeCustomLabelFromSelfHostedRunnerForOrg: [Function],
        removeCustomLabelFromSelfHostedRunnerForRepo: [Function],
        removeSelectedRepoFromOrgSecret: [Function],
        reviewPendingDeploymentsForRun: [Function],
        setAllowedActionsOrganization: [Function],
        setAllowedActionsRepository: [Function],
        setCustomLabelsForSelfHostedRunnerForOrg: [Function],
        setCustomLabelsForSelfHostedRunnerForRepo: [Function],
        setGithubActionsDefaultWorkflowPermissionsEnterprise: [Function],
        setGithubActionsDefaultWorkflowPermissionsOrganization: [Function],
        setGithubActionsDefaultWorkflowPermissionsRepository: [Function],
        setGithubActionsPermissionsOrganization: [Function],
        setGithubActionsPermissionsRepository: [Function],
        setSelectedReposForOrgSecret: [Function],
        setSelectedRepositoriesEnabledGithubActionsOrganization: [Function],
        setWorkflowAccessToRepository: [Function]
      },
      activity: {
        checkRepoIsStarredByAuthenticatedUser: [Function],
        deleteRepoSubscription: [Function],
        deleteThreadSubscription: [Function],
        getFeeds: [Function],
        getRepoSubscription: [Function],
        getThread: [Function],
        getThreadSubscriptionForAuthenticatedUser: [Function],
        listEventsForAuthenticatedUser: [Function],
        listNotificationsForAuthenticatedUser: [Function],
        listOrgEventsForAuthenticatedUser: [Function],
        listPublicEvents: [Function],
        listPublicEventsForRepoNetwork: [Function],
        listPublicEventsForUser: [Function],
        listPublicOrgEvents: [Function],
        listReceivedEventsForUser: [Function],
        listReceivedPublicEventsForUser: [Function],
        listRepoEvents: [Function],
        listRepoNotificationsForAuthenticatedUser: [Function],
        listReposStarredByAuthenticatedUser: [Function],
        listReposStarredByUser: [Function],
        listReposWatchedByUser: [Function],
        listStargazersForRepo: [Function],
        listWatchedReposForAuthenticatedUser: [Function],
        listWatchersForRepo: [Function],
        markNotificationsAsRead: [Function],
        markRepoNotificationsAsRead: [Function],
        markThreadAsRead: [Function],
        setRepoSubscription: [Function],
        setThreadSubscription: [Function],
        starRepoForAuthenticatedUser: [Function],
        unstarRepoForAuthenticatedUser: [Function]
      },
      apps: {
        addRepoToInstallation: [Function],
        addRepoToInstallationForAuthenticatedUser: [Function],
        checkToken: [Function],
        createFromManifest: [Function],
        createInstallationAccessToken: [Function],
        deleteAuthorization: [Function],
        deleteInstallation: [Function],
        deleteToken: [Function],
        getAuthenticated: [Function],
        getBySlug: [Function],
        getInstallation: [Function],
        getOrgInstallation: [Function],
        getRepoInstallation: [Function],
        getSubscriptionPlanForAccount: [Function],
        getSubscriptionPlanForAccountStubbed: [Function],
        getUserInstallation: [Function],
        getWebhookConfigForApp: [Function],
        getWebhookDelivery: [Function],
        listAccountsForPlan: [Function],
        listAccountsForPlanStubbed: [Function],
        listInstallationReposForAuthenticatedUser: [Function],
        listInstallations: [Function],
        listInstallationsForAuthenticatedUser: [Function],
        listPlans: [Function],
        listPlansStubbed: [Function],
        listReposAccessibleToInstallation: [Function],
        listSubscriptionsForAuthenticatedUser: [Function],
        listSubscriptionsForAuthenticatedUserStubbed: [Function],
        listWebhookDeliveries: [Function],
        redeliverWebhookDelivery: [Function],
        removeRepoFromInstallation: [Function],
        removeRepoFromInstallationForAuthenticatedUser: [Function],
        resetToken: [Function],
        revokeInstallationAccessToken: [Function],
        scopeToken: [Function],
        suspendInstallation: [Function],
        unsuspendInstallation: [Function],
        updateWebhookConfigForApp: [Function]
      },
      billing: {
        getGithubActionsBillingOrg: [Function],
        getGithubActionsBillingUser: [Function],
        getGithubAdvancedSecurityBillingGhe: [Function],
        getGithubAdvancedSecurityBillingOrg: [Function],
        getGithubPackagesBillingOrg: [Function],
        getGithubPackagesBillingUser: [Function],
        getSharedStorageBillingOrg: [Function],
        getSharedStorageBillingUser: [Function]
      },
      checks: {
        create: [Function],
        createSuite: [Function],
        get: [Function],
        getSuite: [Function],
        listAnnotations: [Function],
        listForRef: [Function],
        listForSuite: [Function],
        listSuitesForRef: [Function],
        rerequestRun: [Function],
        rerequestSuite: [Function],
        setSuitesPreferences: [Function],
        update: [Function]
      },
      codeScanning: {
        deleteAnalysis: [Function],
        getAlert: [Function],
        getAnalysis: [Function],
        getCodeqlDatabase: [Function],
        getSarif: [Function],
        listAlertInstances: [Function],
        listAlertsForEnterprise: [Function],
        listAlertsForOrg: [Function],
        listAlertsForRepo: [Function],
        listAlertsInstances: [Function],
        listCodeqlDatabases: [Function],
        listRecentAnalyses: [Function],
        updateAlert: [Function],
        uploadSarif: [Function]
      },
      codesOfConduct: { getAllCodesOfConduct: [Function], getConductCode: [Function] },
      codespaces: {
        addRepositoryForSecretForAuthenticatedUser: [Function],
        addSelectedRepoToOrgSecret: [Function],
        codespaceMachinesForAuthenticatedUser: [Function],
        createForAuthenticatedUser: [Function],
        createOrUpdateOrgSecret: [Function],
        createOrUpdateRepoSecret: [Function],
        createOrUpdateSecretForAuthenticatedUser: [Function],
        createWithPrForAuthenticatedUser: [Function],
        createWithRepoForAuthenticatedUser: [Function],
        deleteForAuthenticatedUser: [Function],
        deleteFromOrganization: [Function],
        deleteOrgSecret: [Function],
        deleteRepoSecret: [Function],
        deleteSecretForAuthenticatedUser: [Function],
        exportForAuthenticatedUser: [Function],
        getExportDetailsForAuthenticatedUser: [Function],
        getForAuthenticatedUser: [Function],
        getOrgPublicKey: [Function],
        getOrgSecret: [Function],
        getPublicKeyForAuthenticatedUser: [Function],
        getRepoPublicKey: [Function],
        getRepoSecret: [Function],
        getSecretForAuthenticatedUser: [Function],
        listDevcontainersInRepositoryForAuthenticatedUser: [Function],
        listForAuthenticatedUser: [Function],
        listInOrganization: [Function],
        listInRepositoryForAuthenticatedUser: [Function],
        listOrgSecrets: [Function],
        listRepoSecrets: [Function],
        listRepositoriesForSecretForAuthenticatedUser: [Function],
        listSecretsForAuthenticatedUser: [Function],
        listSelectedReposForOrgSecret: [Function],
        preFlightWithRepoForAuthenticatedUser: [Function],
        removeRepositoryForSecretForAuthenticatedUser: [Function],
        removeSelectedRepoFromOrgSecret: [Function],
        repoMachinesForAuthenticatedUser: [Function],
        setRepositoriesForSecretForAuthenticatedUser: [Function],
        setSelectedReposForOrgSecret: [Function],
        startForAuthenticatedUser: [Function],
        stopForAuthenticatedUser: [Function],
        stopInOrganization: [Function],
        updateForAuthenticatedUser: [Function]
      },
      dependabot: {
        addSelectedRepoToOrgSecret: [Function],
        createOrUpdateOrgSecret: [Function],
        createOrUpdateRepoSecret: [Function],
        deleteOrgSecret: [Function],
        deleteRepoSecret: [Function],
        getAlert: [Function],
        getOrgPublicKey: [Function],
        getOrgSecret: [Function],
        getRepoPublicKey: [Function],
        getRepoSecret: [Function],
        listAlertsForRepo: [Function],
        listOrgSecrets: [Function],
        listRepoSecrets: [Function],
        listSelectedReposForOrgSecret: [Function],
        removeSelectedRepoFromOrgSecret: [Function],
        setSelectedReposForOrgSecret: [Function],
        updateAlert: [Function]
      },
      dependencyGraph: { createRepositorySnapshot: [Function], diffRange: [Function] },
      emojis: { get: [Function] },
      enterpriseAdmin: {
        addCustomLabelsToSelfHostedRunnerForEnterprise: [Function],
        disableSelectedOrganizationGithubActionsEnterprise: [Function],
        enableSelectedOrganizationGithubActionsEnterprise: [Function],
        getAllowedActionsEnterprise: [Function],
        getGithubActionsPermissionsEnterprise: [Function],
        getServerStatistics: [Function],
        listLabelsForSelfHostedRunnerForEnterprise: [Function],
        listSelectedOrganizationsEnabledGithubActionsEnterprise: [Function],
        removeAllCustomLabelsFromSelfHostedRunnerForEnterprise: [Function],
        removeCustomLabelFromSelfHostedRunnerForEnterprise: [Function],
        setAllowedActionsEnterprise: [Function],
        setCustomLabelsForSelfHostedRunnerForEnterprise: [Function],
        setGithubActionsPermissionsEnterprise: [Function],
        setSelectedOrganizationsEnabledGithubActionsEnterprise: [Function]
      },
      gists: {
        checkIsStarred: [Function],
        create: [Function],
        createComment: [Function],
        delete: [Function],
        deleteComment: [Function],
        fork: [Function],
        get: [Function],
        getComment: [Function],
        getRevision: [Function],
        list: [Function],
        listComments: [Function],
        listCommits: [Function],
        listForUser: [Function],
        listForks: [Function],
        listPublic: [Function],
        listStarred: [Function],
        star: [Function],
        unstar: [Function],
        update: [Function],
        updateComment: [Function]
      },
      git: {
        createBlob: [Function],
        createCommit: [Function],
        createRef: [Function],
        createTag: [Function],
        createTree: [Function],
        deleteRef: [Function],
        getBlob: [Function],
        getCommit: [Function],
        getRef: [Function],
        getTag: [Function],
        getTree: [Function],
        listMatchingRefs: [Function],
        updateRef: [Function]
      },
      gitignore: { getAllTemplates: [Function], getTemplate: [Function] },
      interactions: {
        getRestrictionsForAuthenticatedUser: [Function],
        getRestrictionsForOrg: [Function],
        getRestrictionsForRepo: [Function],
        getRestrictionsForYourPublicRepos: [Function],
        removeRestrictionsForAuthenticatedUser: [Function],
        removeRestrictionsForOrg: [Function],
        removeRestrictionsForRepo: [Function],
        removeRestrictionsForYourPublicRepos: [Function],
        setRestrictionsForAuthenticatedUser: [Function],
        setRestrictionsForOrg: [Function],
        setRestrictionsForRepo: [Function],
        setRestrictionsForYourPublicRepos: [Function]
      },
      issues: {
        addAssignees: [Function],
        addLabels: [Function],
        checkUserCanBeAssigned: [Function],
        create: [Function],
        createComment: [Function],
        createLabel: [Function],
        createMilestone: [Function],
        deleteComment: [Function],
        deleteLabel: [Function],
        deleteMilestone: [Function],
        get: [Function],
        getComment: [Function],
        getEvent: [Function],
        getLabel: [Function],
        getMilestone: [Function],
        list: [Function],
        listAssignees: [Function],
        listComments: [Function],
        listCommentsForRepo: [Function],
        listEvents: [Function],
        listEventsForRepo: [Function],
        listEventsForTimeline: [Function],
        listForAuthenticatedUser: [Function],
        listForOrg: [Function],
        listForRepo: [Function],
        listLabelsForMilestone: [Function],
        listLabelsForRepo: [Function],
        listLabelsOnIssue: [Function],
        listMilestones: [Function],
        lock: [Function],
        removeAllLabels: [Function],
        removeAssignees: [Function],
        removeLabel: [Function],
        setLabels: [Function],
        unlock: [Function],
        update: [Function],
        updateComment: [Function],
        updateLabel: [Function],
        updateMilestone: [Function]
      },
      licenses: {
        get: [Function],
        getAllCommonlyUsed: [Function],
        getForRepo: [Function]
      },
      markdown: { render: [Function], renderRaw: [Function] },
      meta: {
        get: [Function],
        getOctocat: [Function],
        getZen: [Function],
        root: [Function]
      },
      migrations: {
        cancelImport: [Function],
        deleteArchiveForAuthenticatedUser: [Function],
        deleteArchiveForOrg: [Function],
        downloadArchiveForOrg: [Function],
        getArchiveForAuthenticatedUser: [Function],
        getCommitAuthors: [Function],
        getImportStatus: [Function],
        getLargeFiles: [Function],
        getStatusForAuthenticatedUser: [Function],
        getStatusForOrg: [Function],
        listForAuthenticatedUser: [Function],
        listForOrg: [Function],
        listReposForAuthenticatedUser: [Function],
        listReposForOrg: [Function],
        listReposForUser: [Function],
        mapCommitAuthor: [Function],
        setLfsPreference: [Function],
        startForAuthenticatedUser: [Function],
        startForOrg: [Function],
        startImport: [Function],
        unlockRepoForAuthenticatedUser: [Function],
        unlockRepoForOrg: [Function],
        updateImport: [Function]
      },
      orgs: {
        addSecurityManagerTeam: [Function],
        blockUser: [Function],
        cancelInvitation: [Function],
        checkBlockedUser: [Function],
        checkMembershipForUser: [Function],
        checkPublicMembershipForUser: [Function],
        convertMemberToOutsideCollaborator: [Function],
        createCustomRole: [Function],
        createInvitation: [Function],
        createWebhook: [Function],
        deleteCustomRole: [Function],
        deleteWebhook: [Function],
        enableOrDisableSecurityProductOnAllOrgRepos: [Function],
        get: [Function],
        getMembershipForAuthenticatedUser: [Function],
        getMembershipForUser: [Function],
        getWebhook: [Function],
        getWebhookConfigForOrg: [Function],
        getWebhookDelivery: [Function],
        list: [Function],
        listAppInstallations: [Function],
        listBlockedUsers: [Function],
        listCustomRoles: [Function],
        listFailedInvitations: [Function],
        listFineGrainedPermissions: [Function],
        listForAuthenticatedUser: [Function],
        listForUser: [Function],
        listInvitationTeams: [Function],
        listMembers: [Function],
        listMembershipsForAuthenticatedUser: [Function],
        listOutsideCollaborators: [Function],
        listPendingInvitations: [Function],
        listPublicMembers: [Function],
        listSecurityManagerTeams: [Function],
        listWebhookDeliveries: [Function],
        listWebhooks: [Function],
        pingWebhook: [Function],
        redeliverWebhookDelivery: [Function],
        removeMember: [Function],
        removeMembershipForUser: [Function],
        removeOutsideCollaborator: [Function],
        removePublicMembershipForAuthenticatedUser: [Function],
        removeSecurityManagerTeam: [Function],
        setMembershipForUser: [Function],
        setPublicMembershipForAuthenticatedUser: [Function],
        unblockUser: [Function],
        update: [Function],
        updateCustomRole: [Function],
        updateMembershipForAuthenticatedUser: [Function],
        updateWebhook: [Function],
        updateWebhookConfigForOrg: [Function]
      },
      packages: {
        deletePackageForAuthenticatedUser: [Function],
        deletePackageForOrg: [Function],
        deletePackageForUser: [Function],
        deletePackageVersionForAuthenticatedUser: [Function],
        deletePackageVersionForOrg: [Function],
        deletePackageVersionForUser: [Function],
        getAllPackageVersionsForAPackageOwnedByAnOrg: [Function],
        getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [Function],
        getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [Function],
        getAllPackageVersionsForPackageOwnedByOrg: [Function],
        getAllPackageVersionsForPackageOwnedByUser: [Function],
        getPackageForAuthenticatedUser: [Function],
        getPackageForOrganization: [Function],
        getPackageForUser: [Function],
        getPackageVersionForAuthenticatedUser: [Function],
        getPackageVersionForOrganization: [Function],
        getPackageVersionForUser: [Function],
        listPackagesForAuthenticatedUser: [Function],
        listPackagesForOrganization: [Function],
        listPackagesForUser: [Function],
        restorePackageForAuthenticatedUser: [Function],
        restorePackageForOrg: [Function],
        restorePackageForUser: [Function],
        restorePackageVersionForAuthenticatedUser: [Function],
        restorePackageVersionForOrg: [Function],
        restorePackageVersionForUser: [Function]
      },
      projects: {
        addCollaborator: [Function],
        createCard: [Function],
        createColumn: [Function],
        createForAuthenticatedUser: [Function],
        createForOrg: [Function],
        createForRepo: [Function],
        delete: [Function],
        deleteCard: [Function],
        deleteColumn: [Function],
        get: [Function],
        getCard: [Function],
        getColumn: [Function],
        getPermissionForUser: [Function],
        listCards: [Function],
        listCollaborators: [Function],
        listColumns: [Function],
        listForOrg: [Function],
        listForRepo: [Function],
        listForUser: [Function],
        moveCard: [Function],
        moveColumn: [Function],
        removeCollaborator: [Function],
        update: [Function],
        updateCard: [Function],
        updateColumn: [Function]
      },
      pulls: {
        checkIfMerged: [Function],
        create: [Function],
        createReplyForReviewComment: [Function],
        createReview: [Function],
        createReviewComment: [Function],
        deletePendingReview: [Function],
        deleteReviewComment: [Function],
        dismissReview: [Function],
        get: [Function],
        getReview: [Function],
        getReviewComment: [Function],
        list: [Function],
        listCommentsForReview: [Function],
        listCommits: [Function],
        listFiles: [Function],
        listRequestedReviewers: [Function],
        listReviewComments: [Function],
        listReviewCommentsForRepo: [Function],
        listReviews: [Function],
        merge: [Function],
        removeRequestedReviewers: [Function],
        requestReviewers: [Function],
        submitReview: [Function],
        update: [Function],
        updateBranch: [Function],
        updateReview: [Function],
        updateReviewComment: [Function]
      },
      rateLimit: { get: [Function] },
      reactions: {
        createForCommitComment: [Function],
        createForIssue: [Function],
        createForIssueComment: [Function],
        createForPullRequestReviewComment: [Function],
        createForRelease: [Function],
        createForTeamDiscussionCommentInOrg: [Function],
        createForTeamDiscussionInOrg: [Function],
        deleteForCommitComment: [Function],
        deleteForIssue: [Function],
        deleteForIssueComment: [Function],
        deleteForPullRequestComment: [Function],
        deleteForRelease: [Function],
        deleteForTeamDiscussion: [Function],
        deleteForTeamDiscussionComment: [Function],
        listForCommitComment: [Function],
        listForIssue: [Function],
        listForIssueComment: [Function],
        listForPullRequestReviewComment: [Function],
        listForRelease: [Function],
        listForTeamDiscussionCommentInOrg: [Function],
        listForTeamDiscussionInOrg: [Function]
      },
      repos: {
        acceptInvitation: [Function],
        acceptInvitationForAuthenticatedUser: [Function],
        addAppAccessRestrictions: [Function],
        addCollaborator: [Function],
        addStatusCheckContexts: [Function],
        addTeamAccessRestrictions: [Function],
        addUserAccessRestrictions: [Function],
        checkCollaborator: [Function],
        checkVulnerabilityAlerts: [Function],
        codeownersErrors: [Function],
        compareCommits: [Function],
        compareCommitsWithBasehead: [Function],
        createAutolink: [Function],
        createCommitComment: [Function],
        createCommitSignatureProtection: [Function],
        createCommitStatus: [Function],
        createDeployKey: [Function],
        createDeployment: [Function],
        createDeploymentBranchPolicy: [Function],
        createDeploymentStatus: [Function],
        createDispatchEvent: [Function],
        createForAuthenticatedUser: [Function],
        createFork: [Function],
        createInOrg: [Function],
        createOrUpdateEnvironment: [Function],
        createOrUpdateFileContents: [Function],
        createPagesDeployment: [Function],
        createPagesSite: [Function],
        createRelease: [Function],
        createTagProtection: [Function],
        createUsingTemplate: [Function],
        createWebhook: [Function],
        declineInvitation: [Function],
        declineInvitationForAuthenticatedUser: [Function],
        delete: [Function],
        deleteAccessRestrictions: [Function],
        deleteAdminBranchProtection: [Function],
        deleteAnEnvironment: [Function],
        deleteAutolink: [Function],
        deleteBranchProtection: [Function],
        deleteCommitComment: [Function],
        deleteCommitSignatureProtection: [Function],
        deleteDeployKey: [Function],
        deleteDeployment: [Function],
        deleteDeploymentBranchPolicy: [Function],
        deleteFile: [Function],
        deleteInvitation: [Function],
        deletePagesSite: [Function],
        deletePullRequestReviewProtection: [Function],
        deleteRelease: [Function],
        deleteReleaseAsset: [Function],
        deleteTagProtection: [Function],
        deleteWebhook: [Function],
        disableAutomatedSecurityFixes: [Function],
        disableLfsForRepo: [Function],
        disableVulnerabilityAlerts: [Function],
        downloadArchive: [Function],
        downloadTarballArchive: [Function],
        downloadZipballArchive: [Function],
        enableAutomatedSecurityFixes: [Function],
        enableLfsForRepo: [Function],
        enableVulnerabilityAlerts: [Function],
        generateReleaseNotes: [Function],
        get: [Function],
        getAccessRestrictions: [Function],
        getAdminBranchProtection: [Function],
        getAllEnvironments: [Function],
        getAllStatusCheckContexts: [Function],
        getAllTopics: [Function],
        getAppsWithAccessToProtectedBranch: [Function],
        getAutolink: [Function],
        getBranch: [Function],
        getBranchProtection: [Function],
        getClones: [Function],
        getCodeFrequencyStats: [Function],
        getCollaboratorPermissionLevel: [Function],
        getCombinedStatusForRef: [Function],
        getCommit: [Function],
        getCommitActivityStats: [Function],
        getCommitComment: [Function],
        getCommitSignatureProtection: [Function],
        getCommunityProfileMetrics: [Function],
        getContent: [Function],
        getContributorsStats: [Function],
        getDeployKey: [Function],
        getDeployment: [Function],
        getDeploymentBranchPolicy: [Function],
        getDeploymentStatus: [Function],
        getEnvironment: [Function],
        getLatestPagesBuild: [Function],
        getLatestRelease: [Function],
        getPages: [Function],
        getPagesBuild: [Function],
        getPagesHealthCheck: [Function],
        getParticipationStats: [Function],
        getPullRequestReviewProtection: [Function],
        getPunchCardStats: [Function],
        getReadme: [Function],
        getReadmeInDirectory: [Function],
        getRelease: [Function],
        getReleaseAsset: [Function],
        getReleaseByTag: [Function],
        getStatusChecksProtection: [Function],
        getTeamsWithAccessToProtectedBranch: [Function],
        getTopPaths: [Function],
        getTopReferrers: [Function],
        getUsersWithAccessToProtectedBranch: [Function],
        getViews: [Function],
        getWebhook: [Function],
        getWebhookConfigForRepo: [Function],
        getWebhookDelivery: [Function],
        listAutolinks: [Function],
        listBranches: [Function],
        listBranchesForHeadCommit: [Function],
        listCollaborators: [Function],
        listCommentsForCommit: [Function],
        listCommitCommentsForRepo: [Function],
        listCommitStatusesForRef: [Function],
        listCommits: [Function],
        listContributors: [Function],
        listDeployKeys: [Function],
        listDeploymentBranchPolicies: [Function],
        listDeploymentStatuses: [Function],
        listDeployments: [Function],
        listForAuthenticatedUser: [Function],
        listForOrg: [Function],
        listForUser: [Function],
        listForks: [Function],
        listInvitations: [Function],
        listInvitationsForAuthenticatedUser: [Function],
        listLanguages: [Function],
        listPagesBuilds: [Function],
        listPublic: [Function],
        listPullRequestsAssociatedWithCommit: [Function],
        listReleaseAssets: [Function],
        listReleases: [Function],
        listTagProtection: [Function],
        listTags: [Function],
        listTeams: [Function],
        listWebhookDeliveries: [Function],
        listWebhooks: [Function],
        merge: [Function],
        mergeUpstream: [Function],
        pingWebhook: [Function],
        redeliverWebhookDelivery: [Function],
        removeAppAccessRestrictions: [Function],
        removeCollaborator: [Function],
        removeStatusCheckContexts: [Function],
        removeStatusCheckProtection: [Function],
        removeTeamAccessRestrictions: [Function],
        removeUserAccessRestrictions: [Function],
        renameBranch: [Function],
        replaceAllTopics: [Function],
        requestPagesBuild: [Function],
        setAdminBranchProtection: [Function],
        setAppAccessRestrictions: [Function],
        setStatusCheckContexts: [Function],
        setTeamAccessRestrictions: [Function],
        setUserAccessRestrictions: [Function],
        testPushWebhook: [Function],
        transfer: [Function],
        update: [Function],
        updateBranchProtection: [Function],
        updateCommitComment: [Function],
        updateDeploymentBranchPolicy: [Function],
        updateInformationAboutPagesSite: [Function],
        updateInvitation: [Function],
        updatePullRequestReviewProtection: [Function],
        updateRelease: [Function],
        updateReleaseAsset: [Function],
        updateStatusCheckPotection: [Function],
        updateStatusCheckProtection: [Function],
        updateWebhook: [Function],
        updateWebhookConfigForRepo: [Function],
        uploadReleaseAsset: [Function]
      },
      search: {
        code: [Function],
        commits: [Function],
        issuesAndPullRequests: [Function],
        labels: [Function],
        repos: [Function],
        topics: [Function],
        users: [Function]
      },
      secretScanning: {
        getAlert: [Function],
        listAlertsForEnterprise: [Function],
        listAlertsForOrg: [Function],
        listAlertsForRepo: [Function],
        listLocationsForAlert: [Function],
        updateAlert: [Function]
      },
      teams: {
        addOrUpdateMembershipForUserInOrg: [Function],
        addOrUpdateProjectPermissionsInOrg: [Function],
        addOrUpdateRepoPermissionsInOrg: [Function],
        checkPermissionsForProjectInOrg: [Function],
        checkPermissionsForRepoInOrg: [Function],
        create: [Function],
        createDiscussionCommentInOrg: [Function],
        createDiscussionInOrg: [Function],
        deleteDiscussionCommentInOrg: [Function],
        deleteDiscussionInOrg: [Function],
        deleteInOrg: [Function],
        getByName: [Function],
        getDiscussionCommentInOrg: [Function],
        getDiscussionInOrg: [Function],
        getMembershipForUserInOrg: [Function],
        list: [Function],
        listChildInOrg: [Function],
        listDiscussionCommentsInOrg: [Function],
        listDiscussionsInOrg: [Function],
        listForAuthenticatedUser: [Function],
        listMembersInOrg: [Function],
        listPendingInvitationsInOrg: [Function],
        listProjectsInOrg: [Function],
        listReposInOrg: [Function],
        removeMembershipForUserInOrg: [Function],
        removeProjectInOrg: [Function],
        removeRepoInOrg: [Function],
        updateDiscussionCommentInOrg: [Function],
        updateDiscussionInOrg: [Function],
        updateInOrg: [Function]
      },
      users: {
        addEmailForAuthenticated: [Function],
        addEmailForAuthenticatedUser: [Function],
        block: [Function],
        checkBlocked: [Function],
        checkFollowingForUser: [Function],
        checkPersonIsFollowedByAuthenticated: [Function],
        createGpgKeyForAuthenticated: [Function],
        createGpgKeyForAuthenticatedUser: [Function],
        createPublicSshKeyForAuthenticated: [Function],
        createPublicSshKeyForAuthenticatedUser: [Function],
        createSshSigningKeyForAuthenticatedUser: [Function],
        deleteEmailForAuthenticated: [Function],
        deleteEmailForAuthenticatedUser: [Function],
        deleteGpgKeyForAuthenticated: [Function],
        deleteGpgKeyForAuthenticatedUser: [Function],
        deletePublicSshKeyForAuthenticated: [Function],
        deletePublicSshKeyForAuthenticatedUser: [Function],
        deleteSshSigningKeyForAuthenticatedUser: [Function],
        follow: [Function],
        getAuthenticated: [Function],
        getByUsername: [Function],
        getContextForUser: [Function],
        getGpgKeyForAuthenticated: [Function],
        getGpgKeyForAuthenticatedUser: [Function],
        getPublicSshKeyForAuthenticated: [Function],
        getPublicSshKeyForAuthenticatedUser: [Function],
        getSshSigningKeyForAuthenticatedUser: [Function],
        list: [Function],
        listBlockedByAuthenticated: [Function],
        listBlockedByAuthenticatedUser: [Function],
        listEmailsForAuthenticated: [Function],
        listEmailsForAuthenticatedUser: [Function],
        listFollowedByAuthenticated: [Function],
        listFollowedByAuthenticatedUser: [Function],
        listFollowersForAuthenticatedUser: [Function],
        listFollowersForUser: [Function],
        listFollowingForUser: [Function],
        listGpgKeysForAuthenticated: [Function],
        listGpgKeysForAuthenticatedUser: [Function],
        listGpgKeysForUser: [Function],
        listPublicEmailsForAuthenticated: [Function],
        listPublicEmailsForAuthenticatedUser: [Function],
        listPublicKeysForUser: [Function],
        listPublicSshKeysForAuthenticated: [Function],
        listPublicSshKeysForAuthenticatedUser: [Function],
        listSshSigningKeysForAuthenticatedUser: [Function],
        listSshSigningKeysForUser: [Function],
        setPrimaryEmailVisibilityForAuthenticated: [Function],
        setPrimaryEmailVisibilityForAuthenticatedUser: [Function],
        unblock: [Function],
        unfollow: [Function],
        updateAuthenticated: [Function]
      },
      rest: {
        actions: [Object],
        activity: [Object],
        apps: [Object],
        billing: [Object],
        checks: [Object],
        codeScanning: [Object],
        codesOfConduct: [Object],
        codespaces: [Object],
        dependabot: [Object],
        dependencyGraph: [Object],
        emojis: [Object],
        enterpriseAdmin: [Object],
        gists: [Object],
        git: [Object],
        gitignore: [Object],
        interactions: [Object],
        issues: [Object],
        licenses: [Object],
        markdown: [Object],
        meta: [Object],
        migrations: [Object],
        orgs: [Object],
        packages: [Object],
        projects: [Object],
        pulls: [Object],
        rateLimit: [Object],
        reactions: [Object],
        repos: [Object],
        search: [Object],
        secretScanning: [Object],
        teams: [Object],
        users: [Object]
      },
      paginate: [Function: bound paginate] { iterator: [Function: bound iterator] }
    },
    request: [Function: newApi] {
      endpoint: [Function: bound endpointWithDefaults] {
        DEFAULTS: [Object],
        defaults: [Function: bound withDefaults],
        merge: [Function: bound merge],
        parse: [Function: parse]
      },
      defaults: [Function: bound withDefaults]
    },
    graphql: [Function: newApi] {
      defaults: [Function: bound withDefaults],
      endpoint: [Function: bound endpointWithDefaults] {
        DEFAULTS: [Object],
        defaults: [Function: bound withDefaults],
        merge: [Function: bound merge],
        parse: [Function: parse]
      }
    },
    fileCache: RepositoryFileCache {
      octokit: OctokitWithDefaults {
        request: [Function],
        graphql: [Function],
        log: [Object],
        hook: [Function],
        auth: [AsyncFunction],
        actions: [Object],
        activity: [Object],
        apps: [Object],
        billing: [Object],
        checks: [Object],
        codeScanning: [Object],
        codesOfConduct: [Object],
        codespaces: [Object],
        dependabot: [Object],
        dependencyGraph: [Object],
        emojis: [Object],
        enterpriseAdmin: [Object],
        gists: [Object],
        git: [Object],
        gitignore: [Object],
        interactions: [Object],
        issues: [Object],
        licenses: [Object],
        markdown: [Object],
        meta: [Object],
        migrations: [Object],
        orgs: [Object],
        packages: [Object],
        projects: [Object],
        pulls: [Object],
        rateLimit: [Object],
        reactions: [Object],
        repos: [Object],
        search: [Object],
        secretScanning: [Object],
        teams: [Object],
        users: [Object],
        rest: [Object],
        paginate: [Function]
      },
      repository: {
        owner: 'chingor13',
        repo: 'google-auth-library-java',
        defaultBranch: 'master'
      },
      cache: Map(0) {}
    },
    logger: GCFLogger {
      destination: SonicBoom {
        _bufs: [],
        _len: 0,
        fd: 1,
        _writing: false,
        _writingBuf: '',
        _ending: false,
        _reopening: false,
        _asyncDrainScheduled: true,
        _hwm: 16387,
        file: null,
        destroyed: false,
        minLength: 0,
        maxLength: 0,
        maxWrite: 16384,
        sync: true,
        _fsync: false,
        append: true,
        mode: undefined,
        retryEAGAIN: [Function (anonymous)],
        mkdir: false,
        release: [Function (anonymous)],
        _events: [Object: null prototype],
        _eventsCount: 2
      },
      pino: EventEmitter {
        levels: [Object],
        silent: [Function: noop],
        onChild: [Function: noop],
        trace: [Function: LOG],
        debug: [Function: LOG],
        info: [Function: LOG],
        warn: [Function: LOG],
        error: [Function: LOG],
        fatal: [Function (anonymous)],
        metric: [Function: LOG],
        [Symbol(pino.useOnlyCustomLevels)]: false,
        [Symbol(pino.stream)]: [SonicBoom],
        [Symbol(pino.time)]: [Function: nullTime],
        [Symbol(pino.timeSliceIndex)]: 0,
        [Symbol(pino.stringify)]: [Function: stringify],
        [Symbol(pino.stringifySafe)]: [Function: stringify],
        [Symbol(pino.stringifiers)]: {},
        [Symbol(pino.end)]: '}\n',
        [Symbol(pino.formatOpts)]: [Object],
        [Symbol(pino.messageKey)]: 'message',
        [Symbol(pino.errorKey)]: 'err',
        [Symbol(pino.nestedKey)]: null,
        [Symbol(pino.nestedKeyStr)]: '',
        [Symbol(pino.serializers)]: [Object],
        [Symbol(pino.mixin)]: undefined,
        [Symbol(pino.mixinMergeStrategy)]: undefined,
        [Symbol(pino.chindings)]: '',
        [Symbol(pino.formatters)]: [Object],
        [Symbol(pino.hooks)]: [Object],
        [Symbol(pino.lsCache)]: [Object],
        [Symbol(pino.levelVal)]: 10
      },
      trace: [Function: bound trace],
      debug: [Function: bound debug],
      info: [Function: bound info],
      warn: [Function: bound warn],
      metric: [Function: bound metric],
      error: [Function: bound error],
      child: [Function: bound child]
    }
  }, 'master', undefined, undefined, {
    logger: GCFLogger {
      destination: SonicBoom {
        _bufs: [],
        _len: 0,
        fd: 1,
        _writing: false,
        _writingBuf: '',
        _ending: false,
        _reopening: false,
        _asyncDrainScheduled: true,
        _hwm: 16387,
        file: null,
        destroyed: false,
        minLength: 0,
        maxLength: 0,
        maxWrite: 16384,
        sync: true,
        _fsync: false,
        append: true,
        mode: undefined,
        retryEAGAIN: [Function (anonymous)],
        mkdir: false,
        release: [Function (anonymous)],
        _events: [Object: null prototype],
        _eventsCount: 2
      },
      pino: EventEmitter {
        levels: [Object],
        silent: [Function: noop],
        onChild: [Function: noop],
        trace: [Function: LOG],
        debug: [Function: LOG],
        info: [Function: LOG],
        warn: [Function: LOG],
        error: [Function: LOG],
        fatal: [Function (anonymous)],
        metric: [Function: LOG],
        [Symbol(pino.useOnlyCustomLevels)]: false,
        [Symbol(pino.stream)]: [SonicBoom],
        [Symbol(pino.time)]: [Function: nullTime],
        [Symbol(pino.timeSliceIndex)]: 0,
        [Symbol(pino.stringify)]: [Function: stringify],
        [Symbol(pino.stringifySafe)]: [Function: stringify],
        [Symbol(pino.stringifiers)]: {},
        [Symbol(pino.end)]: '}\n',
        [Symbol(pino.formatOpts)]: [Object],
        [Symbol(pino.messageKey)]: 'message',
        [Symbol(pino.errorKey)]: 'err',
        [Symbol(pino.nestedKey)]: null,
        [Symbol(pino.nestedKeyStr)]: '',
        [Symbol(pino.serializers)]: [Object],
        [Symbol(pino.mixin)]: undefined,
        [Symbol(pino.mixinMergeStrategy)]: undefined,
        [Symbol(pino.chindings)]: '',
        [Symbol(pino.formatters)]: [Object],
        [Symbol(pino.hooks)]: [Object],
        [Symbol(pino.lsCache)]: [Object],
        [Symbol(pino.levelVal)]: 10
      },
      trace: [Function: bound trace],
      debug: [Function: bound debug],
      info: [Function: bound info],
      warn: [Function: bound warn],
      metric: [Function: bound metric],
      error: [Function: bound error],
      child: [Function: bound child]
    }
  }) => Promise {
    Manifest {
      repository: { owner: 'fake', repo: 'fake', defaultBranch: 'main' },
      github: GitHub {
        getCommitFiles: [AsyncFunction (anonymous)],
        graphqlRequest: [AsyncFunction (anonymous)],
        findFilesByFilenameAndRef: [AsyncFunction (anonymous)],
        findFilesByGlobAndRef: [AsyncFunction (anonymous)],
        createPullRequest: [AsyncFunction (anonymous)],
        getPullRequest: [AsyncFunction (anonymous)],
        updatePullRequest: [AsyncFunction (anonymous)],
        findFilesByExtensionAndRef: [AsyncFunction (anonymous)],
        createRelease: [AsyncFunction (anonymous)],
        commentOnIssue: [AsyncFunction (anonymous)],
        removeIssueLabels: [AsyncFunction (anonymous)],
        addIssueLabels: [AsyncFunction (anonymous)],
        repository: [Object],
        octokit: [OctokitWithDefaults],
        request: [Function],
        graphql: [Function],
        fileCache: [RepositoryFileCache],
        logger: [GCFLogger]
      },
      targetBranch: 'main',
      repositoryConfig: {},
      releasedVersions: {},
      manifestPath: '.release-please-manifest.json',
      separatePullRequests: false,
      fork: false,
      signoffUser: undefined,
      releaseLabels: [ 'autorelease: tagged' ],
      labels: [ 'autorelease: pending' ],
      skipLabeling: false,
      sequentialCalls: false,
      snapshotLabels: [ 'autorelease: snapshot' ],
      bootstrapSha: undefined,
      lastReleaseSha: undefined,
      draft: undefined,
      draftPullRequest: undefined,
      groupPullRequestTitlePattern: undefined,
      releaseSearchDepth: 400,
      commitSearchDepth: 500,
      logger: GCFLogger {
        destination: [SonicBoom],
        pino: [EventEmitter],
        trace: [Function: bound trace],
        debug: [Function: bound debug],
        info: [Function: bound info],
        warn: [Function: bound warn],
        metric: [Function: bound metric],
        error: [Function: bound error],
        child: [Function: bound child]
      },
      plugins: [],
      pullRequestOverflowHandler: FilePullRequestOverflowHandler {
        github: [GitHub],
        logger: [GCFLogger]
      }
    }
  } at null.buildManifest (src/release-please.ts:206:27)
      at Object.fail (node_modules/sinon/lib/sinon/assert.js:120:25)
      at failAssertion (node_modules/sinon/lib/sinon/assert.js:66:20)
      at Object.assert.<computed> [as calledOnce] (node_modules/sinon/lib/sinon/assert.js:95:17)
      at Context.<anonymous> (test/release-please.ts:696:22)

  3) ReleasePleaseBot
       push to non-master branch
         without manifest
           should handle GitHub releases, if configured:
     AssertError: expected fromConfig to be called once and with exact arguments 
Call 1:
GitHub {
  getCommitFiles: [AsyncFunction (anonymous)],
  graphqlRequest: [AsyncFunction (anonymous)],
  findFilesByFilenameAndRef: [AsyncFunction (anonymous)],
  findFilesByGlobAndRef: [AsyncFunction (anonymous)],
  createPullRequest: [AsyncFunction (anonymous)],
  getPullRequest: [AsyncFunction (anonymous)],
  updatePullRequest: [AsyncFunction (anonymous)],
  findFilesByExtensionAndRef: [AsyncFunction (anonymous)],
  createRelease: [AsyncFunction (anonymous)],
  commentOnIssue: [AsyncFunction (anonymous)],
  removeIssueLabels: [AsyncFunction (anonymous)],
  addIssueLabels: [AsyncFunction (anonymous)],
  repository: {
    owner: 'chingor13',
    repo: 'google-auth-library-java',
    defaultBranch: 'master'
  },
  octokit: OctokitWithDefaults {
    request: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    graphql: [Function: newApi] {
      defaults: [Function: bound withDefaults],
      endpoint: [Function]
    },
    log: {
      debug: [Function: debug],
      info: [Function: info],
      warn: [Function: bound warn],
      error: [Function: bound error]
    },
    hook: [Function: bound register] {
      api: [Object],
      remove: [Function: bound removeHook],
      before: [Function: bound addHook],
      error: [Function: bound addHook],
      after: [Function: bound addHook],
      wrap: [Function: bound addHook]
    },
    auth: [Function: bound auth] AsyncFunction {
      hook: [Function: bound hook] AsyncFunction
    },
    actions: {
      addCustomLabelsToSelfHostedRunnerForOrg: [Function],
      addCustomLabelsToSelfHostedRunnerForRepo: [Function],
      addSelectedRepoToOrgSecret: [Function],
      approveWorkflowRun: [Function],
      cancelWorkflowRun: [Function],
      createOrUpdateEnvironmentSecret: [Function],
      createOrUpdateOrgSecret: [Function],
      createOrUpdateRepoSecret: [Function],
      createRegistrationTokenForOrg: [Function],
      createRegistrationTokenForRepo: [Function],
      createRemoveTokenForOrg: [Function],
      createRemoveTokenForRepo: [Function],
      createWorkflowDispatch: [Function],
      deleteActionsCacheById: [Function],
      deleteActionsCacheByKey: [Function],
      deleteArtifact: [Function],
      deleteEnvironmentSecret: [Function],
      deleteOrgSecret: [Function],
      deleteRepoSecret: [Function],
      deleteSelfHostedRunnerFromOrg: [Function],
      deleteSelfHostedRunnerFromRepo: [Function],
      deleteWorkflowRun: [Function],
      deleteWorkflowRunLogs: [Function],
      disableSelectedRepositoryGithubActionsOrganization: [Function],
      disableWorkflow: [Function],
      downloadArtifact: [Function],
      downloadJobLogsForWorkflowRun: [Function],
      downloadWorkflowRunAttemptLogs: [Function],
      downloadWorkflowRunLogs: [Function],
      enableSelectedRepositoryGithubActionsOrganization: [Function],
      enableWorkflow: [Function],
      getActionsCacheList: [Function],
      getActionsCacheUsage: [Function],
      getActionsCacheUsageByRepoForOrg: [Function],
      getActionsCacheUsageForEnterprise: [Function],
      getActionsCacheUsageForOrg: [Function],
      getAllowedActionsOrganization: [Function],
      getAllowedActionsRepository: [Function],
      getArtifact: [Function],
      getEnvironmentPublicKey: [Function],
      getEnvironmentSecret: [Function],
      getGithubActionsDefaultWorkflowPermissionsEnterprise: [Function],
      getGithubActionsDefaultWorkflowPermissionsOrganization: [Function],
      getGithubActionsDefaultWorkflowPermissionsRepository: [Function],
      getGithubActionsPermissionsOrganization: [Function],
      getGithubActionsPermissionsRepository: [Function],
      getJobForWorkflowRun: [Function],
      getOrgPublicKey: [Function],
      getOrgSecret: [Function],
      getPendingDeploymentsForRun: [Function],
      getRepoPermissions: [Function],
      getRepoPublicKey: [Function],
      getRepoSecret: [Function],
      getReviewsForRun: [Function],
      getSelfHostedRunnerForOrg: [Function],
      getSelfHostedRunnerForRepo: [Function],
      getWorkflow: [Function],
      getWorkflowAccessToRepository: [Function],
      getWorkflowRun: [Function],
      getWorkflowRunAttempt: [Function],
      getWorkflowRunUsage: [Function],
      getWorkflowUsage: [Function],
      listArtifactsForRepo: [Function],
      listEnvironmentSecrets: [Function],
      listJobsForWorkflowRun: [Function],
      listJobsForWorkflowRunAttempt: [Function],
      listLabelsForSelfHostedRunnerForOrg: [Function],
      listLabelsForSelfHostedRunnerForRepo: [Function],
      listOrgSecrets: [Function],
      listRepoSecrets: [Function],
      listRepoWorkflows: [Function],
      listRunnerApplicationsForOrg: [Function],
      listRunnerApplicationsForRepo: [Function],
      listSelectedReposForOrgSecret: [Function],
      listSelectedRepositoriesEnabledGithubActionsOrganization: [Function],
      listSelfHostedRunnersForOrg: [Function],
      listSelfHostedRunnersForRepo: [Function],
      listWorkflowRunArtifacts: [Function],
      listWorkflowRuns: [Function],
      listWorkflowRunsForRepo: [Function],
      reRunJobForWorkflowRun: [Function],
      reRunWorkflow: [Function],
      reRunWorkflowFailedJobs: [Function],
      removeAllCustomLabelsFromSelfHostedRunnerForOrg: [Function],
      removeAllCustomLabelsFromSelfHostedRunnerForRepo: [Function],
      removeCustomLabelFromSelfHostedRunnerForOrg: [Function],
      removeCustomLabelFromSelfHostedRunnerForRepo: [Function],
      removeSelectedRepoFromOrgSecret: [Function],
      reviewPendingDeploymentsForRun: [Function],
      setAllowedActionsOrganization: [Function],
      setAllowedActionsRepository: [Function],
      setCustomLabelsForSelfHostedRunnerForOrg: [Function],
      setCustomLabelsForSelfHostedRunnerForRepo: [Function],
      setGithubActionsDefaultWorkflowPermissionsEnterprise: [Function],
      setGithubActionsDefaultWorkflowPermissionsOrganization: [Function],
      setGithubActionsDefaultWorkflowPermissionsRepository: [Function],
      setGithubActionsPermissionsOrganization: [Function],
      setGithubActionsPermissionsRepository: [Function],
      setSelectedReposForOrgSecret: [Function],
      setSelectedRepositoriesEnabledGithubActionsOrganization: [Function],
      setWorkflowAccessToRepository: [Function]
    },
    activity: {
      checkRepoIsStarredByAuthenticatedUser: [Function],
      deleteRepoSubscription: [Function],
      deleteThreadSubscription: [Function],
      getFeeds: [Function],
      getRepoSubscription: [Function],
      getThread: [Function],
      getThreadSubscriptionForAuthenticatedUser: [Function],
      listEventsForAuthenticatedUser: [Function],
      listNotificationsForAuthenticatedUser: [Function],
      listOrgEventsForAuthenticatedUser: [Function],
      listPublicEvents: [Function],
      listPublicEventsForRepoNetwork: [Function],
      listPublicEventsForUser: [Function],
      listPublicOrgEvents: [Function],
      listReceivedEventsForUser: [Function],
      listReceivedPublicEventsForUser: [Function],
      listRepoEvents: [Function],
      listRepoNotificationsForAuthenticatedUser: [Function],
      listReposStarredByAuthenticatedUser: [Function],
      listReposStarredByUser: [Function],
      listReposWatchedByUser: [Function],
      listStargazersForRepo: [Function],
      listWatchedReposForAuthenticatedUser: [Function],
      listWatchersForRepo: [Function],
      markNotificationsAsRead: [Function],
      markRepoNotificationsAsRead: [Function],
      markThreadAsRead: [Function],
      setRepoSubscription: [Function],
      setThreadSubscription: [Function],
      starRepoForAuthenticatedUser: [Function],
      unstarRepoForAuthenticatedUser: [Function]
    },
    apps: {
      addRepoToInstallation: [Function],
      addRepoToInstallationForAuthenticatedUser: [Function],
      checkToken: [Function],
      createFromManifest: [Function],
      createInstallationAccessToken: [Function],
      deleteAuthorization: [Function],
      deleteInstallation: [Function],
      deleteToken: [Function],
      getAuthenticated: [Function],
      getBySlug: [Function],
      getInstallation: [Function],
      getOrgInstallation: [Function],
      getRepoInstallation: [Function],
      getSubscriptionPlanForAccount: [Function],
      getSubscriptionPlanForAccountStubbed: [Function],
      getUserInstallation: [Function],
      getWebhookConfigForApp: [Function],
      getWebhookDelivery: [Function],
      listAccountsForPlan: [Function],
      listAccountsForPlanStubbed: [Function],
      listInstallationReposForAuthenticatedUser: [Function],
      listInstallations: [Function],
      listInstallationsForAuthenticatedUser: [Function],
      listPlans: [Function],
      listPlansStubbed: [Function],
      listReposAccessibleToInstallation: [Function],
      listSubscriptionsForAuthenticatedUser: [Function],
      listSubscriptionsForAuthenticatedUserStubbed: [Function],
      listWebhookDeliveries: [Function],
      redeliverWebhookDelivery: [Function],
      removeRepoFromInstallation: [Function],
      removeRepoFromInstallationForAuthenticatedUser: [Function],
      resetToken: [Function],
      revokeInstallationAccessToken: [Function],
      scopeToken: [Function],
      suspendInstallation: [Function],
      unsuspendInstallation: [Function],
      updateWebhookConfigForApp: [Function]
    },
    billing: {
      getGithubActionsBillingOrg: [Function],
      getGithubActionsBillingUser: [Function],
      getGithubAdvancedSecurityBillingGhe: [Function],
      getGithubAdvancedSecurityBillingOrg: [Function],
      getGithubPackagesBillingOrg: [Function],
      getGithubPackagesBillingUser: [Function],
      getSharedStorageBillingOrg: [Function],
      getSharedStorageBillingUser: [Function]
    },
    checks: {
      create: [Function],
      createSuite: [Function],
      get: [Function],
      getSuite: [Function],
      listAnnotations: [Function],
      listForRef: [Function],
      listForSuite: [Function],
      listSuitesForRef: [Function],
      rerequestRun: [Function],
      rerequestSuite: [Function],
      setSuitesPreferences: [Function],
      update: [Function]
    },
    codeScanning: {
      deleteAnalysis: [Function],
      getAlert: [Function],
      getAnalysis: [Function],
      getCodeqlDatabase: [Function],
      getSarif: [Function],
      listAlertInstances: [Function],
      listAlertsForEnterprise: [Function],
      listAlertsForOrg: [Function],
      listAlertsForRepo: [Function],
      listAlertsInstances: [Function],
      listCodeqlDatabases: [Function],
      listRecentAnalyses: [Function],
      updateAlert: [Function],
      uploadSarif: [Function]
    },
    codesOfConduct: { getAllCodesOfConduct: [Function], getConductCode: [Function] },
    codespaces: {
      addRepositoryForSecretForAuthenticatedUser: [Function],
      addSelectedRepoToOrgSecret: [Function],
      codespaceMachinesForAuthenticatedUser: [Function],
      createForAuthenticatedUser: [Function],
      createOrUpdateOrgSecret: [Function],
      createOrUpdateRepoSecret: [Function],
      createOrUpdateSecretForAuthenticatedUser: [Function],
      createWithPrForAuthenticatedUser: [Function],
      createWithRepoForAuthenticatedUser: [Function],
      deleteForAuthenticatedUser: [Function],
      deleteFromOrganization: [Function],
      deleteOrgSecret: [Function],
      deleteRepoSecret: [Function],
      deleteSecretForAuthenticatedUser: [Function],
      exportForAuthenticatedUser: [Function],
      getExportDetailsForAuthenticatedUser: [Function],
      getForAuthenticatedUser: [Function],
      getOrgPublicKey: [Function],
      getOrgSecret: [Function],
      getPublicKeyForAuthenticatedUser: [Function],
      getRepoPublicKey: [Function],
      getRepoSecret: [Function],
      getSecretForAuthenticatedUser: [Function],
      listDevcontainersInRepositoryForAuthenticatedUser: [Function],
      listForAuthenticatedUser: [Function],
      listInOrganization: [Function],
      listInRepositoryForAuthenticatedUser: [Function],
      listOrgSecrets: [Function],
      listRepoSecrets: [Function],
      listRepositoriesForSecretForAuthenticatedUser: [Function],
      listSecretsForAuthenticatedUser: [Function],
      listSelectedReposForOrgSecret: [Function],
      preFlightWithRepoForAuthenticatedUser: [Function],
      removeRepositoryForSecretForAuthenticatedUser: [Function],
      removeSelectedRepoFromOrgSecret: [Function],
      repoMachinesForAuthenticatedUser: [Function],
      setRepositoriesForSecretForAuthenticatedUser: [Function],
      setSelectedReposForOrgSecret: [Function],
      startForAuthenticatedUser: [Function],
      stopForAuthenticatedUser: [Function],
      stopInOrganization: [Function],
      updateForAuthenticatedUser: [Function]
    },
    dependabot: {
      addSelectedRepoToOrgSecret: [Function],
      createOrUpdateOrgSecret: [Function],
      createOrUpdateRepoSecret: [Function],
      deleteOrgSecret: [Function],
      deleteRepoSecret: [Function],
      getAlert: [Function],
      getOrgPublicKey: [Function],
      getOrgSecret: [Function],
      getRepoPublicKey: [Function],
      getRepoSecret: [Function],
      listAlertsForRepo: [Function],
      listOrgSecrets: [Function],
      listRepoSecrets: [Function],
      listSelectedReposForOrgSecret: [Function],
      removeSelectedRepoFromOrgSecret: [Function],
      setSelectedReposForOrgSecret: [Function],
      updateAlert: [Function]
    },
    dependencyGraph: { createRepositorySnapshot: [Function], diffRange: [Function] },
    emojis: { get: [Function] },
    enterpriseAdmin: {
      addCustomLabelsToSelfHostedRunnerForEnterprise: [Function],
      disableSelectedOrganizationGithubActionsEnterprise: [Function],
      enableSelectedOrganizationGithubActionsEnterprise: [Function],
      getAllowedActionsEnterprise: [Function],
      getGithubActionsPermissionsEnterprise: [Function],
      getServerStatistics: [Function],
      listLabelsForSelfHostedRunnerForEnterprise: [Function],
      listSelectedOrganizationsEnabledGithubActionsEnterprise: [Function],
      removeAllCustomLabelsFromSelfHostedRunnerForEnterprise: [Function],
      removeCustomLabelFromSelfHostedRunnerForEnterprise: [Function],
      setAllowedActionsEnterprise: [Function],
      setCustomLabelsForSelfHostedRunnerForEnterprise: [Function],
      setGithubActionsPermissionsEnterprise: [Function],
      setSelectedOrganizationsEnabledGithubActionsEnterprise: [Function]
    },
    gists: {
      checkIsStarred: [Function],
      create: [Function],
      createComment: [Function],
      delete: [Function],
      deleteComment: [Function],
      fork: [Function],
      get: [Function],
      getComment: [Function],
      getRevision: [Function],
      list: [Function],
      listComments: [Function],
      listCommits: [Function],
      listForUser: [Function],
      listForks: [Function],
      listPublic: [Function],
      listStarred: [Function],
      star: [Function],
      unstar: [Function],
      update: [Function],
      updateComment: [Function]
    },
    git: {
      createBlob: [Function],
      createCommit: [Function],
      createRef: [Function],
      createTag: [Function],
      createTree: [Function],
      deleteRef: [Function],
      getBlob: [Function],
      getCommit: [Function],
      getRef: [Function],
      getTag: [Function],
      getTree: [Function],
      listMatchingRefs: [Function],
      updateRef: [Function]
    },
    gitignore: { getAllTemplates: [Function], getTemplate: [Function] },
    interactions: {
      getRestrictionsForAuthenticatedUser: [Function],
      getRestrictionsForOrg: [Function],
      getRestrictionsForRepo: [Function],
      getRestrictionsForYourPublicRepos: [Function],
      removeRestrictionsForAuthenticatedUser: [Function],
      removeRestrictionsForOrg: [Function],
      removeRestrictionsForRepo: [Function],
      removeRestrictionsForYourPublicRepos: [Function],
      setRestrictionsForAuthenticatedUser: [Function],
      setRestrictionsForOrg: [Function],
      setRestrictionsForRepo: [Function],
      setRestrictionsForYourPublicRepos: [Function]
    },
    issues: {
      addAssignees: [Function],
      addLabels: [Function],
      checkUserCanBeAssigned: [Function],
      create: [Function],
      createComment: [Function],
      createLabel: [Function],
      createMilestone: [Function],
      deleteComment: [Function],
      deleteLabel: [Function],
      deleteMilestone: [Function],
      get: [Function],
      getComment: [Function],
      getEvent: [Function],
      getLabel: [Function],
      getMilestone: [Function],
      list: [Function],
      listAssignees: [Function],
      listComments: [Function],
      listCommentsForRepo: [Function],
      listEvents: [Function],
      listEventsForRepo: [Function],
      listEventsForTimeline: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listForRepo: [Function],
      listLabelsForMilestone: [Function],
      listLabelsForRepo: [Function],
      listLabelsOnIssue: [Function],
      listMilestones: [Function],
      lock: [Function],
      removeAllLabels: [Function],
      removeAssignees: [Function],
      removeLabel: [Function],
      setLabels: [Function],
      unlock: [Function],
      update: [Function],
      updateComment: [Function],
      updateLabel: [Function],
      updateMilestone: [Function]
    },
    licenses: {
      get: [Function],
      getAllCommonlyUsed: [Function],
      getForRepo: [Function]
    },
    markdown: { render: [Function], renderRaw: [Function] },
    meta: {
      get: [Function],
      getOctocat: [Function],
      getZen: [Function],
      root: [Function]
    },
    migrations: {
      cancelImport: [Function],
      deleteArchiveForAuthenticatedUser: [Function],
      deleteArchiveForOrg: [Function],
      downloadArchiveForOrg: [Function],
      getArchiveForAuthenticatedUser: [Function],
      getCommitAuthors: [Function],
      getImportStatus: [Function],
      getLargeFiles: [Function],
      getStatusForAuthenticatedUser: [Function],
      getStatusForOrg: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listReposForAuthenticatedUser: [Function],
      listReposForOrg: [Function],
      listReposForUser: [Function],
      mapCommitAuthor: [Function],
      setLfsPreference: [Function],
      startForAuthenticatedUser: [Function],
      startForOrg: [Function],
      startImport: [Function],
      unlockRepoForAuthenticatedUser: [Function],
      unlockRepoForOrg: [Function],
      updateImport: [Function]
    },
    orgs: {
      addSecurityManagerTeam: [Function],
      blockUser: [Function],
      cancelInvitation: [Function],
      checkBlockedUser: [Function],
      checkMembershipForUser: [Function],
      checkPublicMembershipForUser: [Function],
      convertMemberToOutsideCollaborator: [Function],
      createCustomRole: [Function],
      createInvitation: [Function],
      createWebhook: [Function],
      deleteCustomRole: [Function],
      deleteWebhook: [Function],
      enableOrDisableSecurityProductOnAllOrgRepos: [Function],
      get: [Function],
      getMembershipForAuthenticatedUser: [Function],
      getMembershipForUser: [Function],
      getWebhook: [Function],
      getWebhookConfigForOrg: [Function],
      getWebhookDelivery: [Function],
      list: [Function],
      listAppInstallations: [Function],
      listBlockedUsers: [Function],
      listCustomRoles: [Function],
      listFailedInvitations: [Function],
      listFineGrainedPermissions: [Function],
      listForAuthenticatedUser: [Function],
      listForUser: [Function],
      listInvitationTeams: [Function],
      listMembers: [Function],
      listMembershipsForAuthenticatedUser: [Function],
      listOutsideCollaborators: [Function],
      listPendingInvitations: [Function],
      listPublicMembers: [Function],
      listSecurityManagerTeams: [Function],
      listWebhookDeliveries: [Function],
      listWebhooks: [Function],
      pingWebhook: [Function],
      redeliverWebhookDelivery: [Function],
      removeMember: [Function],
      removeMembershipForUser: [Function],
      removeOutsideCollaborator: [Function],
      removePublicMembershipForAuthenticatedUser: [Function],
      removeSecurityManagerTeam: [Function],
      setMembershipForUser: [Function],
      setPublicMembershipForAuthenticatedUser: [Function],
      unblockUser: [Function],
      update: [Function],
      updateCustomRole: [Function],
      updateMembershipForAuthenticatedUser: [Function],
      updateWebhook: [Function],
      updateWebhookConfigForOrg: [Function]
    },
    packages: {
      deletePackageForAuthenticatedUser: [Function],
      deletePackageForOrg: [Function],
      deletePackageForUser: [Function],
      deletePackageVersionForAuthenticatedUser: [Function],
      deletePackageVersionForOrg: [Function],
      deletePackageVersionForUser: [Function],
      getAllPackageVersionsForAPackageOwnedByAnOrg: [Function],
      getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [Function],
      getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [Function],
      getAllPackageVersionsForPackageOwnedByOrg: [Function],
      getAllPackageVersionsForPackageOwnedByUser: [Function],
      getPackageForAuthenticatedUser: [Function],
      getPackageForOrganization: [Function],
      getPackageForUser: [Function],
      getPackageVersionForAuthenticatedUser: [Function],
      getPackageVersionForOrganization: [Function],
      getPackageVersionForUser: [Function],
      listPackagesForAuthenticatedUser: [Function],
      listPackagesForOrganization: [Function],
      listPackagesForUser: [Function],
      restorePackageForAuthenticatedUser: [Function],
      restorePackageForOrg: [Function],
      restorePackageForUser: [Function],
      restorePackageVersionForAuthenticatedUser: [Function],
      restorePackageVersionForOrg: [Function],
      restorePackageVersionForUser: [Function]
    },
    projects: {
      addCollaborator: [Function],
      createCard: [Function],
      createColumn: [Function],
      createForAuthenticatedUser: [Function],
      createForOrg: [Function],
      createForRepo: [Function],
      delete: [Function],
      deleteCard: [Function],
      deleteColumn: [Function],
      get: [Function],
      getCard: [Function],
      getColumn: [Function],
      getPermissionForUser: [Function],
      listCards: [Function],
      listCollaborators: [Function],
      listColumns: [Function],
      listForOrg: [Function],
      listForRepo: [Function],
      listForUser: [Function],
      moveCard: [Function],
      moveColumn: [Function],
      removeCollaborator: [Function],
      update: [Function],
      updateCard: [Function],
      updateColumn: [Function]
    },
    pulls: {
      checkIfMerged: [Function],
      create: [Function],
      createReplyForReviewComment: [Function],
      createReview: [Function],
      createReviewComment: [Function],
      deletePendingReview: [Function],
      deleteReviewComment: [Function],
      dismissReview: [Function],
      get: [Function],
      getReview: [Function],
      getReviewComment: [Function],
      list: [Function],
      listCommentsForReview: [Function],
      listCommits: [Function],
      listFiles: [Function],
      listRequestedReviewers: [Function],
      listReviewComments: [Function],
      listReviewCommentsForRepo: [Function],
      listReviews: [Function],
      merge: [Function],
      removeRequestedReviewers: [Function],
      requestReviewers: [Function],
      submitReview: [Function],
      update: [Function],
      updateBranch: [Function],
      updateReview: [Function],
      updateReviewComment: [Function]
    },
    rateLimit: { get: [Function] },
    reactions: {
      createForCommitComment: [Function],
      createForIssue: [Function],
      createForIssueComment: [Function],
      createForPullRequestReviewComment: [Function],
      createForRelease: [Function],
      createForTeamDiscussionCommentInOrg: [Function],
      createForTeamDiscussionInOrg: [Function],
      deleteForCommitComment: [Function],
      deleteForIssue: [Function],
      deleteForIssueComment: [Function],
      deleteForPullRequestComment: [Function],
      deleteForRelease: [Function],
      deleteForTeamDiscussion: [Function],
      deleteForTeamDiscussionComment: [Function],
      listForCommitComment: [Function],
      listForIssue: [Function],
      listForIssueComment: [Function],
      listForPullRequestReviewComment: [Function],
      listForRelease: [Function],
      listForTeamDiscussionCommentInOrg: [Function],
      listForTeamDiscussionInOrg: [Function]
    },
    repos: {
      acceptInvitation: [Function],
      acceptInvitationForAuthenticatedUser: [Function],
      addAppAccessRestrictions: [Function],
      addCollaborator: [Function],
      addStatusCheckContexts: [Function],
      addTeamAccessRestrictions: [Function],
      addUserAccessRestrictions: [Function],
      checkCollaborator: [Function],
      checkVulnerabilityAlerts: [Function],
      codeownersErrors: [Function],
      compareCommits: [Function],
      compareCommitsWithBasehead: [Function],
      createAutolink: [Function],
      createCommitComment: [Function],
      createCommitSignatureProtection: [Function],
      createCommitStatus: [Function],
      createDeployKey: [Function],
      createDeployment: [Function],
      createDeploymentBranchPolicy: [Function],
      createDeploymentStatus: [Function],
      createDispatchEvent: [Function],
      createForAuthenticatedUser: [Function],
      createFork: [Function],
      createInOrg: [Function],
      createOrUpdateEnvironment: [Function],
      createOrUpdateFileContents: [Function],
      createPagesDeployment: [Function],
      createPagesSite: [Function],
      createRelease: [Function],
      createTagProtection: [Function],
      createUsingTemplate: [Function],
      createWebhook: [Function],
      declineInvitation: [Function],
      declineInvitationForAuthenticatedUser: [Function],
      delete: [Function],
      deleteAccessRestrictions: [Function],
      deleteAdminBranchProtection: [Function],
      deleteAnEnvironment: [Function],
      deleteAutolink: [Function],
      deleteBranchProtection: [Function],
      deleteCommitComment: [Function],
      deleteCommitSignatureProtection: [Function],
      deleteDeployKey: [Function],
      deleteDeployment: [Function],
      deleteDeploymentBranchPolicy: [Function],
      deleteFile: [Function],
      deleteInvitation: [Function],
      deletePagesSite: [Function],
      deletePullRequestReviewProtection: [Function],
      deleteRelease: [Function],
      deleteReleaseAsset: [Function],
      deleteTagProtection: [Function],
      deleteWebhook: [Function],
      disableAutomatedSecurityFixes: [Function],
      disableLfsForRepo: [Function],
      disableVulnerabilityAlerts: [Function],
      downloadArchive: [Function],
      downloadTarballArchive: [Function],
      downloadZipballArchive: [Function],
      enableAutomatedSecurityFixes: [Function],
      enableLfsForRepo: [Function],
      enableVulnerabilityAlerts: [Function],
      generateReleaseNotes: [Function],
      get: [Function],
      getAccessRestrictions: [Function],
      getAdminBranchProtection: [Function],
      getAllEnvironments: [Function],
      getAllStatusCheckContexts: [Function],
      getAllTopics: [Function],
      getAppsWithAccessToProtectedBranch: [Function],
      getAutolink: [Function],
      getBranch: [Function],
      getBranchProtection: [Function],
      getClones: [Function],
      getCodeFrequencyStats: [Function],
      getCollaboratorPermissionLevel: [Function],
      getCombinedStatusForRef: [Function],
      getCommit: [Function],
      getCommitActivityStats: [Function],
      getCommitComment: [Function],
      getCommitSignatureProtection: [Function],
      getCommunityProfileMetrics: [Function],
      getContent: [Function],
      getContributorsStats: [Function],
      getDeployKey: [Function],
      getDeployment: [Function],
      getDeploymentBranchPolicy: [Function],
      getDeploymentStatus: [Function],
      getEnvironment: [Function],
      getLatestPagesBuild: [Function],
      getLatestRelease: [Function],
      getPages: [Function],
      getPagesBuild: [Function],
      getPagesHealthCheck: [Function],
      getParticipationStats: [Function],
      getPullRequestReviewProtection: [Function],
      getPunchCardStats: [Function],
      getReadme: [Function],
      getReadmeInDirectory: [Function],
      getRelease: [Function],
      getReleaseAsset: [Function],
      getReleaseByTag: [Function],
      getStatusChecksProtection: [Function],
      getTeamsWithAccessToProtectedBranch: [Function],
      getTopPaths: [Function],
      getTopReferrers: [Function],
      getUsersWithAccessToProtectedBranch: [Function],
      getViews: [Function],
      getWebhook: [Function],
      getWebhookConfigForRepo: [Function],
      getWebhookDelivery: [Function],
      listAutolinks: [Function],
      listBranches: [Function],
      listBranchesForHeadCommit: [Function],
      listCollaborators: [Function],
      listCommentsForCommit: [Function],
      listCommitCommentsForRepo: [Function],
      listCommitStatusesForRef: [Function],
      listCommits: [Function],
      listContributors: [Function],
      listDeployKeys: [Function],
      listDeploymentBranchPolicies: [Function],
      listDeploymentStatuses: [Function],
      listDeployments: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listForUser: [Function],
      listForks: [Function],
      listInvitations: [Function],
      listInvitationsForAuthenticatedUser: [Function],
      listLanguages: [Function],
      listPagesBuilds: [Function],
      listPublic: [Function],
      listPullRequestsAssociatedWithCommit: [Function],
      listReleaseAssets: [Function],
      listReleases: [Function],
      listTagProtection: [Function],
      listTags: [Function],
      listTeams: [Function],
      listWebhookDeliveries: [Function],
      listWebhooks: [Function],
      merge: [Function],
      mergeUpstream: [Function],
      pingWebhook: [Function],
      redeliverWebhookDelivery: [Function],
      removeAppAccessRestrictions: [Function],
      removeCollaborator: [Function],
      removeStatusCheckContexts: [Function],
      removeStatusCheckProtection: [Function],
      removeTeamAccessRestrictions: [Function],
      removeUserAccessRestrictions: [Function],
      renameBranch: [Function],
      replaceAllTopics: [Function],
      requestPagesBuild: [Function],
      setAdminBranchProtection: [Function],
      setAppAccessRestrictions: [Function],
      setStatusCheckContexts: [Function],
      setTeamAccessRestrictions: [Function],
      setUserAccessRestrictions: [Function],
      testPushWebhook: [Function],
      transfer: [Function],
      update: [Function],
      updateBranchProtection: [Function],
      updateCommitComment: [Function],
      updateDeploymentBranchPolicy: [Function],
      updateInformationAboutPagesSite: [Function],
      updateInvitation: [Function],
      updatePullRequestReviewProtection: [Function],
      updateRelease: [Function],
      updateReleaseAsset: [Function],
      updateStatusCheckPotection: [Function],
      updateStatusCheckProtection: [Function],
      updateWebhook: [Function],
      updateWebhookConfigForRepo: [Function],
      uploadReleaseAsset: [Function]
    },
    search: {
      code: [Function],
      commits: [Function],
      issuesAndPullRequests: [Function],
      labels: [Function],
      repos: [Function],
      topics: [Function],
      users: [Function]
    },
    secretScanning: {
      getAlert: [Function],
      listAlertsForEnterprise: [Function],
      listAlertsForOrg: [Function],
      listAlertsForRepo: [Function],
      listLocationsForAlert: [Function],
      updateAlert: [Function]
    },
    teams: {
      addOrUpdateMembershipForUserInOrg: [Function],
      addOrUpdateProjectPermissionsInOrg: [Function],
      addOrUpdateRepoPermissionsInOrg: [Function],
      checkPermissionsForProjectInOrg: [Function],
      checkPermissionsForRepoInOrg: [Function],
      create: [Function],
      createDiscussionCommentInOrg: [Function],
      createDiscussionInOrg: [Function],
      deleteDiscussionCommentInOrg: [Function],
      deleteDiscussionInOrg: [Function],
      deleteInOrg: [Function],
      getByName: [Function],
      getDiscussionCommentInOrg: [Function],
      getDiscussionInOrg: [Function],
      getMembershipForUserInOrg: [Function],
      list: [Function],
      listChildInOrg: [Function],
      listDiscussionCommentsInOrg: [Function],
      listDiscussionsInOrg: [Function],
      listForAuthenticatedUser: [Function],
      listMembersInOrg: [Function],
      listPendingInvitationsInOrg: [Function],
      listProjectsInOrg: [Function],
      listReposInOrg: [Function],
      removeMembershipForUserInOrg: [Function],
      removeProjectInOrg: [Function],
      removeRepoInOrg: [Function],
      updateDiscussionCommentInOrg: [Function],
      updateDiscussionInOrg: [Function],
      updateInOrg: [Function]
    },
    users: {
      addEmailForAuthenticated: [Function],
      addEmailForAuthenticatedUser: [Function],
      block: [Function],
      checkBlocked: [Function],
      checkFollowingForUser: [Function],
      checkPersonIsFollowedByAuthenticated: [Function],
      createGpgKeyForAuthenticated: [Function],
      createGpgKeyForAuthenticatedUser: [Function],
      createPublicSshKeyForAuthenticated: [Function],
      createPublicSshKeyForAuthenticatedUser: [Function],
      createSshSigningKeyForAuthenticatedUser: [Function],
      deleteEmailForAuthenticated: [Function],
      deleteEmailForAuthenticatedUser: [Function],
      deleteGpgKeyForAuthenticated: [Function],
      deleteGpgKeyForAuthenticatedUser: [Function],
      deletePublicSshKeyForAuthenticated: [Function],
      deletePublicSshKeyForAuthenticatedUser: [Function],
      deleteSshSigningKeyForAuthenticatedUser: [Function],
      follow: [Function],
      getAuthenticated: [Function],
      getByUsername: [Function],
      getContextForUser: [Function],
      getGpgKeyForAuthenticated: [Function],
      getGpgKeyForAuthenticatedUser: [Function],
      getPublicSshKeyForAuthenticated: [Function],
      getPublicSshKeyForAuthenticatedUser: [Function],
      getSshSigningKeyForAuthenticatedUser: [Function],
      list: [Function],
      listBlockedByAuthenticated: [Function],
      listBlockedByAuthenticatedUser: [Function],
      listEmailsForAuthenticated: [Function],
      listEmailsForAuthenticatedUser: [Function],
      listFollowedByAuthenticated: [Function],
      listFollowedByAuthenticatedUser: [Function],
      listFollowersForAuthenticatedUser: [Function],
      listFollowersForUser: [Function],
      listFollowingForUser: [Function],
      listGpgKeysForAuthenticated: [Function],
      listGpgKeysForAuthenticatedUser: [Function],
      listGpgKeysForUser: [Function],
      listPublicEmailsForAuthenticated: [Function],
      listPublicEmailsForAuthenticatedUser: [Function],
      listPublicKeysForUser: [Function],
      listPublicSshKeysForAuthenticated: [Function],
      listPublicSshKeysForAuthenticatedUser: [Function],
      listSshSigningKeysForAuthenticatedUser: [Function],
      listSshSigningKeysForUser: [Function],
      setPrimaryEmailVisibilityForAuthenticated: [Function],
      setPrimaryEmailVisibilityForAuthenticatedUser: [Function],
      unblock: [Function],
      unfollow: [Function],
      updateAuthenticated: [Function]
    },
    rest: {
      actions: [Object],
      activity: [Object],
      apps: [Object],
      billing: [Object],
      checks: [Object],
      codeScanning: [Object],
      codesOfConduct: [Object],
      codespaces: [Object],
      dependabot: [Object],
      dependencyGraph: [Object],
      emojis: [Object],
      enterpriseAdmin: [Object],
      gists: [Object],
      git: [Object],
      gitignore: [Object],
      interactions: [Object],
      issues: [Object],
      licenses: [Object],
      markdown: [Object],
      meta: [Object],
      migrations: [Object],
      orgs: [Object],
      packages: [Object],
      projects: [Object],
      pulls: [Object],
      rateLimit: [Object],
      reactions: [Object],
      repos: [Object],
      search: [Object],
      secretScanning: [Object],
      teams: [Object],
      users: [Object]
    },
    paginate: [Function: bound paginate] { iterator: [Function: bound iterator] }
  },
  request: [Function: newApi] {
    endpoint: [Function: bound endpointWithDefaults] {
      DEFAULTS: [Object],
      defaults: [Function: bound withDefaults],
      merge: [Function: bound merge],
      parse: [Function: parse]
    },
    defaults: [Function: bound withDefaults]
  },
  graphql: [Function: newApi] {
    defaults: [Function: bound withDefaults],
    endpoint: [Function: bound endpointWithDefaults] {
      DEFAULTS: [Object],
      defaults: [Function: bound withDefaults],
      merge: [Function: bound merge],
      parse: [Function: parse]
    }
  },
  fileCache: RepositoryFileCache {
    octokit: OctokitWithDefaults {
      request: [Function],
      graphql: [Function],
      log: [Object],
      hook: [Function],
      auth: [AsyncFunction],
      actions: [Object],
      activity: [Object],
      apps: [Object],
      billing: [Object],
      checks: [Object],
      codeScanning: [Object],
      codesOfConduct: [Object],
      codespaces: [Object],
      dependabot: [Object],
      dependencyGraph: [Object],
      emojis: [Object],
      enterpriseAdmin: [Object],
      gists: [Object],
      git: [Object],
      gitignore: [Object],
      interactions: [Object],
      issues: [Object],
      licenses: [Object],
      markdown: [Object],
      meta: [Object],
      migrations: [Object],
      orgs: [Object],
      packages: [Object],
      projects: [Object],
      pulls: [Object],
      rateLimit: [Object],
      reactions: [Object],
      repos: [Object],
      search: [Object],
      secretScanning: [Object],
      teams: [Object],
      users: [Object],
      rest: [Object],
      paginate: [Function]
    },
    repository: {
      owner: 'chingor13',
      repo: 'google-auth-library-java',
      defaultBranch: 'master'
    },
    cache: Map(0) {}
  },
  logger: GCFLogger {
    destination: SonicBoom {
      _bufs: [],
      _len: 0,
      fd: 1,
      _writing: false,
      _writingBuf: '',
      _ending: false,
      _reopening: false,
      _asyncDrainScheduled: true,
      _hwm: 16387,
      file: null,
      destroyed: false,
      minLength: 0,
      maxLength: 0,
      maxWrite: 16384,
      sync: true,
      _fsync: false,
      append: true,
      mode: undefined,
      retryEAGAIN: [Function (anonymous)],
      mkdir: false,
      release: [Function (anonymous)],
      _events: [Object: null prototype],
      _eventsCount: 2
    },
    pino: EventEmitter {
      levels: [Object],
      silent: [Function: noop],
      onChild: [Function: noop],
      trace: [Function: LOG],
      debug: [Function: LOG],
      info: [Function: LOG],
      warn: [Function: LOG],
      error: [Function: LOG],
      fatal: [Function (anonymous)],
      metric: [Function: LOG],
      [Symbol(pino.useOnlyCustomLevels)]: false,
      [Symbol(pino.stream)]: [SonicBoom],
      [Symbol(pino.time)]: [Function: nullTime],
      [Symbol(pino.timeSliceIndex)]: 0,
      [Symbol(pino.stringify)]: [Function: stringify],
      [Symbol(pino.stringifySafe)]: [Function: stringify],
      [Symbol(pino.stringifiers)]: {},
      [Symbol(pino.end)]: '}\n',
      [Symbol(pino.formatOpts)]: [Object],
      [Symbol(pino.messageKey)]: 'message',
      [Symbol(pino.errorKey)]: 'err',
      [Symbol(pino.nestedKey)]: null,
      [Symbol(pino.nestedKeyStr)]: '',
      [Symbol(pino.serializers)]: [Object],
      [Symbol(pino.mixin)]: undefined,
      [Symbol(pino.mixinMergeStrategy)]: undefined,
      [Symbol(pino.chindings)]: '',
      [Symbol(pino.formatters)]: [Object],
      [Symbol(pino.hooks)]: [Object],
      [Symbol(pino.lsCache)]: [Object],
      [Symbol(pino.levelVal)]: 10
    },
    trace: [Function: bound trace],
    debug: [Function: bound debug],
    info: [Function: bound info],
    warn: [Function: bound warn],
    metric: [Function: bound metric],
    error: [Function: bound error],
    child: [Function: bound child]
  }
} instanceOf(GitHub)
'"feature-branch"'
{
  releaseType: 'java-yoshi',
  versioning: undefined,
  bumpMinorPreMajor: undefined,
  bumpPatchForMinorPreMajor: undefined,
  draft: undefined,
  draftPullRequest: undefined,
  packageName: undefined,
  includeComponentInTag: false,
  pullRequestTitlePattern: undefined,
  changelogHost: undefined,
  changelogPath: undefined,
  changelogType: undefined,
  versionFile: undefined,
  extraFiles: undefined,
  initialVersion: undefined
} has("releaseType", java-yoshi)
{
  manifestPath: undefined,
  labels: undefined,
  releaseLabels: undefined,
  plugins: [ { type: 'sentence-case', specialWords: [Array] } ],
  logger: GCFLogger {
    destination: SonicBoom {
      _bufs: [],
      _len: 0,
      fd: 1,
      _writing: false,
      _writingBuf: '',
      _ending: false,
      _reopening: false,
      _asyncDrainScheduled: true,
      _hwm: 16387,
      file: null,
      destroyed: false,
      minLength: 0,
      maxLength: 0,
      maxWrite: 16384,
      sync: true,
      _fsync: false,
      append: true,
      mode: undefined,
      retryEAGAIN: [Function (anonymous)],
      mkdir: false,
      release: [Function (anonymous)],
      _events: [Object: null prototype],
      _eventsCount: 2
    },
    pino: EventEmitter {
      levels: [Object],
      silent: [Function: noop],
      onChild: [Function: noop],
      trace: [Function: LOG],
      debug: [Function: LOG],
      info: [Function: LOG],
      warn: [Function: LOG],
      error: [Function: LOG],
      fatal: [Function (anonymous)],
      metric: [Function: LOG],
      [Symbol(pino.useOnlyCustomLevels)]: false,
      [Symbol(pino.stream)]: [SonicBoom],
      [Symbol(pino.time)]: [Function: nullTime],
      [Symbol(pino.timeSliceIndex)]: 0,
      [Symbol(pino.stringify)]: [Function: stringify],
      [Symbol(pino.stringifySafe)]: [Function: stringify],
      [Symbol(pino.stringifiers)]: {},
      [Symbol(pino.end)]: '}\n',
      [Symbol(pino.formatOpts)]: [Object],
      [Symbol(pino.messageKey)]: 'message',
      [Symbol(pino.errorKey)]: 'err',
      [Symbol(pino.nestedKey)]: null,
      [Symbol(pino.nestedKeyStr)]: '',
      [Symbol(pino.serializers)]: [Object],
      [Symbol(pino.mixin)]: undefined,
      [Symbol(pino.mixinMergeStrategy)]: undefined,
      [Symbol(pino.chindings)]: '',
      [Symbol(pino.formatters)]: [Object],
      [Symbol(pino.hooks)]: [Object],
      [Symbol(pino.lsCache)]: [Object],
      [Symbol(pino.levelVal)]: 10
    },
    trace: [Function: bound trace],
    debug: [Function: bound debug],
    info: [Function: bound info],
    warn: [Function: bound warn],
    metric: [Function: bound metric],
    error: [Function: bound error],
    child: [Function: bound child]
  }
} any
undefined
Call 2:
GitHub {
  getCommitFiles: [AsyncFunction (anonymous)],
  graphqlRequest: [AsyncFunction (anonymous)],
  findFilesByFilenameAndRef: [AsyncFunction (anonymous)],
  findFilesByGlobAndRef: [AsyncFunction (anonymous)],
  createPullRequest: [AsyncFunction (anonymous)],
  getPullRequest: [AsyncFunction (anonymous)],
  updatePullRequest: [AsyncFunction (anonymous)],
  findFilesByExtensionAndRef: [AsyncFunction (anonymous)],
  createRelease: [AsyncFunction (anonymous)],
  commentOnIssue: [AsyncFunction (anonymous)],
  removeIssueLabels: [AsyncFunction (anonymous)],
  addIssueLabels: [AsyncFunction (anonymous)],
  repository: {
    owner: 'chingor13',
    repo: 'google-auth-library-java',
    defaultBranch: 'master'
  },
  octokit: OctokitWithDefaults {
    request: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    graphql: [Function: newApi] {
      defaults: [Function: bound withDefaults],
      endpoint: [Function]
    },
    log: {
      debug: [Function: debug],
      info: [Function: info],
      warn: [Function: bound warn],
      error: [Function: bound error]
    },
    hook: [Function: bound register] {
      api: [Object],
      remove: [Function: bound removeHook],
      before: [Function: bound addHook],
      error: [Function: bound addHook],
      after: [Function: bound addHook],
      wrap: [Function: bound addHook]
    },
    auth: [Function: bound auth] AsyncFunction {
      hook: [Function: bound hook] AsyncFunction
    },
    actions: {
      addCustomLabelsToSelfHostedRunnerForOrg: [Function],
      addCustomLabelsToSelfHostedRunnerForRepo: [Function],
      addSelectedRepoToOrgSecret: [Function],
      approveWorkflowRun: [Function],
      cancelWorkflowRun: [Function],
      createOrUpdateEnvironmentSecret: [Function],
      createOrUpdateOrgSecret: [Function],
      createOrUpdateRepoSecret: [Function],
      createRegistrationTokenForOrg: [Function],
      createRegistrationTokenForRepo: [Function],
      createRemoveTokenForOrg: [Function],
      createRemoveTokenForRepo: [Function],
      createWorkflowDispatch: [Function],
      deleteActionsCacheById: [Function],
      deleteActionsCacheByKey: [Function],
      deleteArtifact: [Function],
      deleteEnvironmentSecret: [Function],
      deleteOrgSecret: [Function],
      deleteRepoSecret: [Function],
      deleteSelfHostedRunnerFromOrg: [Function],
      deleteSelfHostedRunnerFromRepo: [Function],
      deleteWorkflowRun: [Function],
      deleteWorkflowRunLogs: [Function],
      disableSelectedRepositoryGithubActionsOrganization: [Function],
      disableWorkflow: [Function],
      downloadArtifact: [Function],
      downloadJobLogsForWorkflowRun: [Function],
      downloadWorkflowRunAttemptLogs: [Function],
      downloadWorkflowRunLogs: [Function],
      enableSelectedRepositoryGithubActionsOrganization: [Function],
      enableWorkflow: [Function],
      getActionsCacheList: [Function],
      getActionsCacheUsage: [Function],
      getActionsCacheUsageByRepoForOrg: [Function],
      getActionsCacheUsageForEnterprise: [Function],
      getActionsCacheUsageForOrg: [Function],
      getAllowedActionsOrganization: [Function],
      getAllowedActionsRepository: [Function],
      getArtifact: [Function],
      getEnvironmentPublicKey: [Function],
      getEnvironmentSecret: [Function],
      getGithubActionsDefaultWorkflowPermissionsEnterprise: [Function],
      getGithubActionsDefaultWorkflowPermissionsOrganization: [Function],
      getGithubActionsDefaultWorkflowPermissionsRepository: [Function],
      getGithubActionsPermissionsOrganization: [Function],
      getGithubActionsPermissionsRepository: [Function],
      getJobForWorkflowRun: [Function],
      getOrgPublicKey: [Function],
      getOrgSecret: [Function],
      getPendingDeploymentsForRun: [Function],
      getRepoPermissions: [Function],
      getRepoPublicKey: [Function],
      getRepoSecret: [Function],
      getReviewsForRun: [Function],
      getSelfHostedRunnerForOrg: [Function],
      getSelfHostedRunnerForRepo: [Function],
      getWorkflow: [Function],
      getWorkflowAccessToRepository: [Function],
      getWorkflowRun: [Function],
      getWorkflowRunAttempt: [Function],
      getWorkflowRunUsage: [Function],
      getWorkflowUsage: [Function],
      listArtifactsForRepo: [Function],
      listEnvironmentSecrets: [Function],
      listJobsForWorkflowRun: [Function],
      listJobsForWorkflowRunAttempt: [Function],
      listLabelsForSelfHostedRunnerForOrg: [Function],
      listLabelsForSelfHostedRunnerForRepo: [Function],
      listOrgSecrets: [Function],
      listRepoSecrets: [Function],
      listRepoWorkflows: [Function],
      listRunnerApplicationsForOrg: [Function],
      listRunnerApplicationsForRepo: [Function],
      listSelectedReposForOrgSecret: [Function],
      listSelectedRepositoriesEnabledGithubActionsOrganization: [Function],
      listSelfHostedRunnersForOrg: [Function],
      listSelfHostedRunnersForRepo: [Function],
      listWorkflowRunArtifacts: [Function],
      listWorkflowRuns: [Function],
      listWorkflowRunsForRepo: [Function],
      reRunJobForWorkflowRun: [Function],
      reRunWorkflow: [Function],
      reRunWorkflowFailedJobs: [Function],
      removeAllCustomLabelsFromSelfHostedRunnerForOrg: [Function],
      removeAllCustomLabelsFromSelfHostedRunnerForRepo: [Function],
      removeCustomLabelFromSelfHostedRunnerForOrg: [Function],
      removeCustomLabelFromSelfHostedRunnerForRepo: [Function],
      removeSelectedRepoFromOrgSecret: [Function],
      reviewPendingDeploymentsForRun: [Function],
      setAllowedActionsOrganization: [Function],
      setAllowedActionsRepository: [Function],
      setCustomLabelsForSelfHostedRunnerForOrg: [Function],
      setCustomLabelsForSelfHostedRunnerForRepo: [Function],
      setGithubActionsDefaultWorkflowPermissionsEnterprise: [Function],
      setGithubActionsDefaultWorkflowPermissionsOrganization: [Function],
      setGithubActionsDefaultWorkflowPermissionsRepository: [Function],
      setGithubActionsPermissionsOrganization: [Function],
      setGithubActionsPermissionsRepository: [Function],
      setSelectedReposForOrgSecret: [Function],
      setSelectedRepositoriesEnabledGithubActionsOrganization: [Function],
      setWorkflowAccessToRepository: [Function]
    },
    activity: {
      checkRepoIsStarredByAuthenticatedUser: [Function],
      deleteRepoSubscription: [Function],
      deleteThreadSubscription: [Function],
      getFeeds: [Function],
      getRepoSubscription: [Function],
      getThread: [Function],
      getThreadSubscriptionForAuthenticatedUser: [Function],
      listEventsForAuthenticatedUser: [Function],
      listNotificationsForAuthenticatedUser: [Function],
      listOrgEventsForAuthenticatedUser: [Function],
      listPublicEvents: [Function],
      listPublicEventsForRepoNetwork: [Function],
      listPublicEventsForUser: [Function],
      listPublicOrgEvents: [Function],
      listReceivedEventsForUser: [Function],
      listReceivedPublicEventsForUser: [Function],
      listRepoEvents: [Function],
      listRepoNotificationsForAuthenticatedUser: [Function],
      listReposStarredByAuthenticatedUser: [Function],
      listReposStarredByUser: [Function],
      listReposWatchedByUser: [Function],
      listStargazersForRepo: [Function],
      listWatchedReposForAuthenticatedUser: [Function],
      listWatchersForRepo: [Function],
      markNotificationsAsRead: [Function],
      markRepoNotificationsAsRead: [Function],
      markThreadAsRead: [Function],
      setRepoSubscription: [Function],
      setThreadSubscription: [Function],
      starRepoForAuthenticatedUser: [Function],
      unstarRepoForAuthenticatedUser: [Function]
    },
    apps: {
      addRepoToInstallation: [Function],
      addRepoToInstallationForAuthenticatedUser: [Function],
      checkToken: [Function],
      createFromManifest: [Function],
      createInstallationAccessToken: [Function],
      deleteAuthorization: [Function],
      deleteInstallation: [Function],
      deleteToken: [Function],
      getAuthenticated: [Function],
      getBySlug: [Function],
      getInstallation: [Function],
      getOrgInstallation: [Function],
      getRepoInstallation: [Function],
      getSubscriptionPlanForAccount: [Function],
      getSubscriptionPlanForAccountStubbed: [Function],
      getUserInstallation: [Function],
      getWebhookConfigForApp: [Function],
      getWebhookDelivery: [Function],
      listAccountsForPlan: [Function],
      listAccountsForPlanStubbed: [Function],
      listInstallationReposForAuthenticatedUser: [Function],
      listInstallations: [Function],
      listInstallationsForAuthenticatedUser: [Function],
      listPlans: [Function],
      listPlansStubbed: [Function],
      listReposAccessibleToInstallation: [Function],
      listSubscriptionsForAuthenticatedUser: [Function],
      listSubscriptionsForAuthenticatedUserStubbed: [Function],
      listWebhookDeliveries: [Function],
      redeliverWebhookDelivery: [Function],
      removeRepoFromInstallation: [Function],
      removeRepoFromInstallationForAuthenticatedUser: [Function],
      resetToken: [Function],
      revokeInstallationAccessToken: [Function],
      scopeToken: [Function],
      suspendInstallation: [Function],
      unsuspendInstallation: [Function],
      updateWebhookConfigForApp: [Function]
    },
    billing: {
      getGithubActionsBillingOrg: [Function],
      getGithubActionsBillingUser: [Function],
      getGithubAdvancedSecurityBillingGhe: [Function],
      getGithubAdvancedSecurityBillingOrg: [Function],
      getGithubPackagesBillingOrg: [Function],
      getGithubPackagesBillingUser: [Function],
      getSharedStorageBillingOrg: [Function],
      getSharedStorageBillingUser: [Function]
    },
    checks: {
      create: [Function],
      createSuite: [Function],
      get: [Function],
      getSuite: [Function],
      listAnnotations: [Function],
      listForRef: [Function],
      listForSuite: [Function],
      listSuitesForRef: [Function],
      rerequestRun: [Function],
      rerequestSuite: [Function],
      setSuitesPreferences: [Function],
      update: [Function]
    },
    codeScanning: {
      deleteAnalysis: [Function],
      getAlert: [Function],
      getAnalysis: [Function],
      getCodeqlDatabase: [Function],
      getSarif: [Function],
      listAlertInstances: [Function],
      listAlertsForEnterprise: [Function],
      listAlertsForOrg: [Function],
      listAlertsForRepo: [Function],
      listAlertsInstances: [Function],
      listCodeqlDatabases: [Function],
      listRecentAnalyses: [Function],
      updateAlert: [Function],
      uploadSarif: [Function]
    },
    codesOfConduct: { getAllCodesOfConduct: [Function], getConductCode: [Function] },
    codespaces: {
      addRepositoryForSecretForAuthenticatedUser: [Function],
      addSelectedRepoToOrgSecret: [Function],
      codespaceMachinesForAuthenticatedUser: [Function],
      createForAuthenticatedUser: [Function],
      createOrUpdateOrgSecret: [Function],
      createOrUpdateRepoSecret: [Function],
      createOrUpdateSecretForAuthenticatedUser: [Function],
      createWithPrForAuthenticatedUser: [Function],
      createWithRepoForAuthenticatedUser: [Function],
      deleteForAuthenticatedUser: [Function],
      deleteFromOrganization: [Function],
      deleteOrgSecret: [Function],
      deleteRepoSecret: [Function],
      deleteSecretForAuthenticatedUser: [Function],
      exportForAuthenticatedUser: [Function],
      getExportDetailsForAuthenticatedUser: [Function],
      getForAuthenticatedUser: [Function],
      getOrgPublicKey: [Function],
      getOrgSecret: [Function],
      getPublicKeyForAuthenticatedUser: [Function],
      getRepoPublicKey: [Function],
      getRepoSecret: [Function],
      getSecretForAuthenticatedUser: [Function],
      listDevcontainersInRepositoryForAuthenticatedUser: [Function],
      listForAuthenticatedUser: [Function],
      listInOrganization: [Function],
      listInRepositoryForAuthenticatedUser: [Function],
      listOrgSecrets: [Function],
      listRepoSecrets: [Function],
      listRepositoriesForSecretForAuthenticatedUser: [Function],
      listSecretsForAuthenticatedUser: [Function],
      listSelectedReposForOrgSecret: [Function],
      preFlightWithRepoForAuthenticatedUser: [Function],
      removeRepositoryForSecretForAuthenticatedUser: [Function],
      removeSelectedRepoFromOrgSecret: [Function],
      repoMachinesForAuthenticatedUser: [Function],
      setRepositoriesForSecretForAuthenticatedUser: [Function],
      setSelectedReposForOrgSecret: [Function],
      startForAuthenticatedUser: [Function],
      stopForAuthenticatedUser: [Function],
      stopInOrganization: [Function],
      updateForAuthenticatedUser: [Function]
    },
    dependabot: {
      addSelectedRepoToOrgSecret: [Function],
      createOrUpdateOrgSecret: [Function],
      createOrUpdateRepoSecret: [Function],
      deleteOrgSecret: [Function],
      deleteRepoSecret: [Function],
      getAlert: [Function],
      getOrgPublicKey: [Function],
      getOrgSecret: [Function],
      getRepoPublicKey: [Function],
      getRepoSecret: [Function],
      listAlertsForRepo: [Function],
      listOrgSecrets: [Function],
      listRepoSecrets: [Function],
      listSelectedReposForOrgSecret: [Function],
      removeSelectedRepoFromOrgSecret: [Function],
      setSelectedReposForOrgSecret: [Function],
      updateAlert: [Function]
    },
    dependencyGraph: { createRepositorySnapshot: [Function], diffRange: [Function] },
    emojis: { get: [Function] },
    enterpriseAdmin: {
      addCustomLabelsToSelfHostedRunnerForEnterprise: [Function],
      disableSelectedOrganizationGithubActionsEnterprise: [Function],
      enableSelectedOrganizationGithubActionsEnterprise: [Function],
      getAllowedActionsEnterprise: [Function],
      getGithubActionsPermissionsEnterprise: [Function],
      getServerStatistics: [Function],
      listLabelsForSelfHostedRunnerForEnterprise: [Function],
      listSelectedOrganizationsEnabledGithubActionsEnterprise: [Function],
      removeAllCustomLabelsFromSelfHostedRunnerForEnterprise: [Function],
      removeCustomLabelFromSelfHostedRunnerForEnterprise: [Function],
      setAllowedActionsEnterprise: [Function],
      setCustomLabelsForSelfHostedRunnerForEnterprise: [Function],
      setGithubActionsPermissionsEnterprise: [Function],
      setSelectedOrganizationsEnabledGithubActionsEnterprise: [Function]
    },
    gists: {
      checkIsStarred: [Function],
      create: [Function],
      createComment: [Function],
      delete: [Function],
      deleteComment: [Function],
      fork: [Function],
      get: [Function],
      getComment: [Function],
      getRevision: [Function],
      list: [Function],
      listComments: [Function],
      listCommits: [Function],
      listForUser: [Function],
      listForks: [Function],
      listPublic: [Function],
      listStarred: [Function],
      star: [Function],
      unstar: [Function],
      update: [Function],
      updateComment: [Function]
    },
    git: {
      createBlob: [Function],
      createCommit: [Function],
      createRef: [Function],
      createTag: [Function],
      createTree: [Function],
      deleteRef: [Function],
      getBlob: [Function],
      getCommit: [Function],
      getRef: [Function],
      getTag: [Function],
      getTree: [Function],
      listMatchingRefs: [Function],
      updateRef: [Function]
    },
    gitignore: { getAllTemplates: [Function], getTemplate: [Function] },
    interactions: {
      getRestrictionsForAuthenticatedUser: [Function],
      getRestrictionsForOrg: [Function],
      getRestrictionsForRepo: [Function],
      getRestrictionsForYourPublicRepos: [Function],
      removeRestrictionsForAuthenticatedUser: [Function],
      removeRestrictionsForOrg: [Function],
      removeRestrictionsForRepo: [Function],
      removeRestrictionsForYourPublicRepos: [Function],
      setRestrictionsForAuthenticatedUser: [Function],
      setRestrictionsForOrg: [Function],
      setRestrictionsForRepo: [Function],
      setRestrictionsForYourPublicRepos: [Function]
    },
    issues: {
      addAssignees: [Function],
      addLabels: [Function],
      checkUserCanBeAssigned: [Function],
      create: [Function],
      createComment: [Function],
      createLabel: [Function],
      createMilestone: [Function],
      deleteComment: [Function],
      deleteLabel: [Function],
      deleteMilestone: [Function],
      get: [Function],
      getComment: [Function],
      getEvent: [Function],
      getLabel: [Function],
      getMilestone: [Function],
      list: [Function],
      listAssignees: [Function],
      listComments: [Function],
      listCommentsForRepo: [Function],
      listEvents: [Function],
      listEventsForRepo: [Function],
      listEventsForTimeline: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listForRepo: [Function],
      listLabelsForMilestone: [Function],
      listLabelsForRepo: [Function],
      listLabelsOnIssue: [Function],
      listMilestones: [Function],
      lock: [Function],
      removeAllLabels: [Function],
      removeAssignees: [Function],
      removeLabel: [Function],
      setLabels: [Function],
      unlock: [Function],
      update: [Function],
      updateComment: [Function],
      updateLabel: [Function],
      updateMilestone: [Function]
    },
    licenses: {
      get: [Function],
      getAllCommonlyUsed: [Function],
      getForRepo: [Function]
    },
    markdown: { render: [Function], renderRaw: [Function] },
    meta: {
      get: [Function],
      getOctocat: [Function],
      getZen: [Function],
      root: [Function]
    },
    migrations: {
      cancelImport: [Function],
      deleteArchiveForAuthenticatedUser: [Function],
      deleteArchiveForOrg: [Function],
      downloadArchiveForOrg: [Function],
      getArchiveForAuthenticatedUser: [Function],
      getCommitAuthors: [Function],
      getImportStatus: [Function],
      getLargeFiles: [Function],
      getStatusForAuthenticatedUser: [Function],
      getStatusForOrg: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listReposForAuthenticatedUser: [Function],
      listReposForOrg: [Function],
      listReposForUser: [Function],
      mapCommitAuthor: [Function],
      setLfsPreference: [Function],
      startForAuthenticatedUser: [Function],
      startForOrg: [Function],
      startImport: [Function],
      unlockRepoForAuthenticatedUser: [Function],
      unlockRepoForOrg: [Function],
      updateImport: [Function]
    },
    orgs: {
      addSecurityManagerTeam: [Function],
      blockUser: [Function],
      cancelInvitation: [Function],
      checkBlockedUser: [Function],
      checkMembershipForUser: [Function],
      checkPublicMembershipForUser: [Function],
      convertMemberToOutsideCollaborator: [Function],
      createCustomRole: [Function],
      createInvitation: [Function],
      createWebhook: [Function],
      deleteCustomRole: [Function],
      deleteWebhook: [Function],
      enableOrDisableSecurityProductOnAllOrgRepos: [Function],
      get: [Function],
      getMembershipForAuthenticatedUser: [Function],
      getMembershipForUser: [Function],
      getWebhook: [Function],
      getWebhookConfigForOrg: [Function],
      getWebhookDelivery: [Function],
      list: [Function],
      listAppInstallations: [Function],
      listBlockedUsers: [Function],
      listCustomRoles: [Function],
      listFailedInvitations: [Function],
      listFineGrainedPermissions: [Function],
      listForAuthenticatedUser: [Function],
      listForUser: [Function],
      listInvitationTeams: [Function],
      listMembers: [Function],
      listMembershipsForAuthenticatedUser: [Function],
      listOutsideCollaborators: [Function],
      listPendingInvitations: [Function],
      listPublicMembers: [Function],
      listSecurityManagerTeams: [Function],
      listWebhookDeliveries: [Function],
      listWebhooks: [Function],
      pingWebhook: [Function],
      redeliverWebhookDelivery: [Function],
      removeMember: [Function],
      removeMembershipForUser: [Function],
      removeOutsideCollaborator: [Function],
      removePublicMembershipForAuthenticatedUser: [Function],
      removeSecurityManagerTeam: [Function],
      setMembershipForUser: [Function],
      setPublicMembershipForAuthenticatedUser: [Function],
      unblockUser: [Function],
      update: [Function],
      updateCustomRole: [Function],
      updateMembershipForAuthenticatedUser: [Function],
      updateWebhook: [Function],
      updateWebhookConfigForOrg: [Function]
    },
    packages: {
      deletePackageForAuthenticatedUser: [Function],
      deletePackageForOrg: [Function],
      deletePackageForUser: [Function],
      deletePackageVersionForAuthenticatedUser: [Function],
      deletePackageVersionForOrg: [Function],
      deletePackageVersionForUser: [Function],
      getAllPackageVersionsForAPackageOwnedByAnOrg: [Function],
      getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [Function],
      getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [Function],
      getAllPackageVersionsForPackageOwnedByOrg: [Function],
      getAllPackageVersionsForPackageOwnedByUser: [Function],
      getPackageForAuthenticatedUser: [Function],
      getPackageForOrganization: [Function],
      getPackageForUser: [Function],
      getPackageVersionForAuthenticatedUser: [Function],
      getPackageVersionForOrganization: [Function],
      getPackageVersionForUser: [Function],
      listPackagesForAuthenticatedUser: [Function],
      listPackagesForOrganization: [Function],
      listPackagesForUser: [Function],
      restorePackageForAuthenticatedUser: [Function],
      restorePackageForOrg: [Function],
      restorePackageForUser: [Function],
      restorePackageVersionForAuthenticatedUser: [Function],
      restorePackageVersionForOrg: [Function],
      restorePackageVersionForUser: [Function]
    },
    projects: {
      addCollaborator: [Function],
      createCard: [Function],
      createColumn: [Function],
      createForAuthenticatedUser: [Function],
      createForOrg: [Function],
      createForRepo: [Function],
      delete: [Function],
      deleteCard: [Function],
      deleteColumn: [Function],
      get: [Function],
      getCard: [Function],
      getColumn: [Function],
      getPermissionForUser: [Function],
      listCards: [Function],
      listCollaborators: [Function],
      listColumns: [Function],
      listForOrg: [Function],
      listForRepo: [Function],
      listForUser: [Function],
      moveCard: [Function],
      moveColumn: [Function],
      removeCollaborator: [Function],
      update: [Function],
      updateCard: [Function],
      updateColumn: [Function]
    },
    pulls: {
      checkIfMerged: [Function],
      create: [Function],
      createReplyForReviewComment: [Function],
      createReview: [Function],
      createReviewComment: [Function],
      deletePendingReview: [Function],
      deleteReviewComment: [Function],
      dismissReview: [Function],
      get: [Function],
      getReview: [Function],
      getReviewComment: [Function],
      list: [Function],
      listCommentsForReview: [Function],
      listCommits: [Function],
      listFiles: [Function],
      listRequestedReviewers: [Function],
      listReviewComments: [Function],
      listReviewCommentsForRepo: [Function],
      listReviews: [Function],
      merge: [Function],
      removeRequestedReviewers: [Function],
      requestReviewers: [Function],
      submitReview: [Function],
      update: [Function],
      updateBranch: [Function],
      updateReview: [Function],
      updateReviewComment: [Function]
    },
    rateLimit: { get: [Function] },
    reactions: {
      createForCommitComment: [Function],
      createForIssue: [Function],
      createForIssueComment: [Function],
      createForPullRequestReviewComment: [Function],
      createForRelease: [Function],
      createForTeamDiscussionCommentInOrg: [Function],
      createForTeamDiscussionInOrg: [Function],
      deleteForCommitComment: [Function],
      deleteForIssue: [Function],
      deleteForIssueComment: [Function],
      deleteForPullRequestComment: [Function],
      deleteForRelease: [Function],
      deleteForTeamDiscussion: [Function],
      deleteForTeamDiscussionComment: [Function],
      listForCommitComment: [Function],
      listForIssue: [Function],
      listForIssueComment: [Function],
      listForPullRequestReviewComment: [Function],
      listForRelease: [Function],
      listForTeamDiscussionCommentInOrg: [Function],
      listForTeamDiscussionInOrg: [Function]
    },
    repos: {
      acceptInvitation: [Function],
      acceptInvitationForAuthenticatedUser: [Function],
      addAppAccessRestrictions: [Function],
      addCollaborator: [Function],
      addStatusCheckContexts: [Function],
      addTeamAccessRestrictions: [Function],
      addUserAccessRestrictions: [Function],
      checkCollaborator: [Function],
      checkVulnerabilityAlerts: [Function],
      codeownersErrors: [Function],
      compareCommits: [Function],
      compareCommitsWithBasehead: [Function],
      createAutolink: [Function],
      createCommitComment: [Function],
      createCommitSignatureProtection: [Function],
      createCommitStatus: [Function],
      createDeployKey: [Function],
      createDeployment: [Function],
      createDeploymentBranchPolicy: [Function],
      createDeploymentStatus: [Function],
      createDispatchEvent: [Function],
      createForAuthenticatedUser: [Function],
      createFork: [Function],
      createInOrg: [Function],
      createOrUpdateEnvironment: [Function],
      createOrUpdateFileContents: [Function],
      createPagesDeployment: [Function],
      createPagesSite: [Function],
      createRelease: [Function],
      createTagProtection: [Function],
      createUsingTemplate: [Function],
      createWebhook: [Function],
      declineInvitation: [Function],
      declineInvitationForAuthenticatedUser: [Function],
      delete: [Function],
      deleteAccessRestrictions: [Function],
      deleteAdminBranchProtection: [Function],
      deleteAnEnvironment: [Function],
      deleteAutolink: [Function],
      deleteBranchProtection: [Function],
      deleteCommitComment: [Function],
      deleteCommitSignatureProtection: [Function],
      deleteDeployKey: [Function],
      deleteDeployment: [Function],
      deleteDeploymentBranchPolicy: [Function],
      deleteFile: [Function],
      deleteInvitation: [Function],
      deletePagesSite: [Function],
      deletePullRequestReviewProtection: [Function],
      deleteRelease: [Function],
      deleteReleaseAsset: [Function],
      deleteTagProtection: [Function],
      deleteWebhook: [Function],
      disableAutomatedSecurityFixes: [Function],
      disableLfsForRepo: [Function],
      disableVulnerabilityAlerts: [Function],
      downloadArchive: [Function],
      downloadTarballArchive: [Function],
      downloadZipballArchive: [Function],
      enableAutomatedSecurityFixes: [Function],
      enableLfsForRepo: [Function],
      enableVulnerabilityAlerts: [Function],
      generateReleaseNotes: [Function],
      get: [Function],
      getAccessRestrictions: [Function],
      getAdminBranchProtection: [Function],
      getAllEnvironments: [Function],
      getAllStatusCheckContexts: [Function],
      getAllTopics: [Function],
      getAppsWithAccessToProtectedBranch: [Function],
      getAutolink: [Function],
      getBranch: [Function],
      getBranchProtection: [Function],
      getClones: [Function],
      getCodeFrequencyStats: [Function],
      getCollaboratorPermissionLevel: [Function],
      getCombinedStatusForRef: [Function],
      getCommit: [Function],
      getCommitActivityStats: [Function],
      getCommitComment: [Function],
      getCommitSignatureProtection: [Function],
      getCommunityProfileMetrics: [Function],
      getContent: [Function],
      getContributorsStats: [Function],
      getDeployKey: [Function],
      getDeployment: [Function],
      getDeploymentBranchPolicy: [Function],
      getDeploymentStatus: [Function],
      getEnvironment: [Function],
      getLatestPagesBuild: [Function],
      getLatestRelease: [Function],
      getPages: [Function],
      getPagesBuild: [Function],
      getPagesHealthCheck: [Function],
      getParticipationStats: [Function],
      getPullRequestReviewProtection: [Function],
      getPunchCardStats: [Function],
      getReadme: [Function],
      getReadmeInDirectory: [Function],
      getRelease: [Function],
      getReleaseAsset: [Function],
      getReleaseByTag: [Function],
      getStatusChecksProtection: [Function],
      getTeamsWithAccessToProtectedBranch: [Function],
      getTopPaths: [Function],
      getTopReferrers: [Function],
      getUsersWithAccessToProtectedBranch: [Function],
      getViews: [Function],
      getWebhook: [Function],
      getWebhookConfigForRepo: [Function],
      getWebhookDelivery: [Function],
      listAutolinks: [Function],
      listBranches: [Function],
      listBranchesForHeadCommit: [Function],
      listCollaborators: [Function],
      listCommentsForCommit: [Function],
      listCommitCommentsForRepo: [Function],
      listCommitStatusesForRef: [Function],
      listCommits: [Function],
      listContributors: [Function],
      listDeployKeys: [Function],
      listDeploymentBranchPolicies: [Function],
      listDeploymentStatuses: [Function],
      listDeployments: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listForUser: [Function],
      listForks: [Function],
      listInvitations: [Function],
      listInvitationsForAuthenticatedUser: [Function],
      listLanguages: [Function],
      listPagesBuilds: [Function],
      listPublic: [Function],
      listPullRequestsAssociatedWithCommit: [Function],
      listReleaseAssets: [Function],
      listReleases: [Function],
      listTagProtection: [Function],
      listTags: [Function],
      listTeams: [Function],
      listWebhookDeliveries: [Function],
      listWebhooks: [Function],
      merge: [Function],
      mergeUpstream: [Function],
      pingWebhook: [Function],
      redeliverWebhookDelivery: [Function],
      removeAppAccessRestrictions: [Function],
      removeCollaborator: [Function],
      removeStatusCheckContexts: [Function],
      removeStatusCheckProtection: [Function],
      removeTeamAccessRestrictions: [Function],
      removeUserAccessRestrictions: [Function],
      renameBranch: [Function],
      replaceAllTopics: [Function],
      requestPagesBuild: [Function],
      setAdminBranchProtection: [Function],
      setAppAccessRestrictions: [Function],
      setStatusCheckContexts: [Function],
      setTeamAccessRestrictions: [Function],
      setUserAccessRestrictions: [Function],
      testPushWebhook: [Function],
      transfer: [Function],
      update: [Function],
      updateBranchProtection: [Function],
      updateCommitComment: [Function],
      updateDeploymentBranchPolicy: [Function],
      updateInformationAboutPagesSite: [Function],
      updateInvitation: [Function],
      updatePullRequestReviewProtection: [Function],
      updateRelease: [Function],
      updateReleaseAsset: [Function],
      updateStatusCheckPotection: [Function],
      updateStatusCheckProtection: [Function],
      updateWebhook: [Function],
      updateWebhookConfigForRepo: [Function],
      uploadReleaseAsset: [Function]
    },
    search: {
      code: [Function],
      commits: [Function],
      issuesAndPullRequests: [Function],
      labels: [Function],
      repos: [Function],
      topics: [Function],
      users: [Function]
    },
    secretScanning: {
      getAlert: [Function],
      listAlertsForEnterprise: [Function],
      listAlertsForOrg: [Function],
      listAlertsForRepo: [Function],
      listLocationsForAlert: [Function],
      updateAlert: [Function]
    },
    teams: {
      addOrUpdateMembershipForUserInOrg: [Function],
      addOrUpdateProjectPermissionsInOrg: [Function],
      addOrUpdateRepoPermissionsInOrg: [Function],
      checkPermissionsForProjectInOrg: [Function],
      checkPermissionsForRepoInOrg: [Function],
      create: [Function],
      createDiscussionCommentInOrg: [Function],
      createDiscussionInOrg: [Function],
      deleteDiscussionCommentInOrg: [Function],
      deleteDiscussionInOrg: [Function],
      deleteInOrg: [Function],
      getByName: [Function],
      getDiscussionCommentInOrg: [Function],
      getDiscussionInOrg: [Function],
      getMembershipForUserInOrg: [Function],
      list: [Function],
      listChildInOrg: [Function],
      listDiscussionCommentsInOrg: [Function],
      listDiscussionsInOrg: [Function],
      listForAuthenticatedUser: [Function],
      listMembersInOrg: [Function],
      listPendingInvitationsInOrg: [Function],
      listProjectsInOrg: [Function],
      listReposInOrg: [Function],
      removeMembershipForUserInOrg: [Function],
      removeProjectInOrg: [Function],
      removeRepoInOrg: [Function],
      updateDiscussionCommentInOrg: [Function],
      updateDiscussionInOrg: [Function],
      updateInOrg: [Function]
    },
    users: {
      addEmailForAuthenticated: [Function],
      addEmailForAuthenticatedUser: [Function],
      block: [Function],
      checkBlocked: [Function],
      checkFollowingForUser: [Function],
      checkPersonIsFollowedByAuthenticated: [Function],
      createGpgKeyForAuthenticated: [Function],
      createGpgKeyForAuthenticatedUser: [Function],
      createPublicSshKeyForAuthenticated: [Function],
      createPublicSshKeyForAuthenticatedUser: [Function],
      createSshSigningKeyForAuthenticatedUser: [Function],
      deleteEmailForAuthenticated: [Function],
      deleteEmailForAuthenticatedUser: [Function],
      deleteGpgKeyForAuthenticated: [Function],
      deleteGpgKeyForAuthenticatedUser: [Function],
      deletePublicSshKeyForAuthenticated: [Function],
      deletePublicSshKeyForAuthenticatedUser: [Function],
      deleteSshSigningKeyForAuthenticatedUser: [Function],
      follow: [Function],
      getAuthenticated: [Function],
      getByUsername: [Function],
      getContextForUser: [Function],
      getGpgKeyForAuthenticated: [Function],
      getGpgKeyForAuthenticatedUser: [Function],
      getPublicSshKeyForAuthenticated: [Function],
      getPublicSshKeyForAuthenticatedUser: [Function],
      getSshSigningKeyForAuthenticatedUser: [Function],
      list: [Function],
      listBlockedByAuthenticated: [Function],
      listBlockedByAuthenticatedUser: [Function],
      listEmailsForAuthenticated: [Function],
      listEmailsForAuthenticatedUser: [Function],
      listFollowedByAuthenticated: [Function],
      listFollowedByAuthenticatedUser: [Function],
      listFollowersForAuthenticatedUser: [Function],
      listFollowersForUser: [Function],
      listFollowingForUser: [Function],
      listGpgKeysForAuthenticated: [Function],
      listGpgKeysForAuthenticatedUser: [Function],
      listGpgKeysForUser: [Function],
      listPublicEmailsForAuthenticated: [Function],
      listPublicEmailsForAuthenticatedUser: [Function],
      listPublicKeysForUser: [Function],
      listPublicSshKeysForAuthenticated: [Function],
      listPublicSshKeysForAuthenticatedUser: [Function],
      listSshSigningKeysForAuthenticatedUser: [Function],
      listSshSigningKeysForUser: [Function],
      setPrimaryEmailVisibilityForAuthenticated: [Function],
      setPrimaryEmailVisibilityForAuthenticatedUser: [Function],
      unblock: [Function],
      unfollow: [Function],
      updateAuthenticated: [Function]
    },
    rest: {
      actions: [Object],
      activity: [Object],
      apps: [Object],
      billing: [Object],
      checks: [Object],
      codeScanning: [Object],
      codesOfConduct: [Object],
      codespaces: [Object],
      dependabot: [Object],
      dependencyGraph: [Object],
      emojis: [Object],
      enterpriseAdmin: [Object],
      gists: [Object],
      git: [Object],
      gitignore: [Object],
      interactions: [Object],
      issues: [Object],
      licenses: [Object],
      markdown: [Object],
      meta: [Object],
      migrations: [Object],
      orgs: [Object],
      packages: [Object],
      projects: [Object],
      pulls: [Object],
      rateLimit: [Object],
      reactions: [Object],
      repos: [Object],
      search: [Object],
      secretScanning: [Object],
      teams: [Object],
      users: [Object]
    },
    paginate: [Function: bound paginate] { iterator: [Function: bound iterator] }
  },
  request: [Function: newApi] {
    endpoint: [Function: bound endpointWithDefaults] {
      DEFAULTS: [Object],
      defaults: [Function: bound withDefaults],
      merge: [Function: bound merge],
      parse: [Function: parse]
    },
    defaults: [Function: bound withDefaults]
  },
  graphql: [Function: newApi] {
    defaults: [Function: bound withDefaults],
    endpoint: [Function: bound endpointWithDefaults] {
      DEFAULTS: [Object],
      defaults: [Function: bound withDefaults],
      merge: [Function: bound merge],
      parse: [Function: parse]
    }
  },
  fileCache: RepositoryFileCache {
    octokit: OctokitWithDefaults {
      request: [Function],
      graphql: [Function],
      log: [Object],
      hook: [Function],
      auth: [AsyncFunction],
      actions: [Object],
      activity: [Object],
      apps: [Object],
      billing: [Object],
      checks: [Object],
      codeScanning: [Object],
      codesOfConduct: [Object],
      codespaces: [Object],
      dependabot: [Object],
      dependencyGraph: [Object],
      emojis: [Object],
      enterpriseAdmin: [Object],
      gists: [Object],
      git: [Object],
      gitignore: [Object],
      interactions: [Object],
      issues: [Object],
      licenses: [Object],
      markdown: [Object],
      meta: [Object],
      migrations: [Object],
      orgs: [Object],
      packages: [Object],
      projects: [Object],
      pulls: [Object],
      rateLimit: [Object],
      reactions: [Object],
      repos: [Object],
      search: [Object],
      secretScanning: [Object],
      teams: [Object],
      users: [Object],
      rest: [Object],
      paginate: [Function]
    },
    repository: {
      owner: 'chingor13',
      repo: 'google-auth-library-java',
      defaultBranch: 'master'
    },
    cache: Map(0) {}
  },
  logger: GCFLogger {
    destination: SonicBoom {
      _bufs: [],
      _len: 0,
      fd: 1,
      _writing: false,
      _writingBuf: '',
      _ending: false,
      _reopening: false,
      _asyncDrainScheduled: true,
      _hwm: 16387,
      file: null,
      destroyed: false,
      minLength: 0,
      maxLength: 0,
      maxWrite: 16384,
      sync: true,
      _fsync: false,
      append: true,
      mode: undefined,
      retryEAGAIN: [Function (anonymous)],
      mkdir: false,
      release: [Function (anonymous)],
      _events: [Object: null prototype],
      _eventsCount: 2
    },
    pino: EventEmitter {
      levels: [Object],
      silent: [Function: noop],
      onChild: [Function: noop],
      trace: [Function: LOG],
      debug: [Function: LOG],
      info: [Function: LOG],
      warn: [Function: LOG],
      error: [Function: LOG],
      fatal: [Function (anonymous)],
      metric: [Function: LOG],
      [Symbol(pino.useOnlyCustomLevels)]: false,
      [Symbol(pino.stream)]: [SonicBoom],
      [Symbol(pino.time)]: [Function: nullTime],
      [Symbol(pino.timeSliceIndex)]: 0,
      [Symbol(pino.stringify)]: [Function: stringify],
      [Symbol(pino.stringifySafe)]: [Function: stringify],
      [Symbol(pino.stringifiers)]: {},
      [Symbol(pino.end)]: '}\n',
      [Symbol(pino.formatOpts)]: [Object],
      [Symbol(pino.messageKey)]: 'message',
      [Symbol(pino.errorKey)]: 'err',
      [Symbol(pino.nestedKey)]: null,
      [Symbol(pino.nestedKeyStr)]: '',
      [Symbol(pino.serializers)]: [Object],
      [Symbol(pino.mixin)]: undefined,
      [Symbol(pino.mixinMergeStrategy)]: undefined,
      [Symbol(pino.chindings)]: '',
      [Symbol(pino.formatters)]: [Object],
      [Symbol(pino.hooks)]: [Object],
      [Symbol(pino.lsCache)]: [Object],
      [Symbol(pino.levelVal)]: 10
    },
    trace: [Function: bound trace],
    debug: [Function: bound debug],
    info: [Function: bound info],
    warn: [Function: bound warn],
    metric: [Function: bound metric],
    error: [Function: bound error],
    child: [Function: bound child]
  }
} instanceOf(GitHub)
'"feature-branch"'
{
  releaseType: 'java-yoshi',
  versioning: undefined,
  bumpMinorPreMajor: undefined,
  bumpPatchForMinorPreMajor: undefined,
  draft: undefined,
  draftPullRequest: undefined,
  packageName: undefined,
  includeComponentInTag: false,
  pullRequestTitlePattern: undefined,
  changelogHost: undefined,
  changelogPath: undefined,
  changelogType: undefined,
  versionFile: undefined,
  extraFiles: undefined,
  initialVersion: undefined
} has("releaseType", java-yoshi)
{
  manifestPath: undefined,
  labels: undefined,
  releaseLabels: undefined,
  plugins: [ { type: 'sentence-case', specialWords: [Array] } ],
  logger: GCFLogger {
    destination: SonicBoom {
      _bufs: [],
      _len: 0,
      fd: 1,
      _writing: false,
      _writingBuf: '',
      _ending: false,
      _reopening: false,
      _asyncDrainScheduled: true,
      _hwm: 16387,
      file: null,
      destroyed: false,
      minLength: 0,
      maxLength: 0,
      maxWrite: 16384,
      sync: true,
      _fsync: false,
      append: true,
      mode: undefined,
      retryEAGAIN: [Function (anonymous)],
      mkdir: false,
      release: [Function (anonymous)],
      _events: [Object: null prototype],
      _eventsCount: 2
    },
    pino: EventEmitter {
      levels: [Object],
      silent: [Function: noop],
      onChild: [Function: noop],
      trace: [Function: LOG],
      debug: [Function: LOG],
      info: [Function: LOG],
      warn: [Function: LOG],
      error: [Function: LOG],
      fatal: [Function (anonymous)],
      metric: [Function: LOG],
      [Symbol(pino.useOnlyCustomLevels)]: false,
      [Symbol(pino.stream)]: [SonicBoom],
      [Symbol(pino.time)]: [Function: nullTime],
      [Symbol(pino.timeSliceIndex)]: 0,
      [Symbol(pino.stringify)]: [Function: stringify],
      [Symbol(pino.stringifySafe)]: [Function: stringify],
      [Symbol(pino.stringifiers)]: {},
      [Symbol(pino.end)]: '}\n',
      [Symbol(pino.formatOpts)]: [Object],
      [Symbol(pino.messageKey)]: 'message',
      [Symbol(pino.errorKey)]: 'err',
      [Symbol(pino.nestedKey)]: null,
      [Symbol(pino.nestedKeyStr)]: '',
      [Symbol(pino.serializers)]: [Object],
      [Symbol(pino.mixin)]: undefined,
      [Symbol(pino.mixinMergeStrategy)]: undefined,
      [Symbol(pino.chindings)]: '',
      [Symbol(pino.formatters)]: [Object],
      [Symbol(pino.hooks)]: [Object],
      [Symbol(pino.lsCache)]: [Object],
      [Symbol(pino.levelVal)]: 10
    },
    trace: [Function: bound trace],
    debug: [Function: bound debug],
    info: [Function: bound info],
    warn: [Function: bound warn],
    metric: [Function: bound metric],
    error: [Function: bound error],
    child: [Function: bound child]
  }
} any
undefined
      at Object.fail (node_modules/sinon/lib/sinon/assert.js:120:25)
      at failAssertion (node_modules/sinon/lib/sinon/assert.js:66:20)
      at Object.assert.<computed> [as calledOnceWithExactly] (node_modules/sinon/lib/sinon/assert.js:95:17)
      at Context.<anonymous> (test/release-please.ts:868:22)

  4) ReleasePleaseBot
       pull-request labeled event
         should try to create a release pull request for on-demand repo:
     AssertError: expected fromConfig to be called once and with exact arguments 
Call 1:
GitHub {
  getCommitFiles: [AsyncFunction (anonymous)],
  graphqlRequest: [AsyncFunction (anonymous)],
  findFilesByFilenameAndRef: [AsyncFunction (anonymous)],
  findFilesByGlobAndRef: [AsyncFunction (anonymous)],
  createPullRequest: [AsyncFunction (anonymous)],
  getPullRequest: [AsyncFunction (anonymous)],
  updatePullRequest: [AsyncFunction (anonymous)],
  findFilesByExtensionAndRef: [AsyncFunction (anonymous)],
  createRelease: [AsyncFunction (anonymous)],
  commentOnIssue: [AsyncFunction (anonymous)],
  removeIssueLabels: [AsyncFunction (anonymous)],
  addIssueLabels: [AsyncFunction (anonymous)],
  repository: { owner: 'Codertocat', repo: 'Hello-World', defaultBranch: 'master' },
  octokit: OctokitWithDefaults {
    request: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    graphql: [Function: newApi] {
      defaults: [Function: bound withDefaults],
      endpoint: [Function]
    },
    log: {
      debug: [Function: debug],
      info: [Function: info],
      warn: [Function: bound warn],
      error: [Function: bound error]
    },
    hook: [Function: bound register] {
      api: [Object],
      remove: [Function: bound removeHook],
      before: [Function: bound addHook],
      error: [Function: bound addHook],
      after: [Function: bound addHook],
      wrap: [Function: bound addHook]
    },
    auth: [Function: bound auth] AsyncFunction {
      hook: [Function: bound hook] AsyncFunction
    },
    actions: {
      addCustomLabelsToSelfHostedRunnerForOrg: [Function],
      addCustomLabelsToSelfHostedRunnerForRepo: [Function],
      addSelectedRepoToOrgSecret: [Function],
      approveWorkflowRun: [Function],
      cancelWorkflowRun: [Function],
      createOrUpdateEnvironmentSecret: [Function],
      createOrUpdateOrgSecret: [Function],
      createOrUpdateRepoSecret: [Function],
      createRegistrationTokenForOrg: [Function],
      createRegistrationTokenForRepo: [Function],
      createRemoveTokenForOrg: [Function],
      createRemoveTokenForRepo: [Function],
      createWorkflowDispatch: [Function],
      deleteActionsCacheById: [Function],
      deleteActionsCacheByKey: [Function],
      deleteArtifact: [Function],
      deleteEnvironmentSecret: [Function],
      deleteOrgSecret: [Function],
      deleteRepoSecret: [Function],
      deleteSelfHostedRunnerFromOrg: [Function],
      deleteSelfHostedRunnerFromRepo: [Function],
      deleteWorkflowRun: [Function],
      deleteWorkflowRunLogs: [Function],
      disableSelectedRepositoryGithubActionsOrganization: [Function],
      disableWorkflow: [Function],
      downloadArtifact: [Function],
      downloadJobLogsForWorkflowRun: [Function],
      downloadWorkflowRunAttemptLogs: [Function],
      downloadWorkflowRunLogs: [Function],
      enableSelectedRepositoryGithubActionsOrganization: [Function],
      enableWorkflow: [Function],
      getActionsCacheList: [Function],
      getActionsCacheUsage: [Function],
      getActionsCacheUsageByRepoForOrg: [Function],
      getActionsCacheUsageForEnterprise: [Function],
      getActionsCacheUsageForOrg: [Function],
      getAllowedActionsOrganization: [Function],
      getAllowedActionsRepository: [Function],
      getArtifact: [Function],
      getEnvironmentPublicKey: [Function],
      getEnvironmentSecret: [Function],
      getGithubActionsDefaultWorkflowPermissionsEnterprise: [Function],
      getGithubActionsDefaultWorkflowPermissionsOrganization: [Function],
      getGithubActionsDefaultWorkflowPermissionsRepository: [Function],
      getGithubActionsPermissionsOrganization: [Function],
      getGithubActionsPermissionsRepository: [Function],
      getJobForWorkflowRun: [Function],
      getOrgPublicKey: [Function],
      getOrgSecret: [Function],
      getPendingDeploymentsForRun: [Function],
      getRepoPermissions: [Function],
      getRepoPublicKey: [Function],
      getRepoSecret: [Function],
      getReviewsForRun: [Function],
      getSelfHostedRunnerForOrg: [Function],
      getSelfHostedRunnerForRepo: [Function],
      getWorkflow: [Function],
      getWorkflowAccessToRepository: [Function],
      getWorkflowRun: [Function],
      getWorkflowRunAttempt: [Function],
      getWorkflowRunUsage: [Function],
      getWorkflowUsage: [Function],
      listArtifactsForRepo: [Function],
      listEnvironmentSecrets: [Function],
      listJobsForWorkflowRun: [Function],
      listJobsForWorkflowRunAttempt: [Function],
      listLabelsForSelfHostedRunnerForOrg: [Function],
      listLabelsForSelfHostedRunnerForRepo: [Function],
      listOrgSecrets: [Function],
      listRepoSecrets: [Function],
      listRepoWorkflows: [Function],
      listRunnerApplicationsForOrg: [Function],
      listRunnerApplicationsForRepo: [Function],
      listSelectedReposForOrgSecret: [Function],
      listSelectedRepositoriesEnabledGithubActionsOrganization: [Function],
      listSelfHostedRunnersForOrg: [Function],
      listSelfHostedRunnersForRepo: [Function],
      listWorkflowRunArtifacts: [Function],
      listWorkflowRuns: [Function],
      listWorkflowRunsForRepo: [Function],
      reRunJobForWorkflowRun: [Function],
      reRunWorkflow: [Function],
      reRunWorkflowFailedJobs: [Function],
      removeAllCustomLabelsFromSelfHostedRunnerForOrg: [Function],
      removeAllCustomLabelsFromSelfHostedRunnerForRepo: [Function],
      removeCustomLabelFromSelfHostedRunnerForOrg: [Function],
      removeCustomLabelFromSelfHostedRunnerForRepo: [Function],
      removeSelectedRepoFromOrgSecret: [Function],
      reviewPendingDeploymentsForRun: [Function],
      setAllowedActionsOrganization: [Function],
      setAllowedActionsRepository: [Function],
      setCustomLabelsForSelfHostedRunnerForOrg: [Function],
      setCustomLabelsForSelfHostedRunnerForRepo: [Function],
      setGithubActionsDefaultWorkflowPermissionsEnterprise: [Function],
      setGithubActionsDefaultWorkflowPermissionsOrganization: [Function],
      setGithubActionsDefaultWorkflowPermissionsRepository: [Function],
      setGithubActionsPermissionsOrganization: [Function],
      setGithubActionsPermissionsRepository: [Function],
      setSelectedReposForOrgSecret: [Function],
      setSelectedRepositoriesEnabledGithubActionsOrganization: [Function],
      setWorkflowAccessToRepository: [Function]
    },
    activity: {
      checkRepoIsStarredByAuthenticatedUser: [Function],
      deleteRepoSubscription: [Function],
      deleteThreadSubscription: [Function],
      getFeeds: [Function],
      getRepoSubscription: [Function],
      getThread: [Function],
      getThreadSubscriptionForAuthenticatedUser: [Function],
      listEventsForAuthenticatedUser: [Function],
      listNotificationsForAuthenticatedUser: [Function],
      listOrgEventsForAuthenticatedUser: [Function],
      listPublicEvents: [Function],
      listPublicEventsForRepoNetwork: [Function],
      listPublicEventsForUser: [Function],
      listPublicOrgEvents: [Function],
      listReceivedEventsForUser: [Function],
      listReceivedPublicEventsForUser: [Function],
      listRepoEvents: [Function],
      listRepoNotificationsForAuthenticatedUser: [Function],
      listReposStarredByAuthenticatedUser: [Function],
      listReposStarredByUser: [Function],
      listReposWatchedByUser: [Function],
      listStargazersForRepo: [Function],
      listWatchedReposForAuthenticatedUser: [Function],
      listWatchersForRepo: [Function],
      markNotificationsAsRead: [Function],
      markRepoNotificationsAsRead: [Function],
      markThreadAsRead: [Function],
      setRepoSubscription: [Function],
      setThreadSubscription: [Function],
      starRepoForAuthenticatedUser: [Function],
      unstarRepoForAuthenticatedUser: [Function]
    },
    apps: {
      addRepoToInstallation: [Function],
      addRepoToInstallationForAuthenticatedUser: [Function],
      checkToken: [Function],
      createFromManifest: [Function],
      createInstallationAccessToken: [Function],
      deleteAuthorization: [Function],
      deleteInstallation: [Function],
      deleteToken: [Function],
      getAuthenticated: [Function],
      getBySlug: [Function],
      getInstallation: [Function],
      getOrgInstallation: [Function],
      getRepoInstallation: [Function],
      getSubscriptionPlanForAccount: [Function],
      getSubscriptionPlanForAccountStubbed: [Function],
      getUserInstallation: [Function],
      getWebhookConfigForApp: [Function],
      getWebhookDelivery: [Function],
      listAccountsForPlan: [Function],
      listAccountsForPlanStubbed: [Function],
      listInstallationReposForAuthenticatedUser: [Function],
      listInstallations: [Function],
      listInstallationsForAuthenticatedUser: [Function],
      listPlans: [Function],
      listPlansStubbed: [Function],
      listReposAccessibleToInstallation: [Function],
      listSubscriptionsForAuthenticatedUser: [Function],
      listSubscriptionsForAuthenticatedUserStubbed: [Function],
      listWebhookDeliveries: [Function],
      redeliverWebhookDelivery: [Function],
      removeRepoFromInstallation: [Function],
      removeRepoFromInstallationForAuthenticatedUser: [Function],
      resetToken: [Function],
      revokeInstallationAccessToken: [Function],
      scopeToken: [Function],
      suspendInstallation: [Function],
      unsuspendInstallation: [Function],
      updateWebhookConfigForApp: [Function]
    },
    billing: {
      getGithubActionsBillingOrg: [Function],
      getGithubActionsBillingUser: [Function],
      getGithubAdvancedSecurityBillingGhe: [Function],
      getGithubAdvancedSecurityBillingOrg: [Function],
      getGithubPackagesBillingOrg: [Function],
      getGithubPackagesBillingUser: [Function],
      getSharedStorageBillingOrg: [Function],
      getSharedStorageBillingUser: [Function]
    },
    checks: {
      create: [Function],
      createSuite: [Function],
      get: [Function],
      getSuite: [Function],
      listAnnotations: [Function],
      listForRef: [Function],
      listForSuite: [Function],
      listSuitesForRef: [Function],
      rerequestRun: [Function],
      rerequestSuite: [Function],
      setSuitesPreferences: [Function],
      update: [Function]
    },
    codeScanning: {
      deleteAnalysis: [Function],
      getAlert: [Function],
      getAnalysis: [Function],
      getCodeqlDatabase: [Function],
      getSarif: [Function],
      listAlertInstances: [Function],
      listAlertsForEnterprise: [Function],
      listAlertsForOrg: [Function],
      listAlertsForRepo: [Function],
      listAlertsInstances: [Function],
      listCodeqlDatabases: [Function],
      listRecentAnalyses: [Function],
      updateAlert: [Function],
      uploadSarif: [Function]
    },
    codesOfConduct: { getAllCodesOfConduct: [Function], getConductCode: [Function] },
    codespaces: {
      addRepositoryForSecretForAuthenticatedUser: [Function],
      addSelectedRepoToOrgSecret: [Function],
      codespaceMachinesForAuthenticatedUser: [Function],
      createForAuthenticatedUser: [Function],
      createOrUpdateOrgSecret: [Function],
      createOrUpdateRepoSecret: [Function],
      createOrUpdateSecretForAuthenticatedUser: [Function],
      createWithPrForAuthenticatedUser: [Function],
      createWithRepoForAuthenticatedUser: [Function],
      deleteForAuthenticatedUser: [Function],
      deleteFromOrganization: [Function],
      deleteOrgSecret: [Function],
      deleteRepoSecret: [Function],
      deleteSecretForAuthenticatedUser: [Function],
      exportForAuthenticatedUser: [Function],
      getExportDetailsForAuthenticatedUser: [Function],
      getForAuthenticatedUser: [Function],
      getOrgPublicKey: [Function],
      getOrgSecret: [Function],
      getPublicKeyForAuthenticatedUser: [Function],
      getRepoPublicKey: [Function],
      getRepoSecret: [Function],
      getSecretForAuthenticatedUser: [Function],
      listDevcontainersInRepositoryForAuthenticatedUser: [Function],
      listForAuthenticatedUser: [Function],
      listInOrganization: [Function],
      listInRepositoryForAuthenticatedUser: [Function],
      listOrgSecrets: [Function],
      listRepoSecrets: [Function],
      listRepositoriesForSecretForAuthenticatedUser: [Function],
      listSecretsForAuthenticatedUser: [Function],
      listSelectedReposForOrgSecret: [Function],
      preFlightWithRepoForAuthenticatedUser: [Function],
      removeRepositoryForSecretForAuthenticatedUser: [Function],
      removeSelectedRepoFromOrgSecret: [Function],
      repoMachinesForAuthenticatedUser: [Function],
      setRepositoriesForSecretForAuthenticatedUser: [Function],
      setSelectedReposForOrgSecret: [Function],
      startForAuthenticatedUser: [Function],
      stopForAuthenticatedUser: [Function],
      stopInOrganization: [Function],
      updateForAuthenticatedUser: [Function]
    },
    dependabot: {
      addSelectedRepoToOrgSecret: [Function],
      createOrUpdateOrgSecret: [Function],
      createOrUpdateRepoSecret: [Function],
      deleteOrgSecret: [Function],
      deleteRepoSecret: [Function],
      getAlert: [Function],
      getOrgPublicKey: [Function],
      getOrgSecret: [Function],
      getRepoPublicKey: [Function],
      getRepoSecret: [Function],
      listAlertsForRepo: [Function],
      listOrgSecrets: [Function],
      listRepoSecrets: [Function],
      listSelectedReposForOrgSecret: [Function],
      removeSelectedRepoFromOrgSecret: [Function],
      setSelectedReposForOrgSecret: [Function],
      updateAlert: [Function]
    },
    dependencyGraph: { createRepositorySnapshot: [Function], diffRange: [Function] },
    emojis: { get: [Function] },
    enterpriseAdmin: {
      addCustomLabelsToSelfHostedRunnerForEnterprise: [Function],
      disableSelectedOrganizationGithubActionsEnterprise: [Function],
      enableSelectedOrganizationGithubActionsEnterprise: [Function],
      getAllowedActionsEnterprise: [Function],
      getGithubActionsPermissionsEnterprise: [Function],
      getServerStatistics: [Function],
      listLabelsForSelfHostedRunnerForEnterprise: [Function],
      listSelectedOrganizationsEnabledGithubActionsEnterprise: [Function],
      removeAllCustomLabelsFromSelfHostedRunnerForEnterprise: [Function],
      removeCustomLabelFromSelfHostedRunnerForEnterprise: [Function],
      setAllowedActionsEnterprise: [Function],
      setCustomLabelsForSelfHostedRunnerForEnterprise: [Function],
      setGithubActionsPermissionsEnterprise: [Function],
      setSelectedOrganizationsEnabledGithubActionsEnterprise: [Function]
    },
    gists: {
      checkIsStarred: [Function],
      create: [Function],
      createComment: [Function],
      delete: [Function],
      deleteComment: [Function],
      fork: [Function],
      get: [Function],
      getComment: [Function],
      getRevision: [Function],
      list: [Function],
      listComments: [Function],
      listCommits: [Function],
      listForUser: [Function],
      listForks: [Function],
      listPublic: [Function],
      listStarred: [Function],
      star: [Function],
      unstar: [Function],
      update: [Function],
      updateComment: [Function]
    },
    git: {
      createBlob: [Function],
      createCommit: [Function],
      createRef: [Function],
      createTag: [Function],
      createTree: [Function],
      deleteRef: [Function],
      getBlob: [Function],
      getCommit: [Function],
      getRef: [Function],
      getTag: [Function],
      getTree: [Function],
      listMatchingRefs: [Function],
      updateRef: [Function]
    },
    gitignore: { getAllTemplates: [Function], getTemplate: [Function] },
    interactions: {
      getRestrictionsForAuthenticatedUser: [Function],
      getRestrictionsForOrg: [Function],
      getRestrictionsForRepo: [Function],
      getRestrictionsForYourPublicRepos: [Function],
      removeRestrictionsForAuthenticatedUser: [Function],
      removeRestrictionsForOrg: [Function],
      removeRestrictionsForRepo: [Function],
      removeRestrictionsForYourPublicRepos: [Function],
      setRestrictionsForAuthenticatedUser: [Function],
      setRestrictionsForOrg: [Function],
      setRestrictionsForRepo: [Function],
      setRestrictionsForYourPublicRepos: [Function]
    },
    issues: {
      addAssignees: [Function],
      addLabels: [Function],
      checkUserCanBeAssigned: [Function],
      create: [Function],
      createComment: [Function],
      createLabel: [Function],
      createMilestone: [Function],
      deleteComment: [Function],
      deleteLabel: [Function],
      deleteMilestone: [Function],
      get: [Function],
      getComment: [Function],
      getEvent: [Function],
      getLabel: [Function],
      getMilestone: [Function],
      list: [Function],
      listAssignees: [Function],
      listComments: [Function],
      listCommentsForRepo: [Function],
      listEvents: [Function],
      listEventsForRepo: [Function],
      listEventsForTimeline: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listForRepo: [Function],
      listLabelsForMilestone: [Function],
      listLabelsForRepo: [Function],
      listLabelsOnIssue: [Function],
      listMilestones: [Function],
      lock: [Function],
      removeAllLabels: [Function],
      removeAssignees: [Function],
      removeLabel: [Function],
      setLabels: [Function],
      unlock: [Function],
      update: [Function],
      updateComment: [Function],
      updateLabel: [Function],
      updateMilestone: [Function]
    },
    licenses: {
      get: [Function],
      getAllCommonlyUsed: [Function],
      getForRepo: [Function]
    },
    markdown: { render: [Function], renderRaw: [Function] },
    meta: {
      get: [Function],
      getOctocat: [Function],
      getZen: [Function],
      root: [Function]
    },
    migrations: {
      cancelImport: [Function],
      deleteArchiveForAuthenticatedUser: [Function],
      deleteArchiveForOrg: [Function],
      downloadArchiveForOrg: [Function],
      getArchiveForAuthenticatedUser: [Function],
      getCommitAuthors: [Function],
      getImportStatus: [Function],
      getLargeFiles: [Function],
      getStatusForAuthenticatedUser: [Function],
      getStatusForOrg: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listReposForAuthenticatedUser: [Function],
      listReposForOrg: [Function],
      listReposForUser: [Function],
      mapCommitAuthor: [Function],
      setLfsPreference: [Function],
      startForAuthenticatedUser: [Function],
      startForOrg: [Function],
      startImport: [Function],
      unlockRepoForAuthenticatedUser: [Function],
      unlockRepoForOrg: [Function],
      updateImport: [Function]
    },
    orgs: {
      addSecurityManagerTeam: [Function],
      blockUser: [Function],
      cancelInvitation: [Function],
      checkBlockedUser: [Function],
      checkMembershipForUser: [Function],
      checkPublicMembershipForUser: [Function],
      convertMemberToOutsideCollaborator: [Function],
      createCustomRole: [Function],
      createInvitation: [Function],
      createWebhook: [Function],
      deleteCustomRole: [Function],
      deleteWebhook: [Function],
      enableOrDisableSecurityProductOnAllOrgRepos: [Function],
      get: [Function],
      getMembershipForAuthenticatedUser: [Function],
      getMembershipForUser: [Function],
      getWebhook: [Function],
      getWebhookConfigForOrg: [Function],
      getWebhookDelivery: [Function],
      list: [Function],
      listAppInstallations: [Function],
      listBlockedUsers: [Function],
      listCustomRoles: [Function],
      listFailedInvitations: [Function],
      listFineGrainedPermissions: [Function],
      listForAuthenticatedUser: [Function],
      listForUser: [Function],
      listInvitationTeams: [Function],
      listMembers: [Function],
      listMembershipsForAuthenticatedUser: [Function],
      listOutsideCollaborators: [Function],
      listPendingInvitations: [Function],
      listPublicMembers: [Function],
      listSecurityManagerTeams: [Function],
      listWebhookDeliveries: [Function],
      listWebhooks: [Function],
      pingWebhook: [Function],
      redeliverWebhookDelivery: [Function],
      removeMember: [Function],
      removeMembershipForUser: [Function],
      removeOutsideCollaborator: [Function],
      removePublicMembershipForAuthenticatedUser: [Function],
      removeSecurityManagerTeam: [Function],
      setMembershipForUser: [Function],
      setPublicMembershipForAuthenticatedUser: [Function],
      unblockUser: [Function],
      update: [Function],
      updateCustomRole: [Function],
      updateMembershipForAuthenticatedUser: [Function],
      updateWebhook: [Function],
      updateWebhookConfigForOrg: [Function]
    },
    packages: {
      deletePackageForAuthenticatedUser: [Function],
      deletePackageForOrg: [Function],
      deletePackageForUser: [Function],
      deletePackageVersionForAuthenticatedUser: [Function],
      deletePackageVersionForOrg: [Function],
      deletePackageVersionForUser: [Function],
      getAllPackageVersionsForAPackageOwnedByAnOrg: [Function],
      getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [Function],
      getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [Function],
      getAllPackageVersionsForPackageOwnedByOrg: [Function],
      getAllPackageVersionsForPackageOwnedByUser: [Function],
      getPackageForAuthenticatedUser: [Function],
      getPackageForOrganization: [Function],
      getPackageForUser: [Function],
      getPackageVersionForAuthenticatedUser: [Function],
      getPackageVersionForOrganization: [Function],
      getPackageVersionForUser: [Function],
      listPackagesForAuthenticatedUser: [Function],
      listPackagesForOrganization: [Function],
      listPackagesForUser: [Function],
      restorePackageForAuthenticatedUser: [Function],
      restorePackageForOrg: [Function],
      restorePackageForUser: [Function],
      restorePackageVersionForAuthenticatedUser: [Function],
      restorePackageVersionForOrg: [Function],
      restorePackageVersionForUser: [Function]
    },
    projects: {
      addCollaborator: [Function],
      createCard: [Function],
      createColumn: [Function],
      createForAuthenticatedUser: [Function],
      createForOrg: [Function],
      createForRepo: [Function],
      delete: [Function],
      deleteCard: [Function],
      deleteColumn: [Function],
      get: [Function],
      getCard: [Function],
      getColumn: [Function],
      getPermissionForUser: [Function],
      listCards: [Function],
      listCollaborators: [Function],
      listColumns: [Function],
      listForOrg: [Function],
      listForRepo: [Function],
      listForUser: [Function],
      moveCard: [Function],
      moveColumn: [Function],
      removeCollaborator: [Function],
      update: [Function],
      updateCard: [Function],
      updateColumn: [Function]
    },
    pulls: {
      checkIfMerged: [Function],
      create: [Function],
      createReplyForReviewComment: [Function],
      createReview: [Function],
      createReviewComment: [Function],
      deletePendingReview: [Function],
      deleteReviewComment: [Function],
      dismissReview: [Function],
      get: [Function],
      getReview: [Function],
      getReviewComment: [Function],
      list: [Function],
      listCommentsForReview: [Function],
      listCommits: [Function],
      listFiles: [Function],
      listRequestedReviewers: [Function],
      listReviewComments: [Function],
      listReviewCommentsForRepo: [Function],
      listReviews: [Function],
      merge: [Function],
      removeRequestedReviewers: [Function],
      requestReviewers: [Function],
      submitReview: [Function],
      update: [Function],
      updateBranch: [Function],
      updateReview: [Function],
      updateReviewComment: [Function]
    },
    rateLimit: { get: [Function] },
    reactions: {
      createForCommitComment: [Function],
      createForIssue: [Function],
      createForIssueComment: [Function],
      createForPullRequestReviewComment: [Function],
      createForRelease: [Function],
      createForTeamDiscussionCommentInOrg: [Function],
      createForTeamDiscussionInOrg: [Function],
      deleteForCommitComment: [Function],
      deleteForIssue: [Function],
      deleteForIssueComment: [Function],
      deleteForPullRequestComment: [Function],
      deleteForRelease: [Function],
      deleteForTeamDiscussion: [Function],
      deleteForTeamDiscussionComment: [Function],
      listForCommitComment: [Function],
      listForIssue: [Function],
      listForIssueComment: [Function],
      listForPullRequestReviewComment: [Function],
      listForRelease: [Function],
      listForTeamDiscussionCommentInOrg: [Function],
      listForTeamDiscussionInOrg: [Function]
    },
    repos: {
      acceptInvitation: [Function],
      acceptInvitationForAuthenticatedUser: [Function],
      addAppAccessRestrictions: [Function],
      addCollaborator: [Function],
      addStatusCheckContexts: [Function],
      addTeamAccessRestrictions: [Function],
      addUserAccessRestrictions: [Function],
      checkCollaborator: [Function],
      checkVulnerabilityAlerts: [Function],
      codeownersErrors: [Function],
      compareCommits: [Function],
      compareCommitsWithBasehead: [Function],
      createAutolink: [Function],
      createCommitComment: [Function],
      createCommitSignatureProtection: [Function],
      createCommitStatus: [Function],
      createDeployKey: [Function],
      createDeployment: [Function],
      createDeploymentBranchPolicy: [Function],
      createDeploymentStatus: [Function],
      createDispatchEvent: [Function],
      createForAuthenticatedUser: [Function],
      createFork: [Function],
      createInOrg: [Function],
      createOrUpdateEnvironment: [Function],
      createOrUpdateFileContents: [Function],
      createPagesDeployment: [Function],
      createPagesSite: [Function],
      createRelease: [Function],
      createTagProtection: [Function],
      createUsingTemplate: [Function],
      createWebhook: [Function],
      declineInvitation: [Function],
      declineInvitationForAuthenticatedUser: [Function],
      delete: [Function],
      deleteAccessRestrictions: [Function],
      deleteAdminBranchProtection: [Function],
      deleteAnEnvironment: [Function],
      deleteAutolink: [Function],
      deleteBranchProtection: [Function],
      deleteCommitComment: [Function],
      deleteCommitSignatureProtection: [Function],
      deleteDeployKey: [Function],
      deleteDeployment: [Function],
      deleteDeploymentBranchPolicy: [Function],
      deleteFile: [Function],
      deleteInvitation: [Function],
      deletePagesSite: [Function],
      deletePullRequestReviewProtection: [Function],
      deleteRelease: [Function],
      deleteReleaseAsset: [Function],
      deleteTagProtection: [Function],
      deleteWebhook: [Function],
      disableAutomatedSecurityFixes: [Function],
      disableLfsForRepo: [Function],
      disableVulnerabilityAlerts: [Function],
      downloadArchive: [Function],
      downloadTarballArchive: [Function],
      downloadZipballArchive: [Function],
      enableAutomatedSecurityFixes: [Function],
      enableLfsForRepo: [Function],
      enableVulnerabilityAlerts: [Function],
      generateReleaseNotes: [Function],
      get: [Function],
      getAccessRestrictions: [Function],
      getAdminBranchProtection: [Function],
      getAllEnvironments: [Function],
      getAllStatusCheckContexts: [Function],
      getAllTopics: [Function],
      getAppsWithAccessToProtectedBranch: [Function],
      getAutolink: [Function],
      getBranch: [Function],
      getBranchProtection: [Function],
      getClones: [Function],
      getCodeFrequencyStats: [Function],
      getCollaboratorPermissionLevel: [Function],
      getCombinedStatusForRef: [Function],
      getCommit: [Function],
      getCommitActivityStats: [Function],
      getCommitComment: [Function],
      getCommitSignatureProtection: [Function],
      getCommunityProfileMetrics: [Function],
      getContent: [Function],
      getContributorsStats: [Function],
      getDeployKey: [Function],
      getDeployment: [Function],
      getDeploymentBranchPolicy: [Function],
      getDeploymentStatus: [Function],
      getEnvironment: [Function],
      getLatestPagesBuild: [Function],
      getLatestRelease: [Function],
      getPages: [Function],
      getPagesBuild: [Function],
      getPagesHealthCheck: [Function],
      getParticipationStats: [Function],
      getPullRequestReviewProtection: [Function],
      getPunchCardStats: [Function],
      getReadme: [Function],
      getReadmeInDirectory: [Function],
      getRelease: [Function],
      getReleaseAsset: [Function],
      getReleaseByTag: [Function],
      getStatusChecksProtection: [Function],
      getTeamsWithAccessToProtectedBranch: [Function],
      getTopPaths: [Function],
      getTopReferrers: [Function],
      getUsersWithAccessToProtectedBranch: [Function],
      getViews: [Function],
      getWebhook: [Function],
      getWebhookConfigForRepo: [Function],
      getWebhookDelivery: [Function],
      listAutolinks: [Function],
      listBranches: [Function],
      listBranchesForHeadCommit: [Function],
      listCollaborators: [Function],
      listCommentsForCommit: [Function],
      listCommitCommentsForRepo: [Function],
      listCommitStatusesForRef: [Function],
      listCommits: [Function],
      listContributors: [Function],
      listDeployKeys: [Function],
      listDeploymentBranchPolicies: [Function],
      listDeploymentStatuses: [Function],
      listDeployments: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listForUser: [Function],
      listForks: [Function],
      listInvitations: [Function],
      listInvitationsForAuthenticatedUser: [Function],
      listLanguages: [Function],
      listPagesBuilds: [Function],
      listPublic: [Function],
      listPullRequestsAssociatedWithCommit: [Function],
      listReleaseAssets: [Function],
      listReleases: [Function],
      listTagProtection: [Function],
      listTags: [Function],
      listTeams: [Function],
      listWebhookDeliveries: [Function],
      listWebhooks: [Function],
      merge: [Function],
      mergeUpstream: [Function],
      pingWebhook: [Function],
      redeliverWebhookDelivery: [Function],
      removeAppAccessRestrictions: [Function],
      removeCollaborator: [Function],
      removeStatusCheckContexts: [Function],
      removeStatusCheckProtection: [Function],
      removeTeamAccessRestrictions: [Function],
      removeUserAccessRestrictions: [Function],
      renameBranch: [Function],
      replaceAllTopics: [Function],
      requestPagesBuild: [Function],
      setAdminBranchProtection: [Function],
      setAppAccessRestrictions: [Function],
      setStatusCheckContexts: [Function],
      setTeamAccessRestrictions: [Function],
      setUserAccessRestrictions: [Function],
      testPushWebhook: [Function],
      transfer: [Function],
      update: [Function],
      updateBranchProtection: [Function],
      updateCommitComment: [Function],
      updateDeploymentBranchPolicy: [Function],
      updateInformationAboutPagesSite: [Function],
      updateInvitation: [Function],
      updatePullRequestReviewProtection: [Function],
      updateRelease: [Function],
      updateReleaseAsset: [Function],
      updateStatusCheckPotection: [Function],
      updateStatusCheckProtection: [Function],
      updateWebhook: [Function],
      updateWebhookConfigForRepo: [Function],
      uploadReleaseAsset: [Function]
    },
    search: {
      code: [Function],
      commits: [Function],
      issuesAndPullRequests: [Function],
      labels: [Function],
      repos: [Function],
      topics: [Function],
      users: [Function]
    },
    secretScanning: {
      getAlert: [Function],
      listAlertsForEnterprise: [Function],
      listAlertsForOrg: [Function],
      listAlertsForRepo: [Function],
      listLocationsForAlert: [Function],
      updateAlert: [Function]
    },
    teams: {
      addOrUpdateMembershipForUserInOrg: [Function],
      addOrUpdateProjectPermissionsInOrg: [Function],
      addOrUpdateRepoPermissionsInOrg: [Function],
      checkPermissionsForProjectInOrg: [Function],
      checkPermissionsForRepoInOrg: [Function],
      create: [Function],
      createDiscussionCommentInOrg: [Function],
      createDiscussionInOrg: [Function],
      deleteDiscussionCommentInOrg: [Function],
      deleteDiscussionInOrg: [Function],
      deleteInOrg: [Function],
      getByName: [Function],
      getDiscussionCommentInOrg: [Function],
      getDiscussionInOrg: [Function],
      getMembershipForUserInOrg: [Function],
      list: [Function],
      listChildInOrg: [Function],
      listDiscussionCommentsInOrg: [Function],
      listDiscussionsInOrg: [Function],
      listForAuthenticatedUser: [Function],
      listMembersInOrg: [Function],
      listPendingInvitationsInOrg: [Function],
      listProjectsInOrg: [Function],
      listReposInOrg: [Function],
      removeMembershipForUserInOrg: [Function],
      removeProjectInOrg: [Function],
      removeRepoInOrg: [Function],
      updateDiscussionCommentInOrg: [Function],
      updateDiscussionInOrg: [Function],
      updateInOrg: [Function]
    },
    users: {
      addEmailForAuthenticated: [Function],
      addEmailForAuthenticatedUser: [Function],
      block: [Function],
      checkBlocked: [Function],
      checkFollowingForUser: [Function],
      checkPersonIsFollowedByAuthenticated: [Function],
      createGpgKeyForAuthenticated: [Function],
      createGpgKeyForAuthenticatedUser: [Function],
      createPublicSshKeyForAuthenticated: [Function],
      createPublicSshKeyForAuthenticatedUser: [Function],
      createSshSigningKeyForAuthenticatedUser: [Function],
      deleteEmailForAuthenticated: [Function],
      deleteEmailForAuthenticatedUser: [Function],
      deleteGpgKeyForAuthenticated: [Function],
      deleteGpgKeyForAuthenticatedUser: [Function],
      deletePublicSshKeyForAuthenticated: [Function],
      deletePublicSshKeyForAuthenticatedUser: [Function],
      deleteSshSigningKeyForAuthenticatedUser: [Function],
      follow: [Function],
      getAuthenticated: [Function],
      getByUsername: [Function],
      getContextForUser: [Function],
      getGpgKeyForAuthenticated: [Function],
      getGpgKeyForAuthenticatedUser: [Function],
      getPublicSshKeyForAuthenticated: [Function],
      getPublicSshKeyForAuthenticatedUser: [Function],
      getSshSigningKeyForAuthenticatedUser: [Function],
      list: [Function],
      listBlockedByAuthenticated: [Function],
      listBlockedByAuthenticatedUser: [Function],
      listEmailsForAuthenticated: [Function],
      listEmailsForAuthenticatedUser: [Function],
      listFollowedByAuthenticated: [Function],
      listFollowedByAuthenticatedUser: [Function],
      listFollowersForAuthenticatedUser: [Function],
      listFollowersForUser: [Function],
      listFollowingForUser: [Function],
      listGpgKeysForAuthenticated: [Function],
      listGpgKeysForAuthenticatedUser: [Function],
      listGpgKeysForUser: [Function],
      listPublicEmailsForAuthenticated: [Function],
      listPublicEmailsForAuthenticatedUser: [Function],
      listPublicKeysForUser: [Function],
      listPublicSshKeysForAuthenticated: [Function],
      listPublicSshKeysForAuthenticatedUser: [Function],
      listSshSigningKeysForAuthenticatedUser: [Function],
      listSshSigningKeysForUser: [Function],
      setPrimaryEmailVisibilityForAuthenticated: [Function],
      setPrimaryEmailVisibilityForAuthenticatedUser: [Function],
      unblock: [Function],
      unfollow: [Function],
      updateAuthenticated: [Function]
    },
    rest: {
      actions: [Object],
      activity: [Object],
      apps: [Object],
      billing: [Object],
      checks: [Object],
      codeScanning: [Object],
      codesOfConduct: [Object],
      codespaces: [Object],
      dependabot: [Object],
      dependencyGraph: [Object],
      emojis: [Object],
      enterpriseAdmin: [Object],
      gists: [Object],
      git: [Object],
      gitignore: [Object],
      interactions: [Object],
      issues: [Object],
      licenses: [Object],
      markdown: [Object],
      meta: [Object],
      migrations: [Object],
      orgs: [Object],
      packages: [Object],
      projects: [Object],
      pulls: [Object],
      rateLimit: [Object],
      reactions: [Object],
      repos: [Object],
      search: [Object],
      secretScanning: [Object],
      teams: [Object],
      users: [Object]
    },
    paginate: [Function: bound paginate] { iterator: [Function: bound iterator] }
  },
  request: [Function: newApi] {
    endpoint: [Function: bound endpointWithDefaults] {
      DEFAULTS: [Object],
      defaults: [Function: bound withDefaults],
      merge: [Function: bound merge],
      parse: [Function: parse]
    },
    defaults: [Function: bound withDefaults]
  },
  graphql: [Function: newApi] {
    defaults: [Function: bound withDefaults],
    endpoint: [Function: bound endpointWithDefaults] {
      DEFAULTS: [Object],
      defaults: [Function: bound withDefaults],
      merge: [Function: bound merge],
      parse: [Function: parse]
    }
  },
  fileCache: RepositoryFileCache {
    octokit: OctokitWithDefaults {
      request: [Function],
      graphql: [Function],
      log: [Object],
      hook: [Function],
      auth: [AsyncFunction],
      actions: [Object],
      activity: [Object],
      apps: [Object],
      billing: [Object],
      checks: [Object],
      codeScanning: [Object],
      codesOfConduct: [Object],
      codespaces: [Object],
      dependabot: [Object],
      dependencyGraph: [Object],
      emojis: [Object],
      enterpriseAdmin: [Object],
      gists: [Object],
      git: [Object],
      gitignore: [Object],
      interactions: [Object],
      issues: [Object],
      licenses: [Object],
      markdown: [Object],
      meta: [Object],
      migrations: [Object],
      orgs: [Object],
      packages: [Object],
      projects: [Object],
      pulls: [Object],
      rateLimit: [Object],
      reactions: [Object],
      repos: [Object],
      search: [Object],
      secretScanning: [Object],
      teams: [Object],
      users: [Object],
      rest: [Object],
      paginate: [Function]
    },
    repository: {
      owner: 'Codertocat',
      repo: 'Hello-World',
      defaultBranch: 'master'
    },
    cache: Map(0) {}
  },
  logger: GCFLogger {
    destination: SonicBoom {
      _bufs: [],
      _len: 0,
      fd: 1,
      _writing: false,
      _writingBuf: '',
      _ending: false,
      _reopening: false,
      _asyncDrainScheduled: true,
      _hwm: 16387,
      file: null,
      destroyed: false,
      minLength: 0,
      maxLength: 0,
      maxWrite: 16384,
      sync: true,
      _fsync: false,
      append: true,
      mode: undefined,
      retryEAGAIN: [Function (anonymous)],
      mkdir: false,
      release: [Function (anonymous)],
      _events: [Object: null prototype],
      _eventsCount: 2
    },
    pino: EventEmitter {
      levels: [Object],
      silent: [Function: noop],
      onChild: [Function: noop],
      trace: [Function: LOG],
      debug: [Function: LOG],
      info: [Function: LOG],
      warn: [Function: LOG],
      error: [Function: LOG],
      fatal: [Function (anonymous)],
      metric: [Function: LOG],
      [Symbol(pino.useOnlyCustomLevels)]: false,
      [Symbol(pino.stream)]: [SonicBoom],
      [Symbol(pino.time)]: [Function: nullTime],
      [Symbol(pino.timeSliceIndex)]: 0,
      [Symbol(pino.stringify)]: [Function: stringify],
      [Symbol(pino.stringifySafe)]: [Function: stringify],
      [Symbol(pino.stringifiers)]: {},
      [Symbol(pino.end)]: '}\n',
      [Symbol(pino.formatOpts)]: [Object],
      [Symbol(pino.messageKey)]: 'message',
      [Symbol(pino.errorKey)]: 'err',
      [Symbol(pino.nestedKey)]: null,
      [Symbol(pino.nestedKeyStr)]: '',
      [Symbol(pino.serializers)]: [Object],
      [Symbol(pino.mixin)]: undefined,
      [Symbol(pino.mixinMergeStrategy)]: undefined,
      [Symbol(pino.chindings)]: '',
      [Symbol(pino.formatters)]: [Object],
      [Symbol(pino.hooks)]: [Object],
      [Symbol(pino.lsCache)]: [Object],
      [Symbol(pino.levelVal)]: 10
    },
    trace: [Function: bound trace],
    debug: [Function: bound debug],
    info: [Function: bound info],
    warn: [Function: bound warn],
    metric: [Function: bound metric],
    error: [Function: bound error],
    child: [Function: bound child]
  }
} instanceOf(GitHub)
'"master"'
{
  releaseType: 'java-yoshi',
  versioning: undefined,
  bumpMinorPreMajor: undefined,
  bumpPatchForMinorPreMajor: undefined,
  draft: undefined,
  draftPullRequest: undefined,
  packageName: undefined,
  includeComponentInTag: false,
  pullRequestTitlePattern: undefined,
  changelogHost: undefined,
  changelogPath: undefined,
  changelogType: undefined,
  versionFile: undefined,
  extraFiles: undefined,
  initialVersion: undefined
} has("releaseType", java-yoshi)
{
  manifestPath: undefined,
  labels: [ 'foo', 'bar' ],
  releaseLabels: undefined,
  plugins: [],
  logger: GCFLogger {
    destination: SonicBoom {
      _bufs: [],
      _len: 0,
      fd: 1,
      _writing: false,
      _writingBuf: '',
      _ending: false,
      _reopening: false,
      _asyncDrainScheduled: true,
      _hwm: 16387,
      file: null,
      destroyed: false,
      minLength: 0,
      maxLength: 0,
      maxWrite: 16384,
      sync: true,
      _fsync: false,
      append: true,
      mode: undefined,
      retryEAGAIN: [Function (anonymous)],
      mkdir: false,
      release: [Function (anonymous)],
      _events: [Object: null prototype],
      _eventsCount: 2
    },
    pino: EventEmitter {
      levels: [Object],
      silent: [Function: noop],
      onChild: [Function: noop],
      trace: [Function: LOG],
      debug: [Function: LOG],
      info: [Function: LOG],
      warn: [Function: LOG],
      error: [Function: LOG],
      fatal: [Function (anonymous)],
      metric: [Function: LOG],
      [Symbol(pino.useOnlyCustomLevels)]: false,
      [Symbol(pino.stream)]: [SonicBoom],
      [Symbol(pino.time)]: [Function: nullTime],
      [Symbol(pino.timeSliceIndex)]: 0,
      [Symbol(pino.stringify)]: [Function: stringify],
      [Symbol(pino.stringifySafe)]: [Function: stringify],
      [Symbol(pino.stringifiers)]: {},
      [Symbol(pino.end)]: '}\n',
      [Symbol(pino.formatOpts)]: [Object],
      [Symbol(pino.messageKey)]: 'message',
      [Symbol(pino.errorKey)]: 'err',
      [Symbol(pino.nestedKey)]: null,
      [Symbol(pino.nestedKeyStr)]: '',
      [Symbol(pino.serializers)]: [Object],
      [Symbol(pino.mixin)]: undefined,
      [Symbol(pino.mixinMergeStrategy)]: undefined,
      [Symbol(pino.chindings)]: '',
      [Symbol(pino.formatters)]: [Object],
      [Symbol(pino.hooks)]: [Object],
      [Symbol(pino.lsCache)]: [Object],
      [Symbol(pino.levelVal)]: 10
    },
    trace: [Function: bound trace],
    debug: [Function: bound debug],
    info: [Function: bound info],
    warn: [Function: bound warn],
    metric: [Function: bound metric],
    error: [Function: bound error],
    child: [Function: bound child]
  }
} any
undefined
Call 2:
GitHub {
  getCommitFiles: [AsyncFunction (anonymous)],
  graphqlRequest: [AsyncFunction (anonymous)],
  findFilesByFilenameAndRef: [AsyncFunction (anonymous)],
  findFilesByGlobAndRef: [AsyncFunction (anonymous)],
  createPullRequest: [AsyncFunction (anonymous)],
  getPullRequest: [AsyncFunction (anonymous)],
  updatePullRequest: [AsyncFunction (anonymous)],
  findFilesByExtensionAndRef: [AsyncFunction (anonymous)],
  createRelease: [AsyncFunction (anonymous)],
  commentOnIssue: [AsyncFunction (anonymous)],
  removeIssueLabels: [AsyncFunction (anonymous)],
  addIssueLabels: [AsyncFunction (anonymous)],
  repository: { owner: 'Codertocat', repo: 'Hello-World', defaultBranch: 'master' },
  octokit: OctokitWithDefaults {
    request: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    graphql: [Function: newApi] {
      defaults: [Function: bound withDefaults],
      endpoint: [Function]
    },
    log: {
      debug: [Function: debug],
      info: [Function: info],
      warn: [Function: bound warn],
      error: [Function: bound error]
    },
    hook: [Function: bound register] {
      api: [Object],
      remove: [Function: bound removeHook],
      before: [Function: bound addHook],
      error: [Function: bound addHook],
      after: [Function: bound addHook],
      wrap: [Function: bound addHook]
    },
    auth: [Function: bound auth] AsyncFunction {
      hook: [Function: bound hook] AsyncFunction
    },
    actions: {
      addCustomLabelsToSelfHostedRunnerForOrg: [Function],
      addCustomLabelsToSelfHostedRunnerForRepo: [Function],
      addSelectedRepoToOrgSecret: [Function],
      approveWorkflowRun: [Function],
      cancelWorkflowRun: [Function],
      createOrUpdateEnvironmentSecret: [Function],
      createOrUpdateOrgSecret: [Function],
      createOrUpdateRepoSecret: [Function],
      createRegistrationTokenForOrg: [Function],
      createRegistrationTokenForRepo: [Function],
      createRemoveTokenForOrg: [Function],
      createRemoveTokenForRepo: [Function],
      createWorkflowDispatch: [Function],
      deleteActionsCacheById: [Function],
      deleteActionsCacheByKey: [Function],
      deleteArtifact: [Function],
      deleteEnvironmentSecret: [Function],
      deleteOrgSecret: [Function],
      deleteRepoSecret: [Function],
      deleteSelfHostedRunnerFromOrg: [Function],
      deleteSelfHostedRunnerFromRepo: [Function],
      deleteWorkflowRun: [Function],
      deleteWorkflowRunLogs: [Function],
      disableSelectedRepositoryGithubActionsOrganization: [Function],
      disableWorkflow: [Function],
      downloadArtifact: [Function],
      downloadJobLogsForWorkflowRun: [Function],
      downloadWorkflowRunAttemptLogs: [Function],
      downloadWorkflowRunLogs: [Function],
      enableSelectedRepositoryGithubActionsOrganization: [Function],
      enableWorkflow: [Function],
      getActionsCacheList: [Function],
      getActionsCacheUsage: [Function],
      getActionsCacheUsageByRepoForOrg: [Function],
      getActionsCacheUsageForEnterprise: [Function],
      getActionsCacheUsageForOrg: [Function],
      getAllowedActionsOrganization: [Function],
      getAllowedActionsRepository: [Function],
      getArtifact: [Function],
      getEnvironmentPublicKey: [Function],
      getEnvironmentSecret: [Function],
      getGithubActionsDefaultWorkflowPermissionsEnterprise: [Function],
      getGithubActionsDefaultWorkflowPermissionsOrganization: [Function],
      getGithubActionsDefaultWorkflowPermissionsRepository: [Function],
      getGithubActionsPermissionsOrganization: [Function],
      getGithubActionsPermissionsRepository: [Function],
      getJobForWorkflowRun: [Function],
      getOrgPublicKey: [Function],
      getOrgSecret: [Function],
      getPendingDeploymentsForRun: [Function],
      getRepoPermissions: [Function],
      getRepoPublicKey: [Function],
      getRepoSecret: [Function],
      getReviewsForRun: [Function],
      getSelfHostedRunnerForOrg: [Function],
      getSelfHostedRunnerForRepo: [Function],
      getWorkflow: [Function],
      getWorkflowAccessToRepository: [Function],
      getWorkflowRun: [Function],
      getWorkflowRunAttempt: [Function],
      getWorkflowRunUsage: [Function],
      getWorkflowUsage: [Function],
      listArtifactsForRepo: [Function],
      listEnvironmentSecrets: [Function],
      listJobsForWorkflowRun: [Function],
      listJobsForWorkflowRunAttempt: [Function],
      listLabelsForSelfHostedRunnerForOrg: [Function],
      listLabelsForSelfHostedRunnerForRepo: [Function],
      listOrgSecrets: [Function],
      listRepoSecrets: [Function],
      listRepoWorkflows: [Function],
      listRunnerApplicationsForOrg: [Function],
      listRunnerApplicationsForRepo: [Function],
      listSelectedReposForOrgSecret: [Function],
      listSelectedRepositoriesEnabledGithubActionsOrganization: [Function],
      listSelfHostedRunnersForOrg: [Function],
      listSelfHostedRunnersForRepo: [Function],
      listWorkflowRunArtifacts: [Function],
      listWorkflowRuns: [Function],
      listWorkflowRunsForRepo: [Function],
      reRunJobForWorkflowRun: [Function],
      reRunWorkflow: [Function],
      reRunWorkflowFailedJobs: [Function],
      removeAllCustomLabelsFromSelfHostedRunnerForOrg: [Function],
      removeAllCustomLabelsFromSelfHostedRunnerForRepo: [Function],
      removeCustomLabelFromSelfHostedRunnerForOrg: [Function],
      removeCustomLabelFromSelfHostedRunnerForRepo: [Function],
      removeSelectedRepoFromOrgSecret: [Function],
      reviewPendingDeploymentsForRun: [Function],
      setAllowedActionsOrganization: [Function],
      setAllowedActionsRepository: [Function],
      setCustomLabelsForSelfHostedRunnerForOrg: [Function],
      setCustomLabelsForSelfHostedRunnerForRepo: [Function],
      setGithubActionsDefaultWorkflowPermissionsEnterprise: [Function],
      setGithubActionsDefaultWorkflowPermissionsOrganization: [Function],
      setGithubActionsDefaultWorkflowPermissionsRepository: [Function],
      setGithubActionsPermissionsOrganization: [Function],
      setGithubActionsPermissionsRepository: [Function],
      setSelectedReposForOrgSecret: [Function],
      setSelectedRepositoriesEnabledGithubActionsOrganization: [Function],
      setWorkflowAccessToRepository: [Function]
    },
    activity: {
      checkRepoIsStarredByAuthenticatedUser: [Function],
      deleteRepoSubscription: [Function],
      deleteThreadSubscription: [Function],
      getFeeds: [Function],
      getRepoSubscription: [Function],
      getThread: [Function],
      getThreadSubscriptionForAuthenticatedUser: [Function],
      listEventsForAuthenticatedUser: [Function],
      listNotificationsForAuthenticatedUser: [Function],
      listOrgEventsForAuthenticatedUser: [Function],
      listPublicEvents: [Function],
      listPublicEventsForRepoNetwork: [Function],
      listPublicEventsForUser: [Function],
      listPublicOrgEvents: [Function],
      listReceivedEventsForUser: [Function],
      listReceivedPublicEventsForUser: [Function],
      listRepoEvents: [Function],
      listRepoNotificationsForAuthenticatedUser: [Function],
      listReposStarredByAuthenticatedUser: [Function],
      listReposStarredByUser: [Function],
      listReposWatchedByUser: [Function],
      listStargazersForRepo: [Function],
      listWatchedReposForAuthenticatedUser: [Function],
      listWatchersForRepo: [Function],
      markNotificationsAsRead: [Function],
      markRepoNotificationsAsRead: [Function],
      markThreadAsRead: [Function],
      setRepoSubscription: [Function],
      setThreadSubscription: [Function],
      starRepoForAuthenticatedUser: [Function],
      unstarRepoForAuthenticatedUser: [Function]
    },
    apps: {
      addRepoToInstallation: [Function],
      addRepoToInstallationForAuthenticatedUser: [Function],
      checkToken: [Function],
      createFromManifest: [Function],
      createInstallationAccessToken: [Function],
      deleteAuthorization: [Function],
      deleteInstallation: [Function],
      deleteToken: [Function],
      getAuthenticated: [Function],
      getBySlug: [Function],
      getInstallation: [Function],
      getOrgInstallation: [Function],
      getRepoInstallation: [Function],
      getSubscriptionPlanForAccount: [Function],
      getSubscriptionPlanForAccountStubbed: [Function],
      getUserInstallation: [Function],
      getWebhookConfigForApp: [Function],
      getWebhookDelivery: [Function],
      listAccountsForPlan: [Function],
      listAccountsForPlanStubbed: [Function],
      listInstallationReposForAuthenticatedUser: [Function],
      listInstallations: [Function],
      listInstallationsForAuthenticatedUser: [Function],
      listPlans: [Function],
      listPlansStubbed: [Function],
      listReposAccessibleToInstallation: [Function],
      listSubscriptionsForAuthenticatedUser: [Function],
      listSubscriptionsForAuthenticatedUserStubbed: [Function],
      listWebhookDeliveries: [Function],
      redeliverWebhookDelivery: [Function],
      removeRepoFromInstallation: [Function],
      removeRepoFromInstallationForAuthenticatedUser: [Function],
      resetToken: [Function],
      revokeInstallationAccessToken: [Function],
      scopeToken: [Function],
      suspendInstallation: [Function],
      unsuspendInstallation: [Function],
      updateWebhookConfigForApp: [Function]
    },
    billing: {
      getGithubActionsBillingOrg: [Function],
      getGithubActionsBillingUser: [Function],
      getGithubAdvancedSecurityBillingGhe: [Function],
      getGithubAdvancedSecurityBillingOrg: [Function],
      getGithubPackagesBillingOrg: [Function],
      getGithubPackagesBillingUser: [Function],
      getSharedStorageBillingOrg: [Function],
      getSharedStorageBillingUser: [Function]
    },
    checks: {
      create: [Function],
      createSuite: [Function],
      get: [Function],
      getSuite: [Function],
      listAnnotations: [Function],
      listForRef: [Function],
      listForSuite: [Function],
      listSuitesForRef: [Function],
      rerequestRun: [Function],
      rerequestSuite: [Function],
      setSuitesPreferences: [Function],
      update: [Function]
    },
    codeScanning: {
      deleteAnalysis: [Function],
      getAlert: [Function],
      getAnalysis: [Function],
      getCodeqlDatabase: [Function],
      getSarif: [Function],
      listAlertInstances: [Function],
      listAlertsForEnterprise: [Function],
      listAlertsForOrg: [Function],
      listAlertsForRepo: [Function],
      listAlertsInstances: [Function],
      listCodeqlDatabases: [Function],
      listRecentAnalyses: [Function],
      updateAlert: [Function],
      uploadSarif: [Function]
    },
    codesOfConduct: { getAllCodesOfConduct: [Function], getConductCode: [Function] },
    codespaces: {
      addRepositoryForSecretForAuthenticatedUser: [Function],
      addSelectedRepoToOrgSecret: [Function],
      codespaceMachinesForAuthenticatedUser: [Function],
      createForAuthenticatedUser: [Function],
      createOrUpdateOrgSecret: [Function],
      createOrUpdateRepoSecret: [Function],
      createOrUpdateSecretForAuthenticatedUser: [Function],
      createWithPrForAuthenticatedUser: [Function],
      createWithRepoForAuthenticatedUser: [Function],
      deleteForAuthenticatedUser: [Function],
      deleteFromOrganization: [Function],
      deleteOrgSecret: [Function],
      deleteRepoSecret: [Function],
      deleteSecretForAuthenticatedUser: [Function],
      exportForAuthenticatedUser: [Function],
      getExportDetailsForAuthenticatedUser: [Function],
      getForAuthenticatedUser: [Function],
      getOrgPublicKey: [Function],
      getOrgSecret: [Function],
      getPublicKeyForAuthenticatedUser: [Function],
      getRepoPublicKey: [Function],
      getRepoSecret: [Function],
      getSecretForAuthenticatedUser: [Function],
      listDevcontainersInRepositoryForAuthenticatedUser: [Function],
      listForAuthenticatedUser: [Function],
      listInOrganization: [Function],
      listInRepositoryForAuthenticatedUser: [Function],
      listOrgSecrets: [Function],
      listRepoSecrets: [Function],
      listRepositoriesForSecretForAuthenticatedUser: [Function],
      listSecretsForAuthenticatedUser: [Function],
      listSelectedReposForOrgSecret: [Function],
      preFlightWithRepoForAuthenticatedUser: [Function],
      removeRepositoryForSecretForAuthenticatedUser: [Function],
      removeSelectedRepoFromOrgSecret: [Function],
      repoMachinesForAuthenticatedUser: [Function],
      setRepositoriesForSecretForAuthenticatedUser: [Function],
      setSelectedReposForOrgSecret: [Function],
      startForAuthenticatedUser: [Function],
      stopForAuthenticatedUser: [Function],
      stopInOrganization: [Function],
      updateForAuthenticatedUser: [Function]
    },
    dependabot: {
      addSelectedRepoToOrgSecret: [Function],
      createOrUpdateOrgSecret: [Function],
      createOrUpdateRepoSecret: [Function],
      deleteOrgSecret: [Function],
      deleteRepoSecret: [Function],
      getAlert: [Function],
      getOrgPublicKey: [Function],
      getOrgSecret: [Function],
      getRepoPublicKey: [Function],
      getRepoSecret: [Function],
      listAlertsForRepo: [Function],
      listOrgSecrets: [Function],
      listRepoSecrets: [Function],
      listSelectedReposForOrgSecret: [Function],
      removeSelectedRepoFromOrgSecret: [Function],
      setSelectedReposForOrgSecret: [Function],
      updateAlert: [Function]
    },
    dependencyGraph: { createRepositorySnapshot: [Function], diffRange: [Function] },
    emojis: { get: [Function] },
    enterpriseAdmin: {
      addCustomLabelsToSelfHostedRunnerForEnterprise: [Function],
      disableSelectedOrganizationGithubActionsEnterprise: [Function],
      enableSelectedOrganizationGithubActionsEnterprise: [Function],
      getAllowedActionsEnterprise: [Function],
      getGithubActionsPermissionsEnterprise: [Function],
      getServerStatistics: [Function],
      listLabelsForSelfHostedRunnerForEnterprise: [Function],
      listSelectedOrganizationsEnabledGithubActionsEnterprise: [Function],
      removeAllCustomLabelsFromSelfHostedRunnerForEnterprise: [Function],
      removeCustomLabelFromSelfHostedRunnerForEnterprise: [Function],
      setAllowedActionsEnterprise: [Function],
      setCustomLabelsForSelfHostedRunnerForEnterprise: [Function],
      setGithubActionsPermissionsEnterprise: [Function],
      setSelectedOrganizationsEnabledGithubActionsEnterprise: [Function]
    },
    gists: {
      checkIsStarred: [Function],
      create: [Function],
      createComment: [Function],
      delete: [Function],
      deleteComment: [Function],
      fork: [Function],
      get: [Function],
      getComment: [Function],
      getRevision: [Function],
      list: [Function],
      listComments: [Function],
      listCommits: [Function],
      listForUser: [Function],
      listForks: [Function],
      listPublic: [Function],
      listStarred: [Function],
      star: [Function],
      unstar: [Function],
      update: [Function],
      updateComment: [Function]
    },
    git: {
      createBlob: [Function],
      createCommit: [Function],
      createRef: [Function],
      createTag: [Function],
      createTree: [Function],
      deleteRef: [Function],
      getBlob: [Function],
      getCommit: [Function],
      getRef: [Function],
      getTag: [Function],
      getTree: [Function],
      listMatchingRefs: [Function],
      updateRef: [Function]
    },
    gitignore: { getAllTemplates: [Function], getTemplate: [Function] },
    interactions: {
      getRestrictionsForAuthenticatedUser: [Function],
      getRestrictionsForOrg: [Function],
      getRestrictionsForRepo: [Function],
      getRestrictionsForYourPublicRepos: [Function],
      removeRestrictionsForAuthenticatedUser: [Function],
      removeRestrictionsForOrg: [Function],
      removeRestrictionsForRepo: [Function],
      removeRestrictionsForYourPublicRepos: [Function],
      setRestrictionsForAuthenticatedUser: [Function],
      setRestrictionsForOrg: [Function],
      setRestrictionsForRepo: [Function],
      setRestrictionsForYourPublicRepos: [Function]
    },
    issues: {
      addAssignees: [Function],
      addLabels: [Function],
      checkUserCanBeAssigned: [Function],
      create: [Function],
      createComment: [Function],
      createLabel: [Function],
      createMilestone: [Function],
      deleteComment: [Function],
      deleteLabel: [Function],
      deleteMilestone: [Function],
      get: [Function],
      getComment: [Function],
      getEvent: [Function],
      getLabel: [Function],
      getMilestone: [Function],
      list: [Function],
      listAssignees: [Function],
      listComments: [Function],
      listCommentsForRepo: [Function],
      listEvents: [Function],
      listEventsForRepo: [Function],
      listEventsForTimeline: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listForRepo: [Function],
      listLabelsForMilestone: [Function],
      listLabelsForRepo: [Function],
      listLabelsOnIssue: [Function],
      listMilestones: [Function],
      lock: [Function],
      removeAllLabels: [Function],
      removeAssignees: [Function],
      removeLabel: [Function],
      setLabels: [Function],
      unlock: [Function],
      update: [Function],
      updateComment: [Function],
      updateLabel: [Function],
      updateMilestone: [Function]
    },
    licenses: {
      get: [Function],
      getAllCommonlyUsed: [Function],
      getForRepo: [Function]
    },
    markdown: { render: [Function], renderRaw: [Function] },
    meta: {
      get: [Function],
      getOctocat: [Function],
      getZen: [Function],
      root: [Function]
    },
    migrations: {
      cancelImport: [Function],
      deleteArchiveForAuthenticatedUser: [Function],
      deleteArchiveForOrg: [Function],
      downloadArchiveForOrg: [Function],
      getArchiveForAuthenticatedUser: [Function],
      getCommitAuthors: [Function],
      getImportStatus: [Function],
      getLargeFiles: [Function],
      getStatusForAuthenticatedUser: [Function],
      getStatusForOrg: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listReposForAuthenticatedUser: [Function],
      listReposForOrg: [Function],
      listReposForUser: [Function],
      mapCommitAuthor: [Function],
      setLfsPreference: [Function],
      startForAuthenticatedUser: [Function],
      startForOrg: [Function],
      startImport: [Function],
      unlockRepoForAuthenticatedUser: [Function],
      unlockRepoForOrg: [Function],
      updateImport: [Function]
    },
    orgs: {
      addSecurityManagerTeam: [Function],
      blockUser: [Function],
      cancelInvitation: [Function],
      checkBlockedUser: [Function],
      checkMembershipForUser: [Function],
      checkPublicMembershipForUser: [Function],
      convertMemberToOutsideCollaborator: [Function],
      createCustomRole: [Function],
      createInvitation: [Function],
      createWebhook: [Function],
      deleteCustomRole: [Function],
      deleteWebhook: [Function],
      enableOrDisableSecurityProductOnAllOrgRepos: [Function],
      get: [Function],
      getMembershipForAuthenticatedUser: [Function],
      getMembershipForUser: [Function],
      getWebhook: [Function],
      getWebhookConfigForOrg: [Function],
      getWebhookDelivery: [Function],
      list: [Function],
      listAppInstallations: [Function],
      listBlockedUsers: [Function],
      listCustomRoles: [Function],
      listFailedInvitations: [Function],
      listFineGrainedPermissions: [Function],
      listForAuthenticatedUser: [Function],
      listForUser: [Function],
      listInvitationTeams: [Function],
      listMembers: [Function],
      listMembershipsForAuthenticatedUser: [Function],
      listOutsideCollaborators: [Function],
      listPendingInvitations: [Function],
      listPublicMembers: [Function],
      listSecurityManagerTeams: [Function],
      listWebhookDeliveries: [Function],
      listWebhooks: [Function],
      pingWebhook: [Function],
      redeliverWebhookDelivery: [Function],
      removeMember: [Function],
      removeMembershipForUser: [Function],
      removeOutsideCollaborator: [Function],
      removePublicMembershipForAuthenticatedUser: [Function],
      removeSecurityManagerTeam: [Function],
      setMembershipForUser: [Function],
      setPublicMembershipForAuthenticatedUser: [Function],
      unblockUser: [Function],
      update: [Function],
      updateCustomRole: [Function],
      updateMembershipForAuthenticatedUser: [Function],
      updateWebhook: [Function],
      updateWebhookConfigForOrg: [Function]
    },
    packages: {
      deletePackageForAuthenticatedUser: [Function],
      deletePackageForOrg: [Function],
      deletePackageForUser: [Function],
      deletePackageVersionForAuthenticatedUser: [Function],
      deletePackageVersionForOrg: [Function],
      deletePackageVersionForUser: [Function],
      getAllPackageVersionsForAPackageOwnedByAnOrg: [Function],
      getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [Function],
      getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [Function],
      getAllPackageVersionsForPackageOwnedByOrg: [Function],
      getAllPackageVersionsForPackageOwnedByUser: [Function],
      getPackageForAuthenticatedUser: [Function],
      getPackageForOrganization: [Function],
      getPackageForUser: [Function],
      getPackageVersionForAuthenticatedUser: [Function],
      getPackageVersionForOrganization: [Function],
      getPackageVersionForUser: [Function],
      listPackagesForAuthenticatedUser: [Function],
      listPackagesForOrganization: [Function],
      listPackagesForUser: [Function],
      restorePackageForAuthenticatedUser: [Function],
      restorePackageForOrg: [Function],
      restorePackageForUser: [Function],
      restorePackageVersionForAuthenticatedUser: [Function],
      restorePackageVersionForOrg: [Function],
      restorePackageVersionForUser: [Function]
    },
    projects: {
      addCollaborator: [Function],
      createCard: [Function],
      createColumn: [Function],
      createForAuthenticatedUser: [Function],
      createForOrg: [Function],
      createForRepo: [Function],
      delete: [Function],
      deleteCard: [Function],
      deleteColumn: [Function],
      get: [Function],
      getCard: [Function],
      getColumn: [Function],
      getPermissionForUser: [Function],
      listCards: [Function],
      listCollaborators: [Function],
      listColumns: [Function],
      listForOrg: [Function],
      listForRepo: [Function],
      listForUser: [Function],
      moveCard: [Function],
      moveColumn: [Function],
      removeCollaborator: [Function],
      update: [Function],
      updateCard: [Function],
      updateColumn: [Function]
    },
    pulls: {
      checkIfMerged: [Function],
      create: [Function],
      createReplyForReviewComment: [Function],
      createReview: [Function],
      createReviewComment: [Function],
      deletePendingReview: [Function],
      deleteReviewComment: [Function],
      dismissReview: [Function],
      get: [Function],
      getReview: [Function],
      getReviewComment: [Function],
      list: [Function],
      listCommentsForReview: [Function],
      listCommits: [Function],
      listFiles: [Function],
      listRequestedReviewers: [Function],
      listReviewComments: [Function],
      listReviewCommentsForRepo: [Function],
      listReviews: [Function],
      merge: [Function],
      removeRequestedReviewers: [Function],
      requestReviewers: [Function],
      submitReview: [Function],
      update: [Function],
      updateBranch: [Function],
      updateReview: [Function],
      updateReviewComment: [Function]
    },
    rateLimit: { get: [Function] },
    reactions: {
      createForCommitComment: [Function],
      createForIssue: [Function],
      createForIssueComment: [Function],
      createForPullRequestReviewComment: [Function],
      createForRelease: [Function],
      createForTeamDiscussionCommentInOrg: [Function],
      createForTeamDiscussionInOrg: [Function],
      deleteForCommitComment: [Function],
      deleteForIssue: [Function],
      deleteForIssueComment: [Function],
      deleteForPullRequestComment: [Function],
      deleteForRelease: [Function],
      deleteForTeamDiscussion: [Function],
      deleteForTeamDiscussionComment: [Function],
      listForCommitComment: [Function],
      listForIssue: [Function],
      listForIssueComment: [Function],
      listForPullRequestReviewComment: [Function],
      listForRelease: [Function],
      listForTeamDiscussionCommentInOrg: [Function],
      listForTeamDiscussionInOrg: [Function]
    },
    repos: {
      acceptInvitation: [Function],
      acceptInvitationForAuthenticatedUser: [Function],
      addAppAccessRestrictions: [Function],
      addCollaborator: [Function],
      addStatusCheckContexts: [Function],
      addTeamAccessRestrictions: [Function],
      addUserAccessRestrictions: [Function],
      checkCollaborator: [Function],
      checkVulnerabilityAlerts: [Function],
      codeownersErrors: [Function],
      compareCommits: [Function],
      compareCommitsWithBasehead: [Function],
      createAutolink: [Function],
      createCommitComment: [Function],
      createCommitSignatureProtection: [Function],
      createCommitStatus: [Function],
      createDeployKey: [Function],
      createDeployment: [Function],
      createDeploymentBranchPolicy: [Function],
      createDeploymentStatus: [Function],
      createDispatchEvent: [Function],
      createForAuthenticatedUser: [Function],
      createFork: [Function],
      createInOrg: [Function],
      createOrUpdateEnvironment: [Function],
      createOrUpdateFileContents: [Function],
      createPagesDeployment: [Function],
      createPagesSite: [Function],
      createRelease: [Function],
      createTagProtection: [Function],
      createUsingTemplate: [Function],
      createWebhook: [Function],
      declineInvitation: [Function],
      declineInvitationForAuthenticatedUser: [Function],
      delete: [Function],
      deleteAccessRestrictions: [Function],
      deleteAdminBranchProtection: [Function],
      deleteAnEnvironment: [Function],
      deleteAutolink: [Function],
      deleteBranchProtection: [Function],
      deleteCommitComment: [Function],
      deleteCommitSignatureProtection: [Function],
      deleteDeployKey: [Function],
      deleteDeployment: [Function],
      deleteDeploymentBranchPolicy: [Function],
      deleteFile: [Function],
      deleteInvitation: [Function],
      deletePagesSite: [Function],
      deletePullRequestReviewProtection: [Function],
      deleteRelease: [Function],
      deleteReleaseAsset: [Function],
      deleteTagProtection: [Function],
      deleteWebhook: [Function],
      disableAutomatedSecurityFixes: [Function],
      disableLfsForRepo: [Function],
      disableVulnerabilityAlerts: [Function],
      downloadArchive: [Function],
      downloadTarballArchive: [Function],
      downloadZipballArchive: [Function],
      enableAutomatedSecurityFixes: [Function],
      enableLfsForRepo: [Function],
      enableVulnerabilityAlerts: [Function],
      generateReleaseNotes: [Function],
      get: [Function],
      getAccessRestrictions: [Function],
      getAdminBranchProtection: [Function],
      getAllEnvironments: [Function],
      getAllStatusCheckContexts: [Function],
      getAllTopics: [Function],
      getAppsWithAccessToProtectedBranch: [Function],
      getAutolink: [Function],
      getBranch: [Function],
      getBranchProtection: [Function],
      getClones: [Function],
      getCodeFrequencyStats: [Function],
      getCollaboratorPermissionLevel: [Function],
      getCombinedStatusForRef: [Function],
      getCommit: [Function],
      getCommitActivityStats: [Function],
      getCommitComment: [Function],
      getCommitSignatureProtection: [Function],
      getCommunityProfileMetrics: [Function],
      getContent: [Function],
      getContributorsStats: [Function],
      getDeployKey: [Function],
      getDeployment: [Function],
      getDeploymentBranchPolicy: [Function],
      getDeploymentStatus: [Function],
      getEnvironment: [Function],
      getLatestPagesBuild: [Function],
      getLatestRelease: [Function],
      getPages: [Function],
      getPagesBuild: [Function],
      getPagesHealthCheck: [Function],
      getParticipationStats: [Function],
      getPullRequestReviewProtection: [Function],
      getPunchCardStats: [Function],
      getReadme: [Function],
      getReadmeInDirectory: [Function],
      getRelease: [Function],
      getReleaseAsset: [Function],
      getReleaseByTag: [Function],
      getStatusChecksProtection: [Function],
      getTeamsWithAccessToProtectedBranch: [Function],
      getTopPaths: [Function],
      getTopReferrers: [Function],
      getUsersWithAccessToProtectedBranch: [Function],
      getViews: [Function],
      getWebhook: [Function],
      getWebhookConfigForRepo: [Function],
      getWebhookDelivery: [Function],
      listAutolinks: [Function],
      listBranches: [Function],
      listBranchesForHeadCommit: [Function],
      listCollaborators: [Function],
      listCommentsForCommit: [Function],
      listCommitCommentsForRepo: [Function],
      listCommitStatusesForRef: [Function],
      listCommits: [Function],
      listContributors: [Function],
      listDeployKeys: [Function],
      listDeploymentBranchPolicies: [Function],
      listDeploymentStatuses: [Function],
      listDeployments: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listForUser: [Function],
      listForks: [Function],
      listInvitations: [Function],
      listInvitationsForAuthenticatedUser: [Function],
      listLanguages: [Function],
      listPagesBuilds: [Function],
      listPublic: [Function],
      listPullRequestsAssociatedWithCommit: [Function],
      listReleaseAssets: [Function],
      listReleases: [Function],
      listTagProtection: [Function],
      listTags: [Function],
      listTeams: [Function],
      listWebhookDeliveries: [Function],
      listWebhooks: [Function],
      merge: [Function],
      mergeUpstream: [Function],
      pingWebhook: [Function],
      redeliverWebhookDelivery: [Function],
      removeAppAccessRestrictions: [Function],
      removeCollaborator: [Function],
      removeStatusCheckContexts: [Function],
      removeStatusCheckProtection: [Function],
      removeTeamAccessRestrictions: [Function],
      removeUserAccessRestrictions: [Function],
      renameBranch: [Function],
      replaceAllTopics: [Function],
      requestPagesBuild: [Function],
      setAdminBranchProtection: [Function],
      setAppAccessRestrictions: [Function],
      setStatusCheckContexts: [Function],
      setTeamAccessRestrictions: [Function],
      setUserAccessRestrictions: [Function],
      testPushWebhook: [Function],
      transfer: [Function],
      update: [Function],
      updateBranchProtection: [Function],
      updateCommitComment: [Function],
      updateDeploymentBranchPolicy: [Function],
      updateInformationAboutPagesSite: [Function],
      updateInvitation: [Function],
      updatePullRequestReviewProtection: [Function],
      updateRelease: [Function],
      updateReleaseAsset: [Function],
      updateStatusCheckPotection: [Function],
      updateStatusCheckProtection: [Function],
      updateWebhook: [Function],
      updateWebhookConfigForRepo: [Function],
      uploadReleaseAsset: [Function]
    },
    search: {
      code: [Function],
      commits: [Function],
      issuesAndPullRequests: [Function],
      labels: [Function],
      repos: [Function],
      topics: [Function],
      users: [Function]
    },
    secretScanning: {
      getAlert: [Function],
      listAlertsForEnterprise: [Function],
      listAlertsForOrg: [Function],
      listAlertsForRepo: [Function],
      listLocationsForAlert: [Function],
      updateAlert: [Function]
    },
    teams: {
      addOrUpdateMembershipForUserInOrg: [Function],
      addOrUpdateProjectPermissionsInOrg: [Function],
      addOrUpdateRepoPermissionsInOrg: [Function],
      checkPermissionsForProjectInOrg: [Function],
      checkPermissionsForRepoInOrg: [Function],
      create: [Function],
      createDiscussionCommentInOrg: [Function],
      createDiscussionInOrg: [Function],
      deleteDiscussionCommentInOrg: [Function],
      deleteDiscussionInOrg: [Function],
      deleteInOrg: [Function],
      getByName: [Function],
      getDiscussionCommentInOrg: [Function],
      getDiscussionInOrg: [Function],
      getMembershipForUserInOrg: [Function],
      list: [Function],
      listChildInOrg: [Function],
      listDiscussionCommentsInOrg: [Function],
      listDiscussionsInOrg: [Function],
      listForAuthenticatedUser: [Function],
      listMembersInOrg: [Function],
      listPendingInvitationsInOrg: [Function],
      listProjectsInOrg: [Function],
      listReposInOrg: [Function],
      removeMembershipForUserInOrg: [Function],
      removeProjectInOrg: [Function],
      removeRepoInOrg: [Function],
      updateDiscussionCommentInOrg: [Function],
      updateDiscussionInOrg: [Function],
      updateInOrg: [Function]
    },
    users: {
      addEmailForAuthenticated: [Function],
      addEmailForAuthenticatedUser: [Function],
      block: [Function],
      checkBlocked: [Function],
      checkFollowingForUser: [Function],
      checkPersonIsFollowedByAuthenticated: [Function],
      createGpgKeyForAuthenticated: [Function],
      createGpgKeyForAuthenticatedUser: [Function],
      createPublicSshKeyForAuthenticated: [Function],
      createPublicSshKeyForAuthenticatedUser: [Function],
      createSshSigningKeyForAuthenticatedUser: [Function],
      deleteEmailForAuthenticated: [Function],
      deleteEmailForAuthenticatedUser: [Function],
      deleteGpgKeyForAuthenticated: [Function],
      deleteGpgKeyForAuthenticatedUser: [Function],
      deletePublicSshKeyForAuthenticated: [Function],
      deletePublicSshKeyForAuthenticatedUser: [Function],
      deleteSshSigningKeyForAuthenticatedUser: [Function],
      follow: [Function],
      getAuthenticated: [Function],
      getByUsername: [Function],
      getContextForUser: [Function],
      getGpgKeyForAuthenticated: [Function],
      getGpgKeyForAuthenticatedUser: [Function],
      getPublicSshKeyForAuthenticated: [Function],
      getPublicSshKeyForAuthenticatedUser: [Function],
      getSshSigningKeyForAuthenticatedUser: [Function],
      list: [Function],
      listBlockedByAuthenticated: [Function],
      listBlockedByAuthenticatedUser: [Function],
      listEmailsForAuthenticated: [Function],
      listEmailsForAuthenticatedUser: [Function],
      listFollowedByAuthenticated: [Function],
      listFollowedByAuthenticatedUser: [Function],
      listFollowersForAuthenticatedUser: [Function],
      listFollowersForUser: [Function],
      listFollowingForUser: [Function],
      listGpgKeysForAuthenticated: [Function],
      listGpgKeysForAuthenticatedUser: [Function],
      listGpgKeysForUser: [Function],
      listPublicEmailsForAuthenticated: [Function],
      listPublicEmailsForAuthenticatedUser: [Function],
      listPublicKeysForUser: [Function],
      listPublicSshKeysForAuthenticated: [Function],
      listPublicSshKeysForAuthenticatedUser: [Function],
      listSshSigningKeysForAuthenticatedUser: [Function],
      listSshSigningKeysForUser: [Function],
      setPrimaryEmailVisibilityForAuthenticated: [Function],
      setPrimaryEmailVisibilityForAuthenticatedUser: [Function],
      unblock: [Function],
      unfollow: [Function],
      updateAuthenticated: [Function]
    },
    rest: {
      actions: [Object],
      activity: [Object],
      apps: [Object],
      billing: [Object],
      checks: [Object],
      codeScanning: [Object],
      codesOfConduct: [Object],
      codespaces: [Object],
      dependabot: [Object],
      dependencyGraph: [Object],
      emojis: [Object],
      enterpriseAdmin: [Object],
      gists: [Object],
      git: [Object],
      gitignore: [Object],
      interactions: [Object],
      issues: [Object],
      licenses: [Object],
      markdown: [Object],
      meta: [Object],
      migrations: [Object],
      orgs: [Object],
      packages: [Object],
      projects: [Object],
      pulls: [Object],
      rateLimit: [Object],
      reactions: [Object],
      repos: [Object],
      search: [Object],
      secretScanning: [Object],
      teams: [Object],
      users: [Object]
    },
    paginate: [Function: bound paginate] { iterator: [Function: bound iterator] }
  },
  request: [Function: newApi] {
    endpoint: [Function: bound endpointWithDefaults] {
      DEFAULTS: [Object],
      defaults: [Function: bound withDefaults],
      merge: [Function: bound merge],
      parse: [Function: parse]
    },
    defaults: [Function: bound withDefaults]
  },
  graphql: [Function: newApi] {
    defaults: [Function: bound withDefaults],
    endpoint: [Function: bound endpointWithDefaults] {
      DEFAULTS: [Object],
      defaults: [Function: bound withDefaults],
      merge: [Function: bound merge],
      parse: [Function: parse]
    }
  },
  fileCache: RepositoryFileCache {
    octokit: OctokitWithDefaults {
      request: [Function],
      graphql: [Function],
      log: [Object],
      hook: [Function],
      auth: [AsyncFunction],
      actions: [Object],
      activity: [Object],
      apps: [Object],
      billing: [Object],
      checks: [Object],
      codeScanning: [Object],
      codesOfConduct: [Object],
      codespaces: [Object],
      dependabot: [Object],
      dependencyGraph: [Object],
      emojis: [Object],
      enterpriseAdmin: [Object],
      gists: [Object],
      git: [Object],
      gitignore: [Object],
      interactions: [Object],
      issues: [Object],
      licenses: [Object],
      markdown: [Object],
      meta: [Object],
      migrations: [Object],
      orgs: [Object],
      packages: [Object],
      projects: [Object],
      pulls: [Object],
      rateLimit: [Object],
      reactions: [Object],
      repos: [Object],
      search: [Object],
      secretScanning: [Object],
      teams: [Object],
      users: [Object],
      rest: [Object],
      paginate: [Function]
    },
    repository: {
      owner: 'Codertocat',
      repo: 'Hello-World',
      defaultBranch: 'master'
    },
    cache: Map(0) {}
  },
  logger: GCFLogger {
    destination: SonicBoom {
      _bufs: [],
      _len: 0,
      fd: 1,
      _writing: false,
      _writingBuf: '',
      _ending: false,
      _reopening: false,
      _asyncDrainScheduled: true,
      _hwm: 16387,
      file: null,
      destroyed: false,
      minLength: 0,
      maxLength: 0,
      maxWrite: 16384,
      sync: true,
      _fsync: false,
      append: true,
      mode: undefined,
      retryEAGAIN: [Function (anonymous)],
      mkdir: false,
      release: [Function (anonymous)],
      _events: [Object: null prototype],
      _eventsCount: 2
    },
    pino: EventEmitter {
      levels: [Object],
      silent: [Function: noop],
      onChild: [Function: noop],
      trace: [Function: LOG],
      debug: [Function: LOG],
      info: [Function: LOG],
      warn: [Function: LOG],
      error: [Function: LOG],
      fatal: [Function (anonymous)],
      metric: [Function: LOG],
      [Symbol(pino.useOnlyCustomLevels)]: false,
      [Symbol(pino.stream)]: [SonicBoom],
      [Symbol(pino.time)]: [Function: nullTime],
      [Symbol(pino.timeSliceIndex)]: 0,
      [Symbol(pino.stringify)]: [Function: stringify],
      [Symbol(pino.stringifySafe)]: [Function: stringify],
      [Symbol(pino.stringifiers)]: {},
      [Symbol(pino.end)]: '}\n',
      [Symbol(pino.formatOpts)]: [Object],
      [Symbol(pino.messageKey)]: 'message',
      [Symbol(pino.errorKey)]: 'err',
      [Symbol(pino.nestedKey)]: null,
      [Symbol(pino.nestedKeyStr)]: '',
      [Symbol(pino.serializers)]: [Object],
      [Symbol(pino.mixin)]: undefined,
      [Symbol(pino.mixinMergeStrategy)]: undefined,
      [Symbol(pino.chindings)]: '',
      [Symbol(pino.formatters)]: [Object],
      [Symbol(pino.hooks)]: [Object],
      [Symbol(pino.lsCache)]: [Object],
      [Symbol(pino.levelVal)]: 10
    },
    trace: [Function: bound trace],
    debug: [Function: bound debug],
    info: [Function: bound info],
    warn: [Function: bound warn],
    metric: [Function: bound metric],
    error: [Function: bound error],
    child: [Function: bound child]
  }
} instanceOf(GitHub)
'"master"'
{
  releaseType: 'java-yoshi',
  versioning: undefined,
  bumpMinorPreMajor: undefined,
  bumpPatchForMinorPreMajor: undefined,
  draft: undefined,
  draftPullRequest: undefined,
  packageName: undefined,
  includeComponentInTag: false,
  pullRequestTitlePattern: undefined,
  changelogHost: undefined,
  changelogPath: undefined,
  changelogType: undefined,
  versionFile: undefined,
  extraFiles: undefined,
  initialVersion: undefined
} has("releaseType", java-yoshi)
{
  manifestPath: undefined,
  labels: [ 'foo', 'bar' ],
  releaseLabels: undefined,
  plugins: [],
  logger: GCFLogger {
    destination: SonicBoom {
      _bufs: [],
      _len: 0,
      fd: 1,
      _writing: false,
      _writingBuf: '',
      _ending: false,
      _reopening: false,
      _asyncDrainScheduled: true,
      _hwm: 16387,
      file: null,
      destroyed: false,
      minLength: 0,
      maxLength: 0,
      maxWrite: 16384,
      sync: true,
      _fsync: false,
      append: true,
      mode: undefined,
      retryEAGAIN: [Function (anonymous)],
      mkdir: false,
      release: [Function (anonymous)],
      _events: [Object: null prototype],
      _eventsCount: 2
    },
    pino: EventEmitter {
      levels: [Object],
      silent: [Function: noop],
      onChild: [Function: noop],
      trace: [Function: LOG],
      debug: [Function: LOG],
      info: [Function: LOG],
      warn: [Function: LOG],
      error: [Function: LOG],
      fatal: [Function (anonymous)],
      metric: [Function: LOG],
      [Symbol(pino.useOnlyCustomLevels)]: false,
      [Symbol(pino.stream)]: [SonicBoom],
      [Symbol(pino.time)]: [Function: nullTime],
      [Symbol(pino.timeSliceIndex)]: 0,
      [Symbol(pino.stringify)]: [Function: stringify],
      [Symbol(pino.stringifySafe)]: [Function: stringify],
      [Symbol(pino.stringifiers)]: {},
      [Symbol(pino.end)]: '}\n',
      [Symbol(pino.formatOpts)]: [Object],
      [Symbol(pino.messageKey)]: 'message',
      [Symbol(pino.errorKey)]: 'err',
      [Symbol(pino.nestedKey)]: null,
      [Symbol(pino.nestedKeyStr)]: '',
      [Symbol(pino.serializers)]: [Object],
      [Symbol(pino.mixin)]: undefined,
      [Symbol(pino.mixinMergeStrategy)]: undefined,
      [Symbol(pino.chindings)]: '',
      [Symbol(pino.formatters)]: [Object],
      [Symbol(pino.hooks)]: [Object],
      [Symbol(pino.lsCache)]: [Object],
      [Symbol(pino.levelVal)]: 10
    },
    trace: [Function: bound trace],
    debug: [Function: bound debug],
    info: [Function: bound info],
    warn: [Function: bound warn],
    metric: [Function: bound metric],
    error: [Function: bound error],
    child: [Function: bound child]
  }
} any
undefined
      at Object.fail (node_modules/sinon/lib/sinon/assert.js:120:25)
      at failAssertion (node_modules/sinon/lib/sinon/assert.js:66:20)
      at Object.assert.<computed> [as calledOnceWithExactly] (node_modules/sinon/lib/sinon/assert.js:95:17)
      at Context.<anonymous> (test/release-please.ts:939:20)
      at processTicksAndRejections (internal/process/task_queues.js:95:5)

  5) ReleasePleaseBot
       pull-request labeled event
         should try to tag a GitHub release:
     AssertError: expected fromConfig to be called once and with exact arguments 
Call 1:
GitHub {
  getCommitFiles: [AsyncFunction (anonymous)],
  graphqlRequest: [AsyncFunction (anonymous)],
  findFilesByFilenameAndRef: [AsyncFunction (anonymous)],
  findFilesByGlobAndRef: [AsyncFunction (anonymous)],
  createPullRequest: [AsyncFunction (anonymous)],
  getPullRequest: [AsyncFunction (anonymous)],
  updatePullRequest: [AsyncFunction (anonymous)],
  findFilesByExtensionAndRef: [AsyncFunction (anonymous)],
  createRelease: [AsyncFunction (anonymous)],
  commentOnIssue: [AsyncFunction (anonymous)],
  removeIssueLabels: [AsyncFunction (anonymous)],
  addIssueLabels: [AsyncFunction (anonymous)],
  repository: { owner: 'Codertocat', repo: 'Hello-World', defaultBranch: 'master' },
  octokit: OctokitWithDefaults {
    request: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    graphql: [Function: newApi] {
      defaults: [Function: bound withDefaults],
      endpoint: [Function]
    },
    log: {
      debug: [Function: debug],
      info: [Function: info],
      warn: [Function: bound warn],
      error: [Function: bound error]
    },
    hook: [Function: bound register] {
      api: [Object],
      remove: [Function: bound removeHook],
      before: [Function: bound addHook],
      error: [Function: bound addHook],
      after: [Function: bound addHook],
      wrap: [Function: bound addHook]
    },
    auth: [Function: bound auth] AsyncFunction {
      hook: [Function: bound hook] AsyncFunction
    },
    actions: {
      addCustomLabelsToSelfHostedRunnerForOrg: [Function],
      addCustomLabelsToSelfHostedRunnerForRepo: [Function],
      addSelectedRepoToOrgSecret: [Function],
      approveWorkflowRun: [Function],
      cancelWorkflowRun: [Function],
      createOrUpdateEnvironmentSecret: [Function],
      createOrUpdateOrgSecret: [Function],
      createOrUpdateRepoSecret: [Function],
      createRegistrationTokenForOrg: [Function],
      createRegistrationTokenForRepo: [Function],
      createRemoveTokenForOrg: [Function],
      createRemoveTokenForRepo: [Function],
      createWorkflowDispatch: [Function],
      deleteActionsCacheById: [Function],
      deleteActionsCacheByKey: [Function],
      deleteArtifact: [Function],
      deleteEnvironmentSecret: [Function],
      deleteOrgSecret: [Function],
      deleteRepoSecret: [Function],
      deleteSelfHostedRunnerFromOrg: [Function],
      deleteSelfHostedRunnerFromRepo: [Function],
      deleteWorkflowRun: [Function],
      deleteWorkflowRunLogs: [Function],
      disableSelectedRepositoryGithubActionsOrganization: [Function],
      disableWorkflow: [Function],
      downloadArtifact: [Function],
      downloadJobLogsForWorkflowRun: [Function],
      downloadWorkflowRunAttemptLogs: [Function],
      downloadWorkflowRunLogs: [Function],
      enableSelectedRepositoryGithubActionsOrganization: [Function],
      enableWorkflow: [Function],
      getActionsCacheList: [Function],
      getActionsCacheUsage: [Function],
      getActionsCacheUsageByRepoForOrg: [Function],
      getActionsCacheUsageForEnterprise: [Function],
      getActionsCacheUsageForOrg: [Function],
      getAllowedActionsOrganization: [Function],
      getAllowedActionsRepository: [Function],
      getArtifact: [Function],
      getEnvironmentPublicKey: [Function],
      getEnvironmentSecret: [Function],
      getGithubActionsDefaultWorkflowPermissionsEnterprise: [Function],
      getGithubActionsDefaultWorkflowPermissionsOrganization: [Function],
      getGithubActionsDefaultWorkflowPermissionsRepository: [Function],
      getGithubActionsPermissionsOrganization: [Function],
      getGithubActionsPermissionsRepository: [Function],
      getJobForWorkflowRun: [Function],
      getOrgPublicKey: [Function],
      getOrgSecret: [Function],
      getPendingDeploymentsForRun: [Function],
      getRepoPermissions: [Function],
      getRepoPublicKey: [Function],
      getRepoSecret: [Function],
      getReviewsForRun: [Function],
      getSelfHostedRunnerForOrg: [Function],
      getSelfHostedRunnerForRepo: [Function],
      getWorkflow: [Function],
      getWorkflowAccessToRepository: [Function],
      getWorkflowRun: [Function],
      getWorkflowRunAttempt: [Function],
      getWorkflowRunUsage: [Function],
      getWorkflowUsage: [Function],
      listArtifactsForRepo: [Function],
      listEnvironmentSecrets: [Function],
      listJobsForWorkflowRun: [Function],
      listJobsForWorkflowRunAttempt: [Function],
      listLabelsForSelfHostedRunnerForOrg: [Function],
      listLabelsForSelfHostedRunnerForRepo: [Function],
      listOrgSecrets: [Function],
      listRepoSecrets: [Function],
      listRepoWorkflows: [Function],
      listRunnerApplicationsForOrg: [Function],
      listRunnerApplicationsForRepo: [Function],
      listSelectedReposForOrgSecret: [Function],
      listSelectedRepositoriesEnabledGithubActionsOrganization: [Function],
      listSelfHostedRunnersForOrg: [Function],
      listSelfHostedRunnersForRepo: [Function],
      listWorkflowRunArtifacts: [Function],
      listWorkflowRuns: [Function],
      listWorkflowRunsForRepo: [Function],
      reRunJobForWorkflowRun: [Function],
      reRunWorkflow: [Function],
      reRunWorkflowFailedJobs: [Function],
      removeAllCustomLabelsFromSelfHostedRunnerForOrg: [Function],
      removeAllCustomLabelsFromSelfHostedRunnerForRepo: [Function],
      removeCustomLabelFromSelfHostedRunnerForOrg: [Function],
      removeCustomLabelFromSelfHostedRunnerForRepo: [Function],
      removeSelectedRepoFromOrgSecret: [Function],
      reviewPendingDeploymentsForRun: [Function],
      setAllowedActionsOrganization: [Function],
      setAllowedActionsRepository: [Function],
      setCustomLabelsForSelfHostedRunnerForOrg: [Function],
      setCustomLabelsForSelfHostedRunnerForRepo: [Function],
      setGithubActionsDefaultWorkflowPermissionsEnterprise: [Function],
      setGithubActionsDefaultWorkflowPermissionsOrganization: [Function],
      setGithubActionsDefaultWorkflowPermissionsRepository: [Function],
      setGithubActionsPermissionsOrganization: [Function],
      setGithubActionsPermissionsRepository: [Function],
      setSelectedReposForOrgSecret: [Function],
      setSelectedRepositoriesEnabledGithubActionsOrganization: [Function],
      setWorkflowAccessToRepository: [Function]
    },
    activity: {
      checkRepoIsStarredByAuthenticatedUser: [Function],
      deleteRepoSubscription: [Function],
      deleteThreadSubscription: [Function],
      getFeeds: [Function],
      getRepoSubscription: [Function],
      getThread: [Function],
      getThreadSubscriptionForAuthenticatedUser: [Function],
      listEventsForAuthenticatedUser: [Function],
      listNotificationsForAuthenticatedUser: [Function],
      listOrgEventsForAuthenticatedUser: [Function],
      listPublicEvents: [Function],
      listPublicEventsForRepoNetwork: [Function],
      listPublicEventsForUser: [Function],
      listPublicOrgEvents: [Function],
      listReceivedEventsForUser: [Function],
      listReceivedPublicEventsForUser: [Function],
      listRepoEvents: [Function],
      listRepoNotificationsForAuthenticatedUser: [Function],
      listReposStarredByAuthenticatedUser: [Function],
      listReposStarredByUser: [Function],
      listReposWatchedByUser: [Function],
      listStargazersForRepo: [Function],
      listWatchedReposForAuthenticatedUser: [Function],
      listWatchersForRepo: [Function],
      markNotificationsAsRead: [Function],
      markRepoNotificationsAsRead: [Function],
      markThreadAsRead: [Function],
      setRepoSubscription: [Function],
      setThreadSubscription: [Function],
      starRepoForAuthenticatedUser: [Function],
      unstarRepoForAuthenticatedUser: [Function]
    },
    apps: {
      addRepoToInstallation: [Function],
      addRepoToInstallationForAuthenticatedUser: [Function],
      checkToken: [Function],
      createFromManifest: [Function],
      createInstallationAccessToken: [Function],
      deleteAuthorization: [Function],
      deleteInstallation: [Function],
      deleteToken: [Function],
      getAuthenticated: [Function],
      getBySlug: [Function],
      getInstallation: [Function],
      getOrgInstallation: [Function],
      getRepoInstallation: [Function],
      getSubscriptionPlanForAccount: [Function],
      getSubscriptionPlanForAccountStubbed: [Function],
      getUserInstallation: [Function],
      getWebhookConfigForApp: [Function],
      getWebhookDelivery: [Function],
      listAccountsForPlan: [Function],
      listAccountsForPlanStubbed: [Function],
      listInstallationReposForAuthenticatedUser: [Function],
      listInstallations: [Function],
      listInstallationsForAuthenticatedUser: [Function],
      listPlans: [Function],
      listPlansStubbed: [Function],
      listReposAccessibleToInstallation: [Function],
      listSubscriptionsForAuthenticatedUser: [Function],
      listSubscriptionsForAuthenticatedUserStubbed: [Function],
      listWebhookDeliveries: [Function],
      redeliverWebhookDelivery: [Function],
      removeRepoFromInstallation: [Function],
      removeRepoFromInstallationForAuthenticatedUser: [Function],
      resetToken: [Function],
      revokeInstallationAccessToken: [Function],
      scopeToken: [Function],
      suspendInstallation: [Function],
      unsuspendInstallation: [Function],
      updateWebhookConfigForApp: [Function]
    },
    billing: {
      getGithubActionsBillingOrg: [Function],
      getGithubActionsBillingUser: [Function],
      getGithubAdvancedSecurityBillingGhe: [Function],
      getGithubAdvancedSecurityBillingOrg: [Function],
      getGithubPackagesBillingOrg: [Function],
      getGithubPackagesBillingUser: [Function],
      getSharedStorageBillingOrg: [Function],
      getSharedStorageBillingUser: [Function]
    },
    checks: {
      create: [Function],
      createSuite: [Function],
      get: [Function],
      getSuite: [Function],
      listAnnotations: [Function],
      listForRef: [Function],
      listForSuite: [Function],
      listSuitesForRef: [Function],
      rerequestRun: [Function],
      rerequestSuite: [Function],
      setSuitesPreferences: [Function],
      update: [Function]
    },
    codeScanning: {
      deleteAnalysis: [Function],
      getAlert: [Function],
      getAnalysis: [Function],
      getCodeqlDatabase: [Function],
      getSarif: [Function],
      listAlertInstances: [Function],
      listAlertsForEnterprise: [Function],
      listAlertsForOrg: [Function],
      listAlertsForRepo: [Function],
      listAlertsInstances: [Function],
      listCodeqlDatabases: [Function],
      listRecentAnalyses: [Function],
      updateAlert: [Function],
      uploadSarif: [Function]
    },
    codesOfConduct: { getAllCodesOfConduct: [Function], getConductCode: [Function] },
    codespaces: {
      addRepositoryForSecretForAuthenticatedUser: [Function],
      addSelectedRepoToOrgSecret: [Function],
      codespaceMachinesForAuthenticatedUser: [Function],
      createForAuthenticatedUser: [Function],
      createOrUpdateOrgSecret: [Function],
      createOrUpdateRepoSecret: [Function],
      createOrUpdateSecretForAuthenticatedUser: [Function],
      createWithPrForAuthenticatedUser: [Function],
      createWithRepoForAuthenticatedUser: [Function],
      deleteForAuthenticatedUser: [Function],
      deleteFromOrganization: [Function],
      deleteOrgSecret: [Function],
      deleteRepoSecret: [Function],
      deleteSecretForAuthenticatedUser: [Function],
      exportForAuthenticatedUser: [Function],
      getExportDetailsForAuthenticatedUser: [Function],
      getForAuthenticatedUser: [Function],
      getOrgPublicKey: [Function],
      getOrgSecret: [Function],
      getPublicKeyForAuthenticatedUser: [Function],
      getRepoPublicKey: [Function],
      getRepoSecret: [Function],
      getSecretForAuthenticatedUser: [Function],
      listDevcontainersInRepositoryForAuthenticatedUser: [Function],
      listForAuthenticatedUser: [Function],
      listInOrganization: [Function],
      listInRepositoryForAuthenticatedUser: [Function],
      listOrgSecrets: [Function],
      listRepoSecrets: [Function],
      listRepositoriesForSecretForAuthenticatedUser: [Function],
      listSecretsForAuthenticatedUser: [Function],
      listSelectedReposForOrgSecret: [Function],
      preFlightWithRepoForAuthenticatedUser: [Function],
      removeRepositoryForSecretForAuthenticatedUser: [Function],
      removeSelectedRepoFromOrgSecret: [Function],
      repoMachinesForAuthenticatedUser: [Function],
      setRepositoriesForSecretForAuthenticatedUser: [Function],
      setSelectedReposForOrgSecret: [Function],
      startForAuthenticatedUser: [Function],
      stopForAuthenticatedUser: [Function],
      stopInOrganization: [Function],
      updateForAuthenticatedUser: [Function]
    },
    dependabot: {
      addSelectedRepoToOrgSecret: [Function],
      createOrUpdateOrgSecret: [Function],
      createOrUpdateRepoSecret: [Function],
      deleteOrgSecret: [Function],
      deleteRepoSecret: [Function],
      getAlert: [Function],
      getOrgPublicKey: [Function],
      getOrgSecret: [Function],
      getRepoPublicKey: [Function],
      getRepoSecret: [Function],
      listAlertsForRepo: [Function],
      listOrgSecrets: [Function],
      listRepoSecrets: [Function],
      listSelectedReposForOrgSecret: [Function],
      removeSelectedRepoFromOrgSecret: [Function],
      setSelectedReposForOrgSecret: [Function],
      updateAlert: [Function]
    },
    dependencyGraph: { createRepositorySnapshot: [Function], diffRange: [Function] },
    emojis: { get: [Function] },
    enterpriseAdmin: {
      addCustomLabelsToSelfHostedRunnerForEnterprise: [Function],
      disableSelectedOrganizationGithubActionsEnterprise: [Function],
      enableSelectedOrganizationGithubActionsEnterprise: [Function],
      getAllowedActionsEnterprise: [Function],
      getGithubActionsPermissionsEnterprise: [Function],
      getServerStatistics: [Function],
      listLabelsForSelfHostedRunnerForEnterprise: [Function],
      listSelectedOrganizationsEnabledGithubActionsEnterprise: [Function],
      removeAllCustomLabelsFromSelfHostedRunnerForEnterprise: [Function],
      removeCustomLabelFromSelfHostedRunnerForEnterprise: [Function],
      setAllowedActionsEnterprise: [Function],
      setCustomLabelsForSelfHostedRunnerForEnterprise: [Function],
      setGithubActionsPermissionsEnterprise: [Function],
      setSelectedOrganizationsEnabledGithubActionsEnterprise: [Function]
    },
    gists: {
      checkIsStarred: [Function],
      create: [Function],
      createComment: [Function],
      delete: [Function],
      deleteComment: [Function],
      fork: [Function],
      get: [Function],
      getComment: [Function],
      getRevision: [Function],
      list: [Function],
      listComments: [Function],
      listCommits: [Function],
      listForUser: [Function],
      listForks: [Function],
      listPublic: [Function],
      listStarred: [Function],
      star: [Function],
      unstar: [Function],
      update: [Function],
      updateComment: [Function]
    },
    git: {
      createBlob: [Function],
      createCommit: [Function],
      createRef: [Function],
      createTag: [Function],
      createTree: [Function],
      deleteRef: [Function],
      getBlob: [Function],
      getCommit: [Function],
      getRef: [Function],
      getTag: [Function],
      getTree: [Function],
      listMatchingRefs: [Function],
      updateRef: [Function]
    },
    gitignore: { getAllTemplates: [Function], getTemplate: [Function] },
    interactions: {
      getRestrictionsForAuthenticatedUser: [Function],
      getRestrictionsForOrg: [Function],
      getRestrictionsForRepo: [Function],
      getRestrictionsForYourPublicRepos: [Function],
      removeRestrictionsForAuthenticatedUser: [Function],
      removeRestrictionsForOrg: [Function],
      removeRestrictionsForRepo: [Function],
      removeRestrictionsForYourPublicRepos: [Function],
      setRestrictionsForAuthenticatedUser: [Function],
      setRestrictionsForOrg: [Function],
      setRestrictionsForRepo: [Function],
      setRestrictionsForYourPublicRepos: [Function]
    },
    issues: {
      addAssignees: [Function],
      addLabels: [Function],
      checkUserCanBeAssigned: [Function],
      create: [Function],
      createComment: [Function],
      createLabel: [Function],
      createMilestone: [Function],
      deleteComment: [Function],
      deleteLabel: [Function],
      deleteMilestone: [Function],
      get: [Function],
      getComment: [Function],
      getEvent: [Function],
      getLabel: [Function],
      getMilestone: [Function],
      list: [Function],
      listAssignees: [Function],
      listComments: [Function],
      listCommentsForRepo: [Function],
      listEvents: [Function],
      listEventsForRepo: [Function],
      listEventsForTimeline: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listForRepo: [Function],
      listLabelsForMilestone: [Function],
      listLabelsForRepo: [Function],
      listLabelsOnIssue: [Function],
      listMilestones: [Function],
      lock: [Function],
      removeAllLabels: [Function],
      removeAssignees: [Function],
      removeLabel: [Function],
      setLabels: [Function],
      unlock: [Function],
      update: [Function],
      updateComment: [Function],
      updateLabel: [Function],
      updateMilestone: [Function]
    },
    licenses: {
      get: [Function],
      getAllCommonlyUsed: [Function],
      getForRepo: [Function]
    },
    markdown: { render: [Function], renderRaw: [Function] },
    meta: {
      get: [Function],
      getOctocat: [Function],
      getZen: [Function],
      root: [Function]
    },
    migrations: {
      cancelImport: [Function],
      deleteArchiveForAuthenticatedUser: [Function],
      deleteArchiveForOrg: [Function],
      downloadArchiveForOrg: [Function],
      getArchiveForAuthenticatedUser: [Function],
      getCommitAuthors: [Function],
      getImportStatus: [Function],
      getLargeFiles: [Function],
      getStatusForAuthenticatedUser: [Function],
      getStatusForOrg: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listReposForAuthenticatedUser: [Function],
      listReposForOrg: [Function],
      listReposForUser: [Function],
      mapCommitAuthor: [Function],
      setLfsPreference: [Function],
      startForAuthenticatedUser: [Function],
      startForOrg: [Function],
      startImport: [Function],
      unlockRepoForAuthenticatedUser: [Function],
      unlockRepoForOrg: [Function],
      updateImport: [Function]
    },
    orgs: {
      addSecurityManagerTeam: [Function],
      blockUser: [Function],
      cancelInvitation: [Function],
      checkBlockedUser: [Function],
      checkMembershipForUser: [Function],
      checkPublicMembershipForUser: [Function],
      convertMemberToOutsideCollaborator: [Function],
      createCustomRole: [Function],
      createInvitation: [Function],
      createWebhook: [Function],
      deleteCustomRole: [Function],
      deleteWebhook: [Function],
      enableOrDisableSecurityProductOnAllOrgRepos: [Function],
      get: [Function],
      getMembershipForAuthenticatedUser: [Function],
      getMembershipForUser: [Function],
      getWebhook: [Function],
      getWebhookConfigForOrg: [Function],
      getWebhookDelivery: [Function],
      list: [Function],
      listAppInstallations: [Function],
      listBlockedUsers: [Function],
      listCustomRoles: [Function],
      listFailedInvitations: [Function],
      listFineGrainedPermissions: [Function],
      listForAuthenticatedUser: [Function],
      listForUser: [Function],
      listInvitationTeams: [Function],
      listMembers: [Function],
      listMembershipsForAuthenticatedUser: [Function],
      listOutsideCollaborators: [Function],
      listPendingInvitations: [Function],
      listPublicMembers: [Function],
      listSecurityManagerTeams: [Function],
      listWebhookDeliveries: [Function],
      listWebhooks: [Function],
      pingWebhook: [Function],
      redeliverWebhookDelivery: [Function],
      removeMember: [Function],
      removeMembershipForUser: [Function],
      removeOutsideCollaborator: [Function],
      removePublicMembershipForAuthenticatedUser: [Function],
      removeSecurityManagerTeam: [Function],
      setMembershipForUser: [Function],
      setPublicMembershipForAuthenticatedUser: [Function],
      unblockUser: [Function],
      update: [Function],
      updateCustomRole: [Function],
      updateMembershipForAuthenticatedUser: [Function],
      updateWebhook: [Function],
      updateWebhookConfigForOrg: [Function]
    },
    packages: {
      deletePackageForAuthenticatedUser: [Function],
      deletePackageForOrg: [Function],
      deletePackageForUser: [Function],
      deletePackageVersionForAuthenticatedUser: [Function],
      deletePackageVersionForOrg: [Function],
      deletePackageVersionForUser: [Function],
      getAllPackageVersionsForAPackageOwnedByAnOrg: [Function],
      getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [Function],
      getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [Function],
      getAllPackageVersionsForPackageOwnedByOrg: [Function],
      getAllPackageVersionsForPackageOwnedByUser: [Function],
      getPackageForAuthenticatedUser: [Function],
      getPackageForOrganization: [Function],
      getPackageForUser: [Function],
      getPackageVersionForAuthenticatedUser: [Function],
      getPackageVersionForOrganization: [Function],
      getPackageVersionForUser: [Function],
      listPackagesForAuthenticatedUser: [Function],
      listPackagesForOrganization: [Function],
      listPackagesForUser: [Function],
      restorePackageForAuthenticatedUser: [Function],
      restorePackageForOrg: [Function],
      restorePackageForUser: [Function],
      restorePackageVersionForAuthenticatedUser: [Function],
      restorePackageVersionForOrg: [Function],
      restorePackageVersionForUser: [Function]
    },
    projects: {
      addCollaborator: [Function],
      createCard: [Function],
      createColumn: [Function],
      createForAuthenticatedUser: [Function],
      createForOrg: [Function],
      createForRepo: [Function],
      delete: [Function],
      deleteCard: [Function],
      deleteColumn: [Function],
      get: [Function],
      getCard: [Function],
      getColumn: [Function],
      getPermissionForUser: [Function],
      listCards: [Function],
      listCollaborators: [Function],
      listColumns: [Function],
      listForOrg: [Function],
      listForRepo: [Function],
      listForUser: [Function],
      moveCard: [Function],
      moveColumn: [Function],
      removeCollaborator: [Function],
      update: [Function],
      updateCard: [Function],
      updateColumn: [Function]
    },
    pulls: {
      checkIfMerged: [Function],
      create: [Function],
      createReplyForReviewComment: [Function],
      createReview: [Function],
      createReviewComment: [Function],
      deletePendingReview: [Function],
      deleteReviewComment: [Function],
      dismissReview: [Function],
      get: [Function],
      getReview: [Function],
      getReviewComment: [Function],
      list: [Function],
      listCommentsForReview: [Function],
      listCommits: [Function],
      listFiles: [Function],
      listRequestedReviewers: [Function],
      listReviewComments: [Function],
      listReviewCommentsForRepo: [Function],
      listReviews: [Function],
      merge: [Function],
      removeRequestedReviewers: [Function],
      requestReviewers: [Function],
      submitReview: [Function],
      update: [Function],
      updateBranch: [Function],
      updateReview: [Function],
      updateReviewComment: [Function]
    },
    rateLimit: { get: [Function] },
    reactions: {
      createForCommitComment: [Function],
      createForIssue: [Function],
      createForIssueComment: [Function],
      createForPullRequestReviewComment: [Function],
      createForRelease: [Function],
      createForTeamDiscussionCommentInOrg: [Function],
      createForTeamDiscussionInOrg: [Function],
      deleteForCommitComment: [Function],
      deleteForIssue: [Function],
      deleteForIssueComment: [Function],
      deleteForPullRequestComment: [Function],
      deleteForRelease: [Function],
      deleteForTeamDiscussion: [Function],
      deleteForTeamDiscussionComment: [Function],
      listForCommitComment: [Function],
      listForIssue: [Function],
      listForIssueComment: [Function],
      listForPullRequestReviewComment: [Function],
      listForRelease: [Function],
      listForTeamDiscussionCommentInOrg: [Function],
      listForTeamDiscussionInOrg: [Function]
    },
    repos: {
      acceptInvitation: [Function],
      acceptInvitationForAuthenticatedUser: [Function],
      addAppAccessRestrictions: [Function],
      addCollaborator: [Function],
      addStatusCheckContexts: [Function],
      addTeamAccessRestrictions: [Function],
      addUserAccessRestrictions: [Function],
      checkCollaborator: [Function],
      checkVulnerabilityAlerts: [Function],
      codeownersErrors: [Function],
      compareCommits: [Function],
      compareCommitsWithBasehead: [Function],
      createAutolink: [Function],
      createCommitComment: [Function],
      createCommitSignatureProtection: [Function],
      createCommitStatus: [Function],
      createDeployKey: [Function],
      createDeployment: [Function],
      createDeploymentBranchPolicy: [Function],
      createDeploymentStatus: [Function],
      createDispatchEvent: [Function],
      createForAuthenticatedUser: [Function],
      createFork: [Function],
      createInOrg: [Function],
      createOrUpdateEnvironment: [Function],
      createOrUpdateFileContents: [Function],
      createPagesDeployment: [Function],
      createPagesSite: [Function],
      createRelease: [Function],
      createTagProtection: [Function],
      createUsingTemplate: [Function],
      createWebhook: [Function],
      declineInvitation: [Function],
      declineInvitationForAuthenticatedUser: [Function],
      delete: [Function],
      deleteAccessRestrictions: [Function],
      deleteAdminBranchProtection: [Function],
      deleteAnEnvironment: [Function],
      deleteAutolink: [Function],
      deleteBranchProtection: [Function],
      deleteCommitComment: [Function],
      deleteCommitSignatureProtection: [Function],
      deleteDeployKey: [Function],
      deleteDeployment: [Function],
      deleteDeploymentBranchPolicy: [Function],
      deleteFile: [Function],
      deleteInvitation: [Function],
      deletePagesSite: [Function],
      deletePullRequestReviewProtection: [Function],
      deleteRelease: [Function],
      deleteReleaseAsset: [Function],
      deleteTagProtection: [Function],
      deleteWebhook: [Function],
      disableAutomatedSecurityFixes: [Function],
      disableLfsForRepo: [Function],
      disableVulnerabilityAlerts: [Function],
      downloadArchive: [Function],
      downloadTarballArchive: [Function],
      downloadZipballArchive: [Function],
      enableAutomatedSecurityFixes: [Function],
      enableLfsForRepo: [Function],
      enableVulnerabilityAlerts: [Function],
      generateReleaseNotes: [Function],
      get: [Function],
      getAccessRestrictions: [Function],
      getAdminBranchProtection: [Function],
      getAllEnvironments: [Function],
      getAllStatusCheckContexts: [Function],
      getAllTopics: [Function],
      getAppsWithAccessToProtectedBranch: [Function],
      getAutolink: [Function],
      getBranch: [Function],
      getBranchProtection: [Function],
      getClones: [Function],
      getCodeFrequencyStats: [Function],
      getCollaboratorPermissionLevel: [Function],
      getCombinedStatusForRef: [Function],
      getCommit: [Function],
      getCommitActivityStats: [Function],
      getCommitComment: [Function],
      getCommitSignatureProtection: [Function],
      getCommunityProfileMetrics: [Function],
      getContent: [Function],
      getContributorsStats: [Function],
      getDeployKey: [Function],
      getDeployment: [Function],
      getDeploymentBranchPolicy: [Function],
      getDeploymentStatus: [Function],
      getEnvironment: [Function],
      getLatestPagesBuild: [Function],
      getLatestRelease: [Function],
      getPages: [Function],
      getPagesBuild: [Function],
      getPagesHealthCheck: [Function],
      getParticipationStats: [Function],
      getPullRequestReviewProtection: [Function],
      getPunchCardStats: [Function],
      getReadme: [Function],
      getReadmeInDirectory: [Function],
      getRelease: [Function],
      getReleaseAsset: [Function],
      getReleaseByTag: [Function],
      getStatusChecksProtection: [Function],
      getTeamsWithAccessToProtectedBranch: [Function],
      getTopPaths: [Function],
      getTopReferrers: [Function],
      getUsersWithAccessToProtectedBranch: [Function],
      getViews: [Function],
      getWebhook: [Function],
      getWebhookConfigForRepo: [Function],
      getWebhookDelivery: [Function],
      listAutolinks: [Function],
      listBranches: [Function],
      listBranchesForHeadCommit: [Function],
      listCollaborators: [Function],
      listCommentsForCommit: [Function],
      listCommitCommentsForRepo: [Function],
      listCommitStatusesForRef: [Function],
      listCommits: [Function],
      listContributors: [Function],
      listDeployKeys: [Function],
      listDeploymentBranchPolicies: [Function],
      listDeploymentStatuses: [Function],
      listDeployments: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listForUser: [Function],
      listForks: [Function],
      listInvitations: [Function],
      listInvitationsForAuthenticatedUser: [Function],
      listLanguages: [Function],
      listPagesBuilds: [Function],
      listPublic: [Function],
      listPullRequestsAssociatedWithCommit: [Function],
      listReleaseAssets: [Function],
      listReleases: [Function],
      listTagProtection: [Function],
      listTags: [Function],
      listTeams: [Function],
      listWebhookDeliveries: [Function],
      listWebhooks: [Function],
      merge: [Function],
      mergeUpstream: [Function],
      pingWebhook: [Function],
      redeliverWebhookDelivery: [Function],
      removeAppAccessRestrictions: [Function],
      removeCollaborator: [Function],
      removeStatusCheckContexts: [Function],
      removeStatusCheckProtection: [Function],
      removeTeamAccessRestrictions: [Function],
      removeUserAccessRestrictions: [Function],
      renameBranch: [Function],
      replaceAllTopics: [Function],
      requestPagesBuild: [Function],
      setAdminBranchProtection: [Function],
      setAppAccessRestrictions: [Function],
      setStatusCheckContexts: [Function],
      setTeamAccessRestrictions: [Function],
      setUserAccessRestrictions: [Function],
      testPushWebhook: [Function],
      transfer: [Function],
      update: [Function],
      updateBranchProtection: [Function],
      updateCommitComment: [Function],
      updateDeploymentBranchPolicy: [Function],
      updateInformationAboutPagesSite: [Function],
      updateInvitation: [Function],
      updatePullRequestReviewProtection: [Function],
      updateRelease: [Function],
      updateReleaseAsset: [Function],
      updateStatusCheckPotection: [Function],
      updateStatusCheckProtection: [Function],
      updateWebhook: [Function],
      updateWebhookConfigForRepo: [Function],
      uploadReleaseAsset: [Function]
    },
    search: {
      code: [Function],
      commits: [Function],
      issuesAndPullRequests: [Function],
      labels: [Function],
      repos: [Function],
      topics: [Function],
      users: [Function]
    },
    secretScanning: {
      getAlert: [Function],
      listAlertsForEnterprise: [Function],
      listAlertsForOrg: [Function],
      listAlertsForRepo: [Function],
      listLocationsForAlert: [Function],
      updateAlert: [Function]
    },
    teams: {
      addOrUpdateMembershipForUserInOrg: [Function],
      addOrUpdateProjectPermissionsInOrg: [Function],
      addOrUpdateRepoPermissionsInOrg: [Function],
      checkPermissionsForProjectInOrg: [Function],
      checkPermissionsForRepoInOrg: [Function],
      create: [Function],
      createDiscussionCommentInOrg: [Function],
      createDiscussionInOrg: [Function],
      deleteDiscussionCommentInOrg: [Function],
      deleteDiscussionInOrg: [Function],
      deleteInOrg: [Function],
      getByName: [Function],
      getDiscussionCommentInOrg: [Function],
      getDiscussionInOrg: [Function],
      getMembershipForUserInOrg: [Function],
      list: [Function],
      listChildInOrg: [Function],
      listDiscussionCommentsInOrg: [Function],
      listDiscussionsInOrg: [Function],
      listForAuthenticatedUser: [Function],
      listMembersInOrg: [Function],
      listPendingInvitationsInOrg: [Function],
      listProjectsInOrg: [Function],
      listReposInOrg: [Function],
      removeMembershipForUserInOrg: [Function],
      removeProjectInOrg: [Function],
      removeRepoInOrg: [Function],
      updateDiscussionCommentInOrg: [Function],
      updateDiscussionInOrg: [Function],
      updateInOrg: [Function]
    },
    users: {
      addEmailForAuthenticated: [Function],
      addEmailForAuthenticatedUser: [Function],
      block: [Function],
      checkBlocked: [Function],
      checkFollowingForUser: [Function],
      checkPersonIsFollowedByAuthenticated: [Function],
      createGpgKeyForAuthenticated: [Function],
      createGpgKeyForAuthenticatedUser: [Function],
      createPublicSshKeyForAuthenticated: [Function],
      createPublicSshKeyForAuthenticatedUser: [Function],
      createSshSigningKeyForAuthenticatedUser: [Function],
      deleteEmailForAuthenticated: [Function],
      deleteEmailForAuthenticatedUser: [Function],
      deleteGpgKeyForAuthenticated: [Function],
      deleteGpgKeyForAuthenticatedUser: [Function],
      deletePublicSshKeyForAuthenticated: [Function],
      deletePublicSshKeyForAuthenticatedUser: [Function],
      deleteSshSigningKeyForAuthenticatedUser: [Function],
      follow: [Function],
      getAuthenticated: [Function],
      getByUsername: [Function],
      getContextForUser: [Function],
      getGpgKeyForAuthenticated: [Function],
      getGpgKeyForAuthenticatedUser: [Function],
      getPublicSshKeyForAuthenticated: [Function],
      getPublicSshKeyForAuthenticatedUser: [Function],
      getSshSigningKeyForAuthenticatedUser: [Function],
      list: [Function],
      listBlockedByAuthenticated: [Function],
      listBlockedByAuthenticatedUser: [Function],
      listEmailsForAuthenticated: [Function],
      listEmailsForAuthenticatedUser: [Function],
      listFollowedByAuthenticated: [Function],
      listFollowedByAuthenticatedUser: [Function],
      listFollowersForAuthenticatedUser: [Function],
      listFollowersForUser: [Function],
      listFollowingForUser: [Function],
      listGpgKeysForAuthenticated: [Function],
      listGpgKeysForAuthenticatedUser: [Function],
      listGpgKeysForUser: [Function],
      listPublicEmailsForAuthenticated: [Function],
      listPublicEmailsForAuthenticatedUser: [Function],
      listPublicKeysForUser: [Function],
      listPublicSshKeysForAuthenticated: [Function],
      listPublicSshKeysForAuthenticatedUser: [Function],
      listSshSigningKeysForAuthenticatedUser: [Function],
      listSshSigningKeysForUser: [Function],
      setPrimaryEmailVisibilityForAuthenticated: [Function],
      setPrimaryEmailVisibilityForAuthenticatedUser: [Function],
      unblock: [Function],
      unfollow: [Function],
      updateAuthenticated: [Function]
    },
    rest: {
      actions: [Object],
      activity: [Object],
      apps: [Object],
      billing: [Object],
      checks: [Object],
      codeScanning: [Object],
      codesOfConduct: [Object],
      codespaces: [Object],
      dependabot: [Object],
      dependencyGraph: [Object],
      emojis: [Object],
      enterpriseAdmin: [Object],
      gists: [Object],
      git: [Object],
      gitignore: [Object],
      interactions: [Object],
      issues: [Object],
      licenses: [Object],
      markdown: [Object],
      meta: [Object],
      migrations: [Object],
      orgs: [Object],
      packages: [Object],
      projects: [Object],
      pulls: [Object],
      rateLimit: [Object],
      reactions: [Object],
      repos: [Object],
      search: [Object],
      secretScanning: [Object],
      teams: [Object],
      users: [Object]
    },
    paginate: [Function: bound paginate] { iterator: [Function: bound iterator] }
  },
  request: [Function: newApi] {
    endpoint: [Function: bound endpointWithDefaults] {
      DEFAULTS: [Object],
      defaults: [Function: bound withDefaults],
      merge: [Function: bound merge],
      parse: [Function: parse]
    },
    defaults: [Function: bound withDefaults]
  },
  graphql: [Function: newApi] {
    defaults: [Function: bound withDefaults],
    endpoint: [Function: bound endpointWithDefaults] {
      DEFAULTS: [Object],
      defaults: [Function: bound withDefaults],
      merge: [Function: bound merge],
      parse: [Function: parse]
    }
  },
  fileCache: RepositoryFileCache {
    octokit: OctokitWithDefaults {
      request: [Function],
      graphql: [Function],
      log: [Object],
      hook: [Function],
      auth: [AsyncFunction],
      actions: [Object],
      activity: [Object],
      apps: [Object],
      billing: [Object],
      checks: [Object],
      codeScanning: [Object],
      codesOfConduct: [Object],
      codespaces: [Object],
      dependabot: [Object],
      dependencyGraph: [Object],
      emojis: [Object],
      enterpriseAdmin: [Object],
      gists: [Object],
      git: [Object],
      gitignore: [Object],
      interactions: [Object],
      issues: [Object],
      licenses: [Object],
      markdown: [Object],
      meta: [Object],
      migrations: [Object],
      orgs: [Object],
      packages: [Object],
      projects: [Object],
      pulls: [Object],
      rateLimit: [Object],
      reactions: [Object],
      repos: [Object],
      search: [Object],
      secretScanning: [Object],
      teams: [Object],
      users: [Object],
      rest: [Object],
      paginate: [Function]
    },
    repository: {
      owner: 'Codertocat',
      repo: 'Hello-World',
      defaultBranch: 'master'
    },
    cache: Map(0) {}
  },
  logger: GCFLogger {
    destination: SonicBoom {
      _bufs: [],
      _len: 0,
      fd: 1,
      _writing: false,
      _writingBuf: '',
      _ending: false,
      _reopening: false,
      _asyncDrainScheduled: true,
      _hwm: 16387,
      file: null,
      destroyed: false,
      minLength: 0,
      maxLength: 0,
      maxWrite: 16384,
      sync: true,
      _fsync: false,
      append: true,
      mode: undefined,
      retryEAGAIN: [Function (anonymous)],
      mkdir: false,
      release: [Function (anonymous)],
      _events: [Object: null prototype],
      _eventsCount: 2
    },
    pino: EventEmitter {
      levels: [Object],
      silent: [Function: noop],
      onChild: [Function: noop],
      trace: [Function: LOG],
      debug: [Function: LOG],
      info: [Function: LOG],
      warn: [Function: LOG],
      error: [Function: LOG],
      fatal: [Function (anonymous)],
      metric: [Function: LOG],
      [Symbol(pino.useOnlyCustomLevels)]: false,
      [Symbol(pino.stream)]: [SonicBoom],
      [Symbol(pino.time)]: [Function: nullTime],
      [Symbol(pino.timeSliceIndex)]: 0,
      [Symbol(pino.stringify)]: [Function: stringify],
      [Symbol(pino.stringifySafe)]: [Function: stringify],
      [Symbol(pino.stringifiers)]: {},
      [Symbol(pino.end)]: '}\n',
      [Symbol(pino.formatOpts)]: [Object],
      [Symbol(pino.messageKey)]: 'message',
      [Symbol(pino.errorKey)]: 'err',
      [Symbol(pino.nestedKey)]: null,
      [Symbol(pino.nestedKeyStr)]: '',
      [Symbol(pino.serializers)]: [Object],
      [Symbol(pino.mixin)]: undefined,
      [Symbol(pino.mixinMergeStrategy)]: undefined,
      [Symbol(pino.chindings)]: '',
      [Symbol(pino.formatters)]: [Object],
      [Symbol(pino.hooks)]: [Object],
      [Symbol(pino.lsCache)]: [Object],
      [Symbol(pino.levelVal)]: 10
    },
    trace: [Function: bound trace],
    debug: [Function: bound debug],
    info: [Function: bound info],
    warn: [Function: bound warn],
    metric: [Function: bound metric],
    error: [Function: bound error],
    child: [Function: bound child]
  }
} instanceOf(GitHub)
'"master"'
{
  releaseType: 'java-yoshi',
  versioning: undefined,
  bumpMinorPreMajor: undefined,
  bumpPatchForMinorPreMajor: undefined,
  draft: undefined,
  draftPullRequest: undefined,
  packageName: undefined,
  includeComponentInTag: false,
  pullRequestTitlePattern: undefined,
  changelogHost: undefined,
  changelogPath: undefined,
  changelogType: undefined,
  versionFile: undefined,
  extraFiles: undefined,
  initialVersion: undefined
} has("releaseType", java-yoshi)
{
  manifestPath: undefined,
  labels: [ 'foo', 'bar' ],
  releaseLabels: undefined,
  plugins: [],
  logger: GCFLogger {
    destination: SonicBoom {
      _bufs: [],
      _len: 0,
      fd: 1,
      _writing: false,
      _writingBuf: '',
      _ending: false,
      _reopening: false,
      _asyncDrainScheduled: true,
      _hwm: 16387,
      file: null,
      destroyed: false,
      minLength: 0,
      maxLength: 0,
      maxWrite: 16384,
      sync: true,
      _fsync: false,
      append: true,
      mode: undefined,
      retryEAGAIN: [Function (anonymous)],
      mkdir: false,
      release: [Function (anonymous)],
      _events: [Object: null prototype],
      _eventsCount: 2
    },
    pino: EventEmitter {
      levels: [Object],
      silent: [Function: noop],
      onChild: [Function: noop],
      trace: [Function: LOG],
      debug: [Function: LOG],
      info: [Function: LOG],
      warn: [Function: LOG],
      error: [Function: LOG],
      fatal: [Function (anonymous)],
      metric: [Function: LOG],
      [Symbol(pino.useOnlyCustomLevels)]: false,
      [Symbol(pino.stream)]: [SonicBoom],
      [Symbol(pino.time)]: [Function: nullTime],
      [Symbol(pino.timeSliceIndex)]: 0,
      [Symbol(pino.stringify)]: [Function: stringify],
      [Symbol(pino.stringifySafe)]: [Function: stringify],
      [Symbol(pino.stringifiers)]: {},
      [Symbol(pino.end)]: '}\n',
      [Symbol(pino.formatOpts)]: [Object],
      [Symbol(pino.messageKey)]: 'message',
      [Symbol(pino.errorKey)]: 'err',
      [Symbol(pino.nestedKey)]: null,
      [Symbol(pino.nestedKeyStr)]: '',
      [Symbol(pino.serializers)]: [Object],
      [Symbol(pino.mixin)]: undefined,
      [Symbol(pino.mixinMergeStrategy)]: undefined,
      [Symbol(pino.chindings)]: '',
      [Symbol(pino.formatters)]: [Object],
      [Symbol(pino.hooks)]: [Object],
      [Symbol(pino.lsCache)]: [Object],
      [Symbol(pino.levelVal)]: 10
    },
    trace: [Function: bound trace],
    debug: [Function: bound debug],
    info: [Function: bound info],
    warn: [Function: bound warn],
    metric: [Function: bound metric],
    error: [Function: bound error],
    child: [Function: bound child]
  }
} any
undefined
Call 2:
GitHub {
  getCommitFiles: [AsyncFunction (anonymous)],
  graphqlRequest: [AsyncFunction (anonymous)],
  findFilesByFilenameAndRef: [AsyncFunction (anonymous)],
  findFilesByGlobAndRef: [AsyncFunction (anonymous)],
  createPullRequest: [AsyncFunction (anonymous)],
  getPullRequest: [AsyncFunction (anonymous)],
  updatePullRequest: [AsyncFunction (anonymous)],
  findFilesByExtensionAndRef: [AsyncFunction (anonymous)],
  createRelease: [AsyncFunction (anonymous)],
  commentOnIssue: [AsyncFunction (anonymous)],
  removeIssueLabels: [AsyncFunction (anonymous)],
  addIssueLabels: [AsyncFunction (anonymous)],
  repository: { owner: 'Codertocat', repo: 'Hello-World', defaultBranch: 'master' },
  octokit: OctokitWithDefaults {
    request: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    graphql: [Function: newApi] {
      defaults: [Function: bound withDefaults],
      endpoint: [Function]
    },
    log: {
      debug: [Function: debug],
      info: [Function: info],
      warn: [Function: bound warn],
      error: [Function: bound error]
    },
    hook: [Function: bound register] {
      api: [Object],
      remove: [Function: bound removeHook],
      before: [Function: bound addHook],
      error: [Function: bound addHook],
      after: [Function: bound addHook],
      wrap: [Function: bound addHook]
    },
    auth: [Function: bound auth] AsyncFunction {
      hook: [Function: bound hook] AsyncFunction
    },
    actions: {
      addCustomLabelsToSelfHostedRunnerForOrg: [Function],
      addCustomLabelsToSelfHostedRunnerForRepo: [Function],
      addSelectedRepoToOrgSecret: [Function],
      approveWorkflowRun: [Function],
      cancelWorkflowRun: [Function],
      createOrUpdateEnvironmentSecret: [Function],
      createOrUpdateOrgSecret: [Function],
      createOrUpdateRepoSecret: [Function],
      createRegistrationTokenForOrg: [Function],
      createRegistrationTokenForRepo: [Function],
      createRemoveTokenForOrg: [Function],
      createRemoveTokenForRepo: [Function],
      createWorkflowDispatch: [Function],
      deleteActionsCacheById: [Function],
      deleteActionsCacheByKey: [Function],
      deleteArtifact: [Function],
      deleteEnvironmentSecret: [Function],
      deleteOrgSecret: [Function],
      deleteRepoSecret: [Function],
      deleteSelfHostedRunnerFromOrg: [Function],
      deleteSelfHostedRunnerFromRepo: [Function],
      deleteWorkflowRun: [Function],
      deleteWorkflowRunLogs: [Function],
      disableSelectedRepositoryGithubActionsOrganization: [Function],
      disableWorkflow: [Function],
      downloadArtifact: [Function],
      downloadJobLogsForWorkflowRun: [Function],
      downloadWorkflowRunAttemptLogs: [Function],
      downloadWorkflowRunLogs: [Function],
      enableSelectedRepositoryGithubActionsOrganization: [Function],
      enableWorkflow: [Function],
      getActionsCacheList: [Function],
      getActionsCacheUsage: [Function],
      getActionsCacheUsageByRepoForOrg: [Function],
      getActionsCacheUsageForEnterprise: [Function],
      getActionsCacheUsageForOrg: [Function],
      getAllowedActionsOrganization: [Function],
      getAllowedActionsRepository: [Function],
      getArtifact: [Function],
      getEnvironmentPublicKey: [Function],
      getEnvironmentSecret: [Function],
      getGithubActionsDefaultWorkflowPermissionsEnterprise: [Function],
      getGithubActionsDefaultWorkflowPermissionsOrganization: [Function],
      getGithubActionsDefaultWorkflowPermissionsRepository: [Function],
      getGithubActionsPermissionsOrganization: [Function],
      getGithubActionsPermissionsRepository: [Function],
      getJobForWorkflowRun: [Function],
      getOrgPublicKey: [Function],
      getOrgSecret: [Function],
      getPendingDeploymentsForRun: [Function],
      getRepoPermissions: [Function],
      getRepoPublicKey: [Function],
      getRepoSecret: [Function],
      getReviewsForRun: [Function],
      getSelfHostedRunnerForOrg: [Function],
      getSelfHostedRunnerForRepo: [Function],
      getWorkflow: [Function],
      getWorkflowAccessToRepository: [Function],
      getWorkflowRun: [Function],
      getWorkflowRunAttempt: [Function],
      getWorkflowRunUsage: [Function],
      getWorkflowUsage: [Function],
      listArtifactsForRepo: [Function],
      listEnvironmentSecrets: [Function],
      listJobsForWorkflowRun: [Function],
      listJobsForWorkflowRunAttempt: [Function],
      listLabelsForSelfHostedRunnerForOrg: [Function],
      listLabelsForSelfHostedRunnerForRepo: [Function],
      listOrgSecrets: [Function],
      listRepoSecrets: [Function],
      listRepoWorkflows: [Function],
      listRunnerApplicationsForOrg: [Function],
      listRunnerApplicationsForRepo: [Function],
      listSelectedReposForOrgSecret: [Function],
      listSelectedRepositoriesEnabledGithubActionsOrganization: [Function],
      listSelfHostedRunnersForOrg: [Function],
      listSelfHostedRunnersForRepo: [Function],
      listWorkflowRunArtifacts: [Function],
      listWorkflowRuns: [Function],
      listWorkflowRunsForRepo: [Function],
      reRunJobForWorkflowRun: [Function],
      reRunWorkflow: [Function],
      reRunWorkflowFailedJobs: [Function],
      removeAllCustomLabelsFromSelfHostedRunnerForOrg: [Function],
      removeAllCustomLabelsFromSelfHostedRunnerForRepo: [Function],
      removeCustomLabelFromSelfHostedRunnerForOrg: [Function],
      removeCustomLabelFromSelfHostedRunnerForRepo: [Function],
      removeSelectedRepoFromOrgSecret: [Function],
      reviewPendingDeploymentsForRun: [Function],
      setAllowedActionsOrganization: [Function],
      setAllowedActionsRepository: [Function],
      setCustomLabelsForSelfHostedRunnerForOrg: [Function],
      setCustomLabelsForSelfHostedRunnerForRepo: [Function],
      setGithubActionsDefaultWorkflowPermissionsEnterprise: [Function],
      setGithubActionsDefaultWorkflowPermissionsOrganization: [Function],
      setGithubActionsDefaultWorkflowPermissionsRepository: [Function],
      setGithubActionsPermissionsOrganization: [Function],
      setGithubActionsPermissionsRepository: [Function],
      setSelectedReposForOrgSecret: [Function],
      setSelectedRepositoriesEnabledGithubActionsOrganization: [Function],
      setWorkflowAccessToRepository: [Function]
    },
    activity: {
      checkRepoIsStarredByAuthenticatedUser: [Function],
      deleteRepoSubscription: [Function],
      deleteThreadSubscription: [Function],
      getFeeds: [Function],
      getRepoSubscription: [Function],
      getThread: [Function],
      getThreadSubscriptionForAuthenticatedUser: [Function],
      listEventsForAuthenticatedUser: [Function],
      listNotificationsForAuthenticatedUser: [Function],
      listOrgEventsForAuthenticatedUser: [Function],
      listPublicEvents: [Function],
      listPublicEventsForRepoNetwork: [Function],
      listPublicEventsForUser: [Function],
      listPublicOrgEvents: [Function],
      listReceivedEventsForUser: [Function],
      listReceivedPublicEventsForUser: [Function],
      listRepoEvents: [Function],
      listRepoNotificationsForAuthenticatedUser: [Function],
      listReposStarredByAuthenticatedUser: [Function],
      listReposStarredByUser: [Function],
      listReposWatchedByUser: [Function],
      listStargazersForRepo: [Function],
      listWatchedReposForAuthenticatedUser: [Function],
      listWatchersForRepo: [Function],
      markNotificationsAsRead: [Function],
      markRepoNotificationsAsRead: [Function],
      markThreadAsRead: [Function],
      setRepoSubscription: [Function],
      setThreadSubscription: [Function],
      starRepoForAuthenticatedUser: [Function],
      unstarRepoForAuthenticatedUser: [Function]
    },
    apps: {
      addRepoToInstallation: [Function],
      addRepoToInstallationForAuthenticatedUser: [Function],
      checkToken: [Function],
      createFromManifest: [Function],
      createInstallationAccessToken: [Function],
      deleteAuthorization: [Function],
      deleteInstallation: [Function],
      deleteToken: [Function],
      getAuthenticated: [Function],
      getBySlug: [Function],
      getInstallation: [Function],
      getOrgInstallation: [Function],
      getRepoInstallation: [Function],
      getSubscriptionPlanForAccount: [Function],
      getSubscriptionPlanForAccountStubbed: [Function],
      getUserInstallation: [Function],
      getWebhookConfigForApp: [Function],
      getWebhookDelivery: [Function],
      listAccountsForPlan: [Function],
      listAccountsForPlanStubbed: [Function],
      listInstallationReposForAuthenticatedUser: [Function],
      listInstallations: [Function],
      listInstallationsForAuthenticatedUser: [Function],
      listPlans: [Function],
      listPlansStubbed: [Function],
      listReposAccessibleToInstallation: [Function],
      listSubscriptionsForAuthenticatedUser: [Function],
      listSubscriptionsForAuthenticatedUserStubbed: [Function],
      listWebhookDeliveries: [Function],
      redeliverWebhookDelivery: [Function],
      removeRepoFromInstallation: [Function],
      removeRepoFromInstallationForAuthenticatedUser: [Function],
      resetToken: [Function],
      revokeInstallationAccessToken: [Function],
      scopeToken: [Function],
      suspendInstallation: [Function],
      unsuspendInstallation: [Function],
      updateWebhookConfigForApp: [Function]
    },
    billing: {
      getGithubActionsBillingOrg: [Function],
      getGithubActionsBillingUser: [Function],
      getGithubAdvancedSecurityBillingGhe: [Function],
      getGithubAdvancedSecurityBillingOrg: [Function],
      getGithubPackagesBillingOrg: [Function],
      getGithubPackagesBillingUser: [Function],
      getSharedStorageBillingOrg: [Function],
      getSharedStorageBillingUser: [Function]
    },
    checks: {
      create: [Function],
      createSuite: [Function],
      get: [Function],
      getSuite: [Function],
      listAnnotations: [Function],
      listForRef: [Function],
      listForSuite: [Function],
      listSuitesForRef: [Function],
      rerequestRun: [Function],
      rerequestSuite: [Function],
      setSuitesPreferences: [Function],
      update: [Function]
    },
    codeScanning: {
      deleteAnalysis: [Function],
      getAlert: [Function],
      getAnalysis: [Function],
      getCodeqlDatabase: [Function],
      getSarif: [Function],
      listAlertInstances: [Function],
      listAlertsForEnterprise: [Function],
      listAlertsForOrg: [Function],
      listAlertsForRepo: [Function],
      listAlertsInstances: [Function],
      listCodeqlDatabases: [Function],
      listRecentAnalyses: [Function],
      updateAlert: [Function],
      uploadSarif: [Function]
    },
    codesOfConduct: { getAllCodesOfConduct: [Function], getConductCode: [Function] },
    codespaces: {
      addRepositoryForSecretForAuthenticatedUser: [Function],
      addSelectedRepoToOrgSecret: [Function],
      codespaceMachinesForAuthenticatedUser: [Function],
      createForAuthenticatedUser: [Function],
      createOrUpdateOrgSecret: [Function],
      createOrUpdateRepoSecret: [Function],
      createOrUpdateSecretForAuthenticatedUser: [Function],
      createWithPrForAuthenticatedUser: [Function],
      createWithRepoForAuthenticatedUser: [Function],
      deleteForAuthenticatedUser: [Function],
      deleteFromOrganization: [Function],
      deleteOrgSecret: [Function],
      deleteRepoSecret: [Function],
      deleteSecretForAuthenticatedUser: [Function],
      exportForAuthenticatedUser: [Function],
      getExportDetailsForAuthenticatedUser: [Function],
      getForAuthenticatedUser: [Function],
      getOrgPublicKey: [Function],
      getOrgSecret: [Function],
      getPublicKeyForAuthenticatedUser: [Function],
      getRepoPublicKey: [Function],
      getRepoSecret: [Function],
      getSecretForAuthenticatedUser: [Function],
      listDevcontainersInRepositoryForAuthenticatedUser: [Function],
      listForAuthenticatedUser: [Function],
      listInOrganization: [Function],
      listInRepositoryForAuthenticatedUser: [Function],
      listOrgSecrets: [Function],
      listRepoSecrets: [Function],
      listRepositoriesForSecretForAuthenticatedUser: [Function],
      listSecretsForAuthenticatedUser: [Function],
      listSelectedReposForOrgSecret: [Function],
      preFlightWithRepoForAuthenticatedUser: [Function],
      removeRepositoryForSecretForAuthenticatedUser: [Function],
      removeSelectedRepoFromOrgSecret: [Function],
      repoMachinesForAuthenticatedUser: [Function],
      setRepositoriesForSecretForAuthenticatedUser: [Function],
      setSelectedReposForOrgSecret: [Function],
      startForAuthenticatedUser: [Function],
      stopForAuthenticatedUser: [Function],
      stopInOrganization: [Function],
      updateForAuthenticatedUser: [Function]
    },
    dependabot: {
      addSelectedRepoToOrgSecret: [Function],
      createOrUpdateOrgSecret: [Function],
      createOrUpdateRepoSecret: [Function],
      deleteOrgSecret: [Function],
      deleteRepoSecret: [Function],
      getAlert: [Function],
      getOrgPublicKey: [Function],
      getOrgSecret: [Function],
      getRepoPublicKey: [Function],
      getRepoSecret: [Function],
      listAlertsForRepo: [Function],
      listOrgSecrets: [Function],
      listRepoSecrets: [Function],
      listSelectedReposForOrgSecret: [Function],
      removeSelectedRepoFromOrgSecret: [Function],
      setSelectedReposForOrgSecret: [Function],
      updateAlert: [Function]
    },
    dependencyGraph: { createRepositorySnapshot: [Function], diffRange: [Function] },
    emojis: { get: [Function] },
    enterpriseAdmin: {
      addCustomLabelsToSelfHostedRunnerForEnterprise: [Function],
      disableSelectedOrganizationGithubActionsEnterprise: [Function],
      enableSelectedOrganizationGithubActionsEnterprise: [Function],
      getAllowedActionsEnterprise: [Function],
      getGithubActionsPermissionsEnterprise: [Function],
      getServerStatistics: [Function],
      listLabelsForSelfHostedRunnerForEnterprise: [Function],
      listSelectedOrganizationsEnabledGithubActionsEnterprise: [Function],
      removeAllCustomLabelsFromSelfHostedRunnerForEnterprise: [Function],
      removeCustomLabelFromSelfHostedRunnerForEnterprise: [Function],
      setAllowedActionsEnterprise: [Function],
      setCustomLabelsForSelfHostedRunnerForEnterprise: [Function],
      setGithubActionsPermissionsEnterprise: [Function],
      setSelectedOrganizationsEnabledGithubActionsEnterprise: [Function]
    },
    gists: {
      checkIsStarred: [Function],
      create: [Function],
      createComment: [Function],
      delete: [Function],
      deleteComment: [Function],
      fork: [Function],
      get: [Function],
      getComment: [Function],
      getRevision: [Function],
      list: [Function],
      listComments: [Function],
      listCommits: [Function],
      listForUser: [Function],
      listForks: [Function],
      listPublic: [Function],
      listStarred: [Function],
      star: [Function],
      unstar: [Function],
      update: [Function],
      updateComment: [Function]
    },
    git: {
      createBlob: [Function],
      createCommit: [Function],
      createRef: [Function],
      createTag: [Function],
      createTree: [Function],
      deleteRef: [Function],
      getBlob: [Function],
      getCommit: [Function],
      getRef: [Function],
      getTag: [Function],
      getTree: [Function],
      listMatchingRefs: [Function],
      updateRef: [Function]
    },
    gitignore: { getAllTemplates: [Function], getTemplate: [Function] },
    interactions: {
      getRestrictionsForAuthenticatedUser: [Function],
      getRestrictionsForOrg: [Function],
      getRestrictionsForRepo: [Function],
      getRestrictionsForYourPublicRepos: [Function],
      removeRestrictionsForAuthenticatedUser: [Function],
      removeRestrictionsForOrg: [Function],
      removeRestrictionsForRepo: [Function],
      removeRestrictionsForYourPublicRepos: [Function],
      setRestrictionsForAuthenticatedUser: [Function],
      setRestrictionsForOrg: [Function],
      setRestrictionsForRepo: [Function],
      setRestrictionsForYourPublicRepos: [Function]
    },
    issues: {
      addAssignees: [Function],
      addLabels: [Function],
      checkUserCanBeAssigned: [Function],
      create: [Function],
      createComment: [Function],
      createLabel: [Function],
      createMilestone: [Function],
      deleteComment: [Function],
      deleteLabel: [Function],
      deleteMilestone: [Function],
      get: [Function],
      getComment: [Function],
      getEvent: [Function],
      getLabel: [Function],
      getMilestone: [Function],
      list: [Function],
      listAssignees: [Function],
      listComments: [Function],
      listCommentsForRepo: [Function],
      listEvents: [Function],
      listEventsForRepo: [Function],
      listEventsForTimeline: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listForRepo: [Function],
      listLabelsForMilestone: [Function],
      listLabelsForRepo: [Function],
      listLabelsOnIssue: [Function],
      listMilestones: [Function],
      lock: [Function],
      removeAllLabels: [Function],
      removeAssignees: [Function],
      removeLabel: [Function],
      setLabels: [Function],
      unlock: [Function],
      update: [Function],
      updateComment: [Function],
      updateLabel: [Function],
      updateMilestone: [Function]
    },
    licenses: {
      get: [Function],
      getAllCommonlyUsed: [Function],
      getForRepo: [Function]
    },
    markdown: { render: [Function], renderRaw: [Function] },
    meta: {
      get: [Function],
      getOctocat: [Function],
      getZen: [Function],
      root: [Function]
    },
    migrations: {
      cancelImport: [Function],
      deleteArchiveForAuthenticatedUser: [Function],
      deleteArchiveForOrg: [Function],
      downloadArchiveForOrg: [Function],
      getArchiveForAuthenticatedUser: [Function],
      getCommitAuthors: [Function],
      getImportStatus: [Function],
      getLargeFiles: [Function],
      getStatusForAuthenticatedUser: [Function],
      getStatusForOrg: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listReposForAuthenticatedUser: [Function],
      listReposForOrg: [Function],
      listReposForUser: [Function],
      mapCommitAuthor: [Function],
      setLfsPreference: [Function],
      startForAuthenticatedUser: [Function],
      startForOrg: [Function],
      startImport: [Function],
      unlockRepoForAuthenticatedUser: [Function],
      unlockRepoForOrg: [Function],
      updateImport: [Function]
    },
    orgs: {
      addSecurityManagerTeam: [Function],
      blockUser: [Function],
      cancelInvitation: [Function],
      checkBlockedUser: [Function],
      checkMembershipForUser: [Function],
      checkPublicMembershipForUser: [Function],
      convertMemberToOutsideCollaborator: [Function],
      createCustomRole: [Function],
      createInvitation: [Function],
      createWebhook: [Function],
      deleteCustomRole: [Function],
      deleteWebhook: [Function],
      enableOrDisableSecurityProductOnAllOrgRepos: [Function],
      get: [Function],
      getMembershipForAuthenticatedUser: [Function],
      getMembershipForUser: [Function],
      getWebhook: [Function],
      getWebhookConfigForOrg: [Function],
      getWebhookDelivery: [Function],
      list: [Function],
      listAppInstallations: [Function],
      listBlockedUsers: [Function],
      listCustomRoles: [Function],
      listFailedInvitations: [Function],
      listFineGrainedPermissions: [Function],
      listForAuthenticatedUser: [Function],
      listForUser: [Function],
      listInvitationTeams: [Function],
      listMembers: [Function],
      listMembershipsForAuthenticatedUser: [Function],
      listOutsideCollaborators: [Function],
      listPendingInvitations: [Function],
      listPublicMembers: [Function],
      listSecurityManagerTeams: [Function],
      listWebhookDeliveries: [Function],
      listWebhooks: [Function],
      pingWebhook: [Function],
      redeliverWebhookDelivery: [Function],
      removeMember: [Function],
      removeMembershipForUser: [Function],
      removeOutsideCollaborator: [Function],
      removePublicMembershipForAuthenticatedUser: [Function],
      removeSecurityManagerTeam: [Function],
      setMembershipForUser: [Function],
      setPublicMembershipForAuthenticatedUser: [Function],
      unblockUser: [Function],
      update: [Function],
      updateCustomRole: [Function],
      updateMembershipForAuthenticatedUser: [Function],
      updateWebhook: [Function],
      updateWebhookConfigForOrg: [Function]
    },
    packages: {
      deletePackageForAuthenticatedUser: [Function],
      deletePackageForOrg: [Function],
      deletePackageForUser: [Function],
      deletePackageVersionForAuthenticatedUser: [Function],
      deletePackageVersionForOrg: [Function],
      deletePackageVersionForUser: [Function],
      getAllPackageVersionsForAPackageOwnedByAnOrg: [Function],
      getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [Function],
      getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [Function],
      getAllPackageVersionsForPackageOwnedByOrg: [Function],
      getAllPackageVersionsForPackageOwnedByUser: [Function],
      getPackageForAuthenticatedUser: [Function],
      getPackageForOrganization: [Function],
      getPackageForUser: [Function],
      getPackageVersionForAuthenticatedUser: [Function],
      getPackageVersionForOrganization: [Function],
      getPackageVersionForUser: [Function],
      listPackagesForAuthenticatedUser: [Function],
      listPackagesForOrganization: [Function],
      listPackagesForUser: [Function],
      restorePackageForAuthenticatedUser: [Function],
      restorePackageForOrg: [Function],
      restorePackageForUser: [Function],
      restorePackageVersionForAuthenticatedUser: [Function],
      restorePackageVersionForOrg: [Function],
      restorePackageVersionForUser: [Function]
    },
    projects: {
      addCollaborator: [Function],
      createCard: [Function],
      createColumn: [Function],
      createForAuthenticatedUser: [Function],
      createForOrg: [Function],
      createForRepo: [Function],
      delete: [Function],
      deleteCard: [Function],
      deleteColumn: [Function],
      get: [Function],
      getCard: [Function],
      getColumn: [Function],
      getPermissionForUser: [Function],
      listCards: [Function],
      listCollaborators: [Function],
      listColumns: [Function],
      listForOrg: [Function],
      listForRepo: [Function],
      listForUser: [Function],
      moveCard: [Function],
      moveColumn: [Function],
      removeCollaborator: [Function],
      update: [Function],
      updateCard: [Function],
      updateColumn: [Function]
    },
    pulls: {
      checkIfMerged: [Function],
      create: [Function],
      createReplyForReviewComment: [Function],
      createReview: [Function],
      createReviewComment: [Function],
      deletePendingReview: [Function],
      deleteReviewComment: [Function],
      dismissReview: [Function],
      get: [Function],
      getReview: [Function],
      getReviewComment: [Function],
      list: [Function],
      listCommentsForReview: [Function],
      listCommits: [Function],
      listFiles: [Function],
      listRequestedReviewers: [Function],
      listReviewComments: [Function],
      listReviewCommentsForRepo: [Function],
      listReviews: [Function],
      merge: [Function],
      removeRequestedReviewers: [Function],
      requestReviewers: [Function],
      submitReview: [Function],
      update: [Function],
      updateBranch: [Function],
      updateReview: [Function],
      updateReviewComment: [Function]
    },
    rateLimit: { get: [Function] },
    reactions: {
      createForCommitComment: [Function],
      createForIssue: [Function],
      createForIssueComment: [Function],
      createForPullRequestReviewComment: [Function],
      createForRelease: [Function],
      createForTeamDiscussionCommentInOrg: [Function],
      createForTeamDiscussionInOrg: [Function],
      deleteForCommitComment: [Function],
      deleteForIssue: [Function],
      deleteForIssueComment: [Function],
      deleteForPullRequestComment: [Function],
      deleteForRelease: [Function],
      deleteForTeamDiscussion: [Function],
      deleteForTeamDiscussionComment: [Function],
      listForCommitComment: [Function],
      listForIssue: [Function],
      listForIssueComment: [Function],
      listForPullRequestReviewComment: [Function],
      listForRelease: [Function],
      listForTeamDiscussionCommentInOrg: [Function],
      listForTeamDiscussionInOrg: [Function]
    },
    repos: {
      acceptInvitation: [Function],
      acceptInvitationForAuthenticatedUser: [Function],
      addAppAccessRestrictions: [Function],
      addCollaborator: [Function],
      addStatusCheckContexts: [Function],
      addTeamAccessRestrictions: [Function],
      addUserAccessRestrictions: [Function],
      checkCollaborator: [Function],
      checkVulnerabilityAlerts: [Function],
      codeownersErrors: [Function],
      compareCommits: [Function],
      compareCommitsWithBasehead: [Function],
      createAutolink: [Function],
      createCommitComment: [Function],
      createCommitSignatureProtection: [Function],
      createCommitStatus: [Function],
      createDeployKey: [Function],
      createDeployment: [Function],
      createDeploymentBranchPolicy: [Function],
      createDeploymentStatus: [Function],
      createDispatchEvent: [Function],
      createForAuthenticatedUser: [Function],
      createFork: [Function],
      createInOrg: [Function],
      createOrUpdateEnvironment: [Function],
      createOrUpdateFileContents: [Function],
      createPagesDeployment: [Function],
      createPagesSite: [Function],
      createRelease: [Function],
      createTagProtection: [Function],
      createUsingTemplate: [Function],
      createWebhook: [Function],
      declineInvitation: [Function],
      declineInvitationForAuthenticatedUser: [Function],
      delete: [Function],
      deleteAccessRestrictions: [Function],
      deleteAdminBranchProtection: [Function],
      deleteAnEnvironment: [Function],
      deleteAutolink: [Function],
      deleteBranchProtection: [Function],
      deleteCommitComment: [Function],
      deleteCommitSignatureProtection: [Function],
      deleteDeployKey: [Function],
      deleteDeployment: [Function],
      deleteDeploymentBranchPolicy: [Function],
      deleteFile: [Function],
      deleteInvitation: [Function],
      deletePagesSite: [Function],
      deletePullRequestReviewProtection: [Function],
      deleteRelease: [Function],
      deleteReleaseAsset: [Function],
      deleteTagProtection: [Function],
      deleteWebhook: [Function],
      disableAutomatedSecurityFixes: [Function],
      disableLfsForRepo: [Function],
      disableVulnerabilityAlerts: [Function],
      downloadArchive: [Function],
      downloadTarballArchive: [Function],
      downloadZipballArchive: [Function],
      enableAutomatedSecurityFixes: [Function],
      enableLfsForRepo: [Function],
      enableVulnerabilityAlerts: [Function],
      generateReleaseNotes: [Function],
      get: [Function],
      getAccessRestrictions: [Function],
      getAdminBranchProtection: [Function],
      getAllEnvironments: [Function],
      getAllStatusCheckContexts: [Function],
      getAllTopics: [Function],
      getAppsWithAccessToProtectedBranch: [Function],
      getAutolink: [Function],
      getBranch: [Function],
      getBranchProtection: [Function],
      getClones: [Function],
      getCodeFrequencyStats: [Function],
      getCollaboratorPermissionLevel: [Function],
      getCombinedStatusForRef: [Function],
      getCommit: [Function],
      getCommitActivityStats: [Function],
      getCommitComment: [Function],
      getCommitSignatureProtection: [Function],
      getCommunityProfileMetrics: [Function],
      getContent: [Function],
      getContributorsStats: [Function],
      getDeployKey: [Function],
      getDeployment: [Function],
      getDeploymentBranchPolicy: [Function],
      getDeploymentStatus: [Function],
      getEnvironment: [Function],
      getLatestPagesBuild: [Function],
      getLatestRelease: [Function],
      getPages: [Function],
      getPagesBuild: [Function],
      getPagesHealthCheck: [Function],
      getParticipationStats: [Function],
      getPullRequestReviewProtection: [Function],
      getPunchCardStats: [Function],
      getReadme: [Function],
      getReadmeInDirectory: [Function],
      getRelease: [Function],
      getReleaseAsset: [Function],
      getReleaseByTag: [Function],
      getStatusChecksProtection: [Function],
      getTeamsWithAccessToProtectedBranch: [Function],
      getTopPaths: [Function],
      getTopReferrers: [Function],
      getUsersWithAccessToProtectedBranch: [Function],
      getViews: [Function],
      getWebhook: [Function],
      getWebhookConfigForRepo: [Function],
      getWebhookDelivery: [Function],
      listAutolinks: [Function],
      listBranches: [Function],
      listBranchesForHeadCommit: [Function],
      listCollaborators: [Function],
      listCommentsForCommit: [Function],
      listCommitCommentsForRepo: [Function],
      listCommitStatusesForRef: [Function],
      listCommits: [Function],
      listContributors: [Function],
      listDeployKeys: [Function],
      listDeploymentBranchPolicies: [Function],
      listDeploymentStatuses: [Function],
      listDeployments: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listForUser: [Function],
      listForks: [Function],
      listInvitations: [Function],
      listInvitationsForAuthenticatedUser: [Function],
      listLanguages: [Function],
      listPagesBuilds: [Function],
      listPublic: [Function],
      listPullRequestsAssociatedWithCommit: [Function],
      listReleaseAssets: [Function],
      listReleases: [Function],
      listTagProtection: [Function],
      listTags: [Function],
      listTeams: [Function],
      listWebhookDeliveries: [Function],
      listWebhooks: [Function],
      merge: [Function],
      mergeUpstream: [Function],
      pingWebhook: [Function],
      redeliverWebhookDelivery: [Function],
      removeAppAccessRestrictions: [Function],
      removeCollaborator: [Function],
      removeStatusCheckContexts: [Function],
      removeStatusCheckProtection: [Function],
      removeTeamAccessRestrictions: [Function],
      removeUserAccessRestrictions: [Function],
      renameBranch: [Function],
      replaceAllTopics: [Function],
      requestPagesBuild: [Function],
      setAdminBranchProtection: [Function],
      setAppAccessRestrictions: [Function],
      setStatusCheckContexts: [Function],
      setTeamAccessRestrictions: [Function],
      setUserAccessRestrictions: [Function],
      testPushWebhook: [Function],
      transfer: [Function],
      update: [Function],
      updateBranchProtection: [Function],
      updateCommitComment: [Function],
      updateDeploymentBranchPolicy: [Function],
      updateInformationAboutPagesSite: [Function],
      updateInvitation: [Function],
      updatePullRequestReviewProtection: [Function],
      updateRelease: [Function],
      updateReleaseAsset: [Function],
      updateStatusCheckPotection: [Function],
      updateStatusCheckProtection: [Function],
      updateWebhook: [Function],
      updateWebhookConfigForRepo: [Function],
      uploadReleaseAsset: [Function]
    },
    search: {
      code: [Function],
      commits: [Function],
      issuesAndPullRequests: [Function],
      labels: [Function],
      repos: [Function],
      topics: [Function],
      users: [Function]
    },
    secretScanning: {
      getAlert: [Function],
      listAlertsForEnterprise: [Function],
      listAlertsForOrg: [Function],
      listAlertsForRepo: [Function],
      listLocationsForAlert: [Function],
      updateAlert: [Function]
    },
    teams: {
      addOrUpdateMembershipForUserInOrg: [Function],
      addOrUpdateProjectPermissionsInOrg: [Function],
      addOrUpdateRepoPermissionsInOrg: [Function],
      checkPermissionsForProjectInOrg: [Function],
      checkPermissionsForRepoInOrg: [Function],
      create: [Function],
      createDiscussionCommentInOrg: [Function],
      createDiscussionInOrg: [Function],
      deleteDiscussionCommentInOrg: [Function],
      deleteDiscussionInOrg: [Function],
      deleteInOrg: [Function],
      getByName: [Function],
      getDiscussionCommentInOrg: [Function],
      getDiscussionInOrg: [Function],
      getMembershipForUserInOrg: [Function],
      list: [Function],
      listChildInOrg: [Function],
      listDiscussionCommentsInOrg: [Function],
      listDiscussionsInOrg: [Function],
      listForAuthenticatedUser: [Function],
      listMembersInOrg: [Function],
      listPendingInvitationsInOrg: [Function],
      listProjectsInOrg: [Function],
      listReposInOrg: [Function],
      removeMembershipForUserInOrg: [Function],
      removeProjectInOrg: [Function],
      removeRepoInOrg: [Function],
      updateDiscussionCommentInOrg: [Function],
      updateDiscussionInOrg: [Function],
      updateInOrg: [Function]
    },
    users: {
      addEmailForAuthenticated: [Function],
      addEmailForAuthenticatedUser: [Function],
      block: [Function],
      checkBlocked: [Function],
      checkFollowingForUser: [Function],
      checkPersonIsFollowedByAuthenticated: [Function],
      createGpgKeyForAuthenticated: [Function],
      createGpgKeyForAuthenticatedUser: [Function],
      createPublicSshKeyForAuthenticated: [Function],
      createPublicSshKeyForAuthenticatedUser: [Function],
      createSshSigningKeyForAuthenticatedUser: [Function],
      deleteEmailForAuthenticated: [Function],
      deleteEmailForAuthenticatedUser: [Function],
      deleteGpgKeyForAuthenticated: [Function],
      deleteGpgKeyForAuthenticatedUser: [Function],
      deletePublicSshKeyForAuthenticated: [Function],
      deletePublicSshKeyForAuthenticatedUser: [Function],
      deleteSshSigningKeyForAuthenticatedUser: [Function],
      follow: [Function],
      getAuthenticated: [Function],
      getByUsername: [Function],
      getContextForUser: [Function],
      getGpgKeyForAuthenticated: [Function],
      getGpgKeyForAuthenticatedUser: [Function],
      getPublicSshKeyForAuthenticated: [Function],
      getPublicSshKeyForAuthenticatedUser: [Function],
      getSshSigningKeyForAuthenticatedUser: [Function],
      list: [Function],
      listBlockedByAuthenticated: [Function],
      listBlockedByAuthenticatedUser: [Function],
      listEmailsForAuthenticated: [Function],
      listEmailsForAuthenticatedUser: [Function],
      listFollowedByAuthenticated: [Function],
      listFollowedByAuthenticatedUser: [Function],
      listFollowersForAuthenticatedUser: [Function],
      listFollowersForUser: [Function],
      listFollowingForUser: [Function],
      listGpgKeysForAuthenticated: [Function],
      listGpgKeysForAuthenticatedUser: [Function],
      listGpgKeysForUser: [Function],
      listPublicEmailsForAuthenticated: [Function],
      listPublicEmailsForAuthenticatedUser: [Function],
      listPublicKeysForUser: [Function],
      listPublicSshKeysForAuthenticated: [Function],
      listPublicSshKeysForAuthenticatedUser: [Function],
      listSshSigningKeysForAuthenticatedUser: [Function],
      listSshSigningKeysForUser: [Function],
      setPrimaryEmailVisibilityForAuthenticated: [Function],
      setPrimaryEmailVisibilityForAuthenticatedUser: [Function],
      unblock: [Function],
      unfollow: [Function],
      updateAuthenticated: [Function]
    },
    rest: {
      actions: [Object],
      activity: [Object],
      apps: [Object],
      billing: [Object],
      checks: [Object],
      codeScanning: [Object],
      codesOfConduct: [Object],
      codespaces: [Object],
      dependabot: [Object],
      dependencyGraph: [Object],
      emojis: [Object],
      enterpriseAdmin: [Object],
      gists: [Object],
      git: [Object],
      gitignore: [Object],
      interactions: [Object],
      issues: [Object],
      licenses: [Object],
      markdown: [Object],
      meta: [Object],
      migrations: [Object],
      orgs: [Object],
      packages: [Object],
      projects: [Object],
      pulls: [Object],
      rateLimit: [Object],
      reactions: [Object],
      repos: [Object],
      search: [Object],
      secretScanning: [Object],
      teams: [Object],
      users: [Object]
    },
    paginate: [Function: bound paginate] { iterator: [Function: bound iterator] }
  },
  request: [Function: newApi] {
    endpoint: [Function: bound endpointWithDefaults] {
      DEFAULTS: [Object],
      defaults: [Function: bound withDefaults],
      merge: [Function: bound merge],
      parse: [Function: parse]
    },
    defaults: [Function: bound withDefaults]
  },
  graphql: [Function: newApi] {
    defaults: [Function: bound withDefaults],
    endpoint: [Function: bound endpointWithDefaults] {
      DEFAULTS: [Object],
      defaults: [Function: bound withDefaults],
      merge: [Function: bound merge],
      parse: [Function: parse]
    }
  },
  fileCache: RepositoryFileCache {
    octokit: OctokitWithDefaults {
      request: [Function],
      graphql: [Function],
      log: [Object],
      hook: [Function],
      auth: [AsyncFunction],
      actions: [Object],
      activity: [Object],
      apps: [Object],
      billing: [Object],
      checks: [Object],
      codeScanning: [Object],
      codesOfConduct: [Object],
      codespaces: [Object],
      dependabot: [Object],
      dependencyGraph: [Object],
      emojis: [Object],
      enterpriseAdmin: [Object],
      gists: [Object],
      git: [Object],
      gitignore: [Object],
      interactions: [Object],
      issues: [Object],
      licenses: [Object],
      markdown: [Object],
      meta: [Object],
      migrations: [Object],
      orgs: [Object],
      packages: [Object],
      projects: [Object],
      pulls: [Object],
      rateLimit: [Object],
      reactions: [Object],
      repos: [Object],
      search: [Object],
      secretScanning: [Object],
      teams: [Object],
      users: [Object],
      rest: [Object],
      paginate: [Function]
    },
    repository: {
      owner: 'Codertocat',
      repo: 'Hello-World',
      defaultBranch: 'master'
    },
    cache: Map(0) {}
  },
  logger: GCFLogger {
    destination: SonicBoom {
      _bufs: [],
      _len: 0,
      fd: 1,
      _writing: false,
      _writingBuf: '',
      _ending: false,
      _reopening: false,
      _asyncDrainScheduled: true,
      _hwm: 16387,
      file: null,
      destroyed: false,
      minLength: 0,
      maxLength: 0,
      maxWrite: 16384,
      sync: true,
      _fsync: false,
      append: true,
      mode: undefined,
      retryEAGAIN: [Function (anonymous)],
      mkdir: false,
      release: [Function (anonymous)],
      _events: [Object: null prototype],
      _eventsCount: 2
    },
    pino: EventEmitter {
      levels: [Object],
      silent: [Function: noop],
      onChild: [Function: noop],
      trace: [Function: LOG],
      debug: [Function: LOG],
      info: [Function: LOG],
      warn: [Function: LOG],
      error: [Function: LOG],
      fatal: [Function (anonymous)],
      metric: [Function: LOG],
      [Symbol(pino.useOnlyCustomLevels)]: false,
      [Symbol(pino.stream)]: [SonicBoom],
      [Symbol(pino.time)]: [Function: nullTime],
      [Symbol(pino.timeSliceIndex)]: 0,
      [Symbol(pino.stringify)]: [Function: stringify],
      [Symbol(pino.stringifySafe)]: [Function: stringify],
      [Symbol(pino.stringifiers)]: {},
      [Symbol(pino.end)]: '}\n',
      [Symbol(pino.formatOpts)]: [Object],
      [Symbol(pino.messageKey)]: 'message',
      [Symbol(pino.errorKey)]: 'err',
      [Symbol(pino.nestedKey)]: null,
      [Symbol(pino.nestedKeyStr)]: '',
      [Symbol(pino.serializers)]: [Object],
      [Symbol(pino.mixin)]: undefined,
      [Symbol(pino.mixinMergeStrategy)]: undefined,
      [Symbol(pino.chindings)]: '',
      [Symbol(pino.formatters)]: [Object],
      [Symbol(pino.hooks)]: [Object],
      [Symbol(pino.lsCache)]: [Object],
      [Symbol(pino.levelVal)]: 10
    },
    trace: [Function: bound trace],
    debug: [Function: bound debug],
    info: [Function: bound info],
    warn: [Function: bound warn],
    metric: [Function: bound metric],
    error: [Function: bound error],
    child: [Function: bound child]
  }
} instanceOf(GitHub)
'"master"'
{
  releaseType: 'java-yoshi',
  versioning: undefined,
  bumpMinorPreMajor: undefined,
  bumpPatchForMinorPreMajor: undefined,
  draft: undefined,
  draftPullRequest: undefined,
  packageName: undefined,
  includeComponentInTag: false,
  pullRequestTitlePattern: undefined,
  changelogHost: undefined,
  changelogPath: undefined,
  changelogType: undefined,
  versionFile: undefined,
  extraFiles: undefined,
  initialVersion: undefined
} has("releaseType", java-yoshi)
{
  manifestPath: undefined,
  labels: [ 'foo', 'bar' ],
  releaseLabels: undefined,
  plugins: [],
  logger: GCFLogger {
    destination: SonicBoom {
      _bufs: [],
      _len: 0,
      fd: 1,
      _writing: false,
      _writingBuf: '',
      _ending: false,
      _reopening: false,
      _asyncDrainScheduled: true,
      _hwm: 16387,
      file: null,
      destroyed: false,
      minLength: 0,
      maxLength: 0,
      maxWrite: 16384,
      sync: true,
      _fsync: false,
      append: true,
      mode: undefined,
      retryEAGAIN: [Function (anonymous)],
      mkdir: false,
      release: [Function (anonymous)],
      _events: [Object: null prototype],
      _eventsCount: 2
    },
    pino: EventEmitter {
      levels: [Object],
      silent: [Function: noop],
      onChild: [Function: noop],
      trace: [Function: LOG],
      debug: [Function: LOG],
      info: [Function: LOG],
      warn: [Function: LOG],
      error: [Function: LOG],
      fatal: [Function (anonymous)],
      metric: [Function: LOG],
      [Symbol(pino.useOnlyCustomLevels)]: false,
      [Symbol(pino.stream)]: [SonicBoom],
      [Symbol(pino.time)]: [Function: nullTime],
      [Symbol(pino.timeSliceIndex)]: 0,
      [Symbol(pino.stringify)]: [Function: stringify],
      [Symbol(pino.stringifySafe)]: [Function: stringify],
      [Symbol(pino.stringifiers)]: {},
      [Symbol(pino.end)]: '}\n',
      [Symbol(pino.formatOpts)]: [Object],
      [Symbol(pino.messageKey)]: 'message',
      [Symbol(pino.errorKey)]: 'err',
      [Symbol(pino.nestedKey)]: null,
      [Symbol(pino.nestedKeyStr)]: '',
      [Symbol(pino.serializers)]: [Object],
      [Symbol(pino.mixin)]: undefined,
      [Symbol(pino.mixinMergeStrategy)]: undefined,
      [Symbol(pino.chindings)]: '',
      [Symbol(pino.formatters)]: [Object],
      [Symbol(pino.hooks)]: [Object],
      [Symbol(pino.lsCache)]: [Object],
      [Symbol(pino.levelVal)]: 10
    },
    trace: [Function: bound trace],
    debug: [Function: bound debug],
    info: [Function: bound info],
    warn: [Function: bound warn],
    metric: [Function: bound metric],
    error: [Function: bound error],
    child: [Function: bound child]
  }
} any
undefined
      at Object.fail (node_modules/sinon/lib/sinon/assert.js:120:25)
      at failAssertion (node_modules/sinon/lib/sinon/assert.js:66:20)
      at Object.assert.<computed> [as calledOnceWithExactly] (node_modules/sinon/lib/sinon/assert.js:95:17)
      at Context.<anonymous> (test/release-please.ts:995:20)
      at processTicksAndRejections (internal/process/task_queues.js:95:5)

  6) ReleasePleaseBot
       pull-request labeled event
         should try to tag a GitHub release for an on-demand repo:
     AssertError: expected fromConfig to be called once and with exact arguments 
Call 1:
GitHub {
  getCommitFiles: [AsyncFunction (anonymous)],
  graphqlRequest: [AsyncFunction (anonymous)],
  findFilesByFilenameAndRef: [AsyncFunction (anonymous)],
  findFilesByGlobAndRef: [AsyncFunction (anonymous)],
  createPullRequest: [AsyncFunction (anonymous)],
  getPullRequest: [AsyncFunction (anonymous)],
  updatePullRequest: [AsyncFunction (anonymous)],
  findFilesByExtensionAndRef: [AsyncFunction (anonymous)],
  createRelease: [AsyncFunction (anonymous)],
  commentOnIssue: [AsyncFunction (anonymous)],
  removeIssueLabels: [AsyncFunction (anonymous)],
  addIssueLabels: [AsyncFunction (anonymous)],
  repository: { owner: 'Codertocat', repo: 'Hello-World', defaultBranch: 'master' },
  octokit: OctokitWithDefaults {
    request: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    graphql: [Function: newApi] {
      defaults: [Function: bound withDefaults],
      endpoint: [Function]
    },
    log: {
      debug: [Function: debug],
      info: [Function: info],
      warn: [Function: bound warn],
      error: [Function: bound error]
    },
    hook: [Function: bound register] {
      api: [Object],
      remove: [Function: bound removeHook],
      before: [Function: bound addHook],
      error: [Function: bound addHook],
      after: [Function: bound addHook],
      wrap: [Function: bound addHook]
    },
    auth: [Function: bound auth] AsyncFunction {
      hook: [Function: bound hook] AsyncFunction
    },
    actions: {
      addCustomLabelsToSelfHostedRunnerForOrg: [Function],
      addCustomLabelsToSelfHostedRunnerForRepo: [Function],
      addSelectedRepoToOrgSecret: [Function],
      approveWorkflowRun: [Function],
      cancelWorkflowRun: [Function],
      createOrUpdateEnvironmentSecret: [Function],
      createOrUpdateOrgSecret: [Function],
      createOrUpdateRepoSecret: [Function],
      createRegistrationTokenForOrg: [Function],
      createRegistrationTokenForRepo: [Function],
      createRemoveTokenForOrg: [Function],
      createRemoveTokenForRepo: [Function],
      createWorkflowDispatch: [Function],
      deleteActionsCacheById: [Function],
      deleteActionsCacheByKey: [Function],
      deleteArtifact: [Function],
      deleteEnvironmentSecret: [Function],
      deleteOrgSecret: [Function],
      deleteRepoSecret: [Function],
      deleteSelfHostedRunnerFromOrg: [Function],
      deleteSelfHostedRunnerFromRepo: [Function],
      deleteWorkflowRun: [Function],
      deleteWorkflowRunLogs: [Function],
      disableSelectedRepositoryGithubActionsOrganization: [Function],
      disableWorkflow: [Function],
      downloadArtifact: [Function],
      downloadJobLogsForWorkflowRun: [Function],
      downloadWorkflowRunAttemptLogs: [Function],
      downloadWorkflowRunLogs: [Function],
      enableSelectedRepositoryGithubActionsOrganization: [Function],
      enableWorkflow: [Function],
      getActionsCacheList: [Function],
      getActionsCacheUsage: [Function],
      getActionsCacheUsageByRepoForOrg: [Function],
      getActionsCacheUsageForEnterprise: [Function],
      getActionsCacheUsageForOrg: [Function],
      getAllowedActionsOrganization: [Function],
      getAllowedActionsRepository: [Function],
      getArtifact: [Function],
      getEnvironmentPublicKey: [Function],
      getEnvironmentSecret: [Function],
      getGithubActionsDefaultWorkflowPermissionsEnterprise: [Function],
      getGithubActionsDefaultWorkflowPermissionsOrganization: [Function],
      getGithubActionsDefaultWorkflowPermissionsRepository: [Function],
      getGithubActionsPermissionsOrganization: [Function],
      getGithubActionsPermissionsRepository: [Function],
      getJobForWorkflowRun: [Function],
      getOrgPublicKey: [Function],
      getOrgSecret: [Function],
      getPendingDeploymentsForRun: [Function],
      getRepoPermissions: [Function],
      getRepoPublicKey: [Function],
      getRepoSecret: [Function],
      getReviewsForRun: [Function],
      getSelfHostedRunnerForOrg: [Function],
      getSelfHostedRunnerForRepo: [Function],
      getWorkflow: [Function],
      getWorkflowAccessToRepository: [Function],
      getWorkflowRun: [Function],
      getWorkflowRunAttempt: [Function],
      getWorkflowRunUsage: [Function],
      getWorkflowUsage: [Function],
      listArtifactsForRepo: [Function],
      listEnvironmentSecrets: [Function],
      listJobsForWorkflowRun: [Function],
      listJobsForWorkflowRunAttempt: [Function],
      listLabelsForSelfHostedRunnerForOrg: [Function],
      listLabelsForSelfHostedRunnerForRepo: [Function],
      listOrgSecrets: [Function],
      listRepoSecrets: [Function],
      listRepoWorkflows: [Function],
      listRunnerApplicationsForOrg: [Function],
      listRunnerApplicationsForRepo: [Function],
      listSelectedReposForOrgSecret: [Function],
      listSelectedRepositoriesEnabledGithubActionsOrganization: [Function],
      listSelfHostedRunnersForOrg: [Function],
      listSelfHostedRunnersForRepo: [Function],
      listWorkflowRunArtifacts: [Function],
      listWorkflowRuns: [Function],
      listWorkflowRunsForRepo: [Function],
      reRunJobForWorkflowRun: [Function],
      reRunWorkflow: [Function],
      reRunWorkflowFailedJobs: [Function],
      removeAllCustomLabelsFromSelfHostedRunnerForOrg: [Function],
      removeAllCustomLabelsFromSelfHostedRunnerForRepo: [Function],
      removeCustomLabelFromSelfHostedRunnerForOrg: [Function],
      removeCustomLabelFromSelfHostedRunnerForRepo: [Function],
      removeSelectedRepoFromOrgSecret: [Function],
      reviewPendingDeploymentsForRun: [Function],
      setAllowedActionsOrganization: [Function],
      setAllowedActionsRepository: [Function],
      setCustomLabelsForSelfHostedRunnerForOrg: [Function],
      setCustomLabelsForSelfHostedRunnerForRepo: [Function],
      setGithubActionsDefaultWorkflowPermissionsEnterprise: [Function],
      setGithubActionsDefaultWorkflowPermissionsOrganization: [Function],
      setGithubActionsDefaultWorkflowPermissionsRepository: [Function],
      setGithubActionsPermissionsOrganization: [Function],
      setGithubActionsPermissionsRepository: [Function],
      setSelectedReposForOrgSecret: [Function],
      setSelectedRepositoriesEnabledGithubActionsOrganization: [Function],
      setWorkflowAccessToRepository: [Function]
    },
    activity: {
      checkRepoIsStarredByAuthenticatedUser: [Function],
      deleteRepoSubscription: [Function],
      deleteThreadSubscription: [Function],
      getFeeds: [Function],
      getRepoSubscription: [Function],
      getThread: [Function],
      getThreadSubscriptionForAuthenticatedUser: [Function],
      listEventsForAuthenticatedUser: [Function],
      listNotificationsForAuthenticatedUser: [Function],
      listOrgEventsForAuthenticatedUser: [Function],
      listPublicEvents: [Function],
      listPublicEventsForRepoNetwork: [Function],
      listPublicEventsForUser: [Function],
      listPublicOrgEvents: [Function],
      listReceivedEventsForUser: [Function],
      listReceivedPublicEventsForUser: [Function],
      listRepoEvents: [Function],
      listRepoNotificationsForAuthenticatedUser: [Function],
      listReposStarredByAuthenticatedUser: [Function],
      listReposStarredByUser: [Function],
      listReposWatchedByUser: [Function],
      listStargazersForRepo: [Function],
      listWatchedReposForAuthenticatedUser: [Function],
      listWatchersForRepo: [Function],
      markNotificationsAsRead: [Function],
      markRepoNotificationsAsRead: [Function],
      markThreadAsRead: [Function],
      setRepoSubscription: [Function],
      setThreadSubscription: [Function],
      starRepoForAuthenticatedUser: [Function],
      unstarRepoForAuthenticatedUser: [Function]
    },
    apps: {
      addRepoToInstallation: [Function],
      addRepoToInstallationForAuthenticatedUser: [Function],
      checkToken: [Function],
      createFromManifest: [Function],
      createInstallationAccessToken: [Function],
      deleteAuthorization: [Function],
      deleteInstallation: [Function],
      deleteToken: [Function],
      getAuthenticated: [Function],
      getBySlug: [Function],
      getInstallation: [Function],
      getOrgInstallation: [Function],
      getRepoInstallation: [Function],
      getSubscriptionPlanForAccount: [Function],
      getSubscriptionPlanForAccountStubbed: [Function],
      getUserInstallation: [Function],
      getWebhookConfigForApp: [Function],
      getWebhookDelivery: [Function],
      listAccountsForPlan: [Function],
      listAccountsForPlanStubbed: [Function],
      listInstallationReposForAuthenticatedUser: [Function],
      listInstallations: [Function],
      listInstallationsForAuthenticatedUser: [Function],
      listPlans: [Function],
      listPlansStubbed: [Function],
      listReposAccessibleToInstallation: [Function],
      listSubscriptionsForAuthenticatedUser: [Function],
      listSubscriptionsForAuthenticatedUserStubbed: [Function],
      listWebhookDeliveries: [Function],
      redeliverWebhookDelivery: [Function],
      removeRepoFromInstallation: [Function],
      removeRepoFromInstallationForAuthenticatedUser: [Function],
      resetToken: [Function],
      revokeInstallationAccessToken: [Function],
      scopeToken: [Function],
      suspendInstallation: [Function],
      unsuspendInstallation: [Function],
      updateWebhookConfigForApp: [Function]
    },
    billing: {
      getGithubActionsBillingOrg: [Function],
      getGithubActionsBillingUser: [Function],
      getGithubAdvancedSecurityBillingGhe: [Function],
      getGithubAdvancedSecurityBillingOrg: [Function],
      getGithubPackagesBillingOrg: [Function],
      getGithubPackagesBillingUser: [Function],
      getSharedStorageBillingOrg: [Function],
      getSharedStorageBillingUser: [Function]
    },
    checks: {
      create: [Function],
      createSuite: [Function],
      get: [Function],
      getSuite: [Function],
      listAnnotations: [Function],
      listForRef: [Function],
      listForSuite: [Function],
      listSuitesForRef: [Function],
      rerequestRun: [Function],
      rerequestSuite: [Function],
      setSuitesPreferences: [Function],
      update: [Function]
    },
    codeScanning: {
      deleteAnalysis: [Function],
      getAlert: [Function],
      getAnalysis: [Function],
      getCodeqlDatabase: [Function],
      getSarif: [Function],
      listAlertInstances: [Function],
      listAlertsForEnterprise: [Function],
      listAlertsForOrg: [Function],
      listAlertsForRepo: [Function],
      listAlertsInstances: [Function],
      listCodeqlDatabases: [Function],
      listRecentAnalyses: [Function],
      updateAlert: [Function],
      uploadSarif: [Function]
    },
    codesOfConduct: { getAllCodesOfConduct: [Function], getConductCode: [Function] },
    codespaces: {
      addRepositoryForSecretForAuthenticatedUser: [Function],
      addSelectedRepoToOrgSecret: [Function],
      codespaceMachinesForAuthenticatedUser: [Function],
      createForAuthenticatedUser: [Function],
      createOrUpdateOrgSecret: [Function],
      createOrUpdateRepoSecret: [Function],
      createOrUpdateSecretForAuthenticatedUser: [Function],
      createWithPrForAuthenticatedUser: [Function],
      createWithRepoForAuthenticatedUser: [Function],
      deleteForAuthenticatedUser: [Function],
      deleteFromOrganization: [Function],
      deleteOrgSecret: [Function],
      deleteRepoSecret: [Function],
      deleteSecretForAuthenticatedUser: [Function],
      exportForAuthenticatedUser: [Function],
      getExportDetailsForAuthenticatedUser: [Function],
      getForAuthenticatedUser: [Function],
      getOrgPublicKey: [Function],
      getOrgSecret: [Function],
      getPublicKeyForAuthenticatedUser: [Function],
      getRepoPublicKey: [Function],
      getRepoSecret: [Function],
      getSecretForAuthenticatedUser: [Function],
      listDevcontainersInRepositoryForAuthenticatedUser: [Function],
      listForAuthenticatedUser: [Function],
      listInOrganization: [Function],
      listInRepositoryForAuthenticatedUser: [Function],
      listOrgSecrets: [Function],
      listRepoSecrets: [Function],
      listRepositoriesForSecretForAuthenticatedUser: [Function],
      listSecretsForAuthenticatedUser: [Function],
      listSelectedReposForOrgSecret: [Function],
      preFlightWithRepoForAuthenticatedUser: [Function],
      removeRepositoryForSecretForAuthenticatedUser: [Function],
      removeSelectedRepoFromOrgSecret: [Function],
      repoMachinesForAuthenticatedUser: [Function],
      setRepositoriesForSecretForAuthenticatedUser: [Function],
      setSelectedReposForOrgSecret: [Function],
      startForAuthenticatedUser: [Function],
      stopForAuthenticatedUser: [Function],
      stopInOrganization: [Function],
      updateForAuthenticatedUser: [Function]
    },
    dependabot: {
      addSelectedRepoToOrgSecret: [Function],
      createOrUpdateOrgSecret: [Function],
      createOrUpdateRepoSecret: [Function],
      deleteOrgSecret: [Function],
      deleteRepoSecret: [Function],
      getAlert: [Function],
      getOrgPublicKey: [Function],
      getOrgSecret: [Function],
      getRepoPublicKey: [Function],
      getRepoSecret: [Function],
      listAlertsForRepo: [Function],
      listOrgSecrets: [Function],
      listRepoSecrets: [Function],
      listSelectedReposForOrgSecret: [Function],
      removeSelectedRepoFromOrgSecret: [Function],
      setSelectedReposForOrgSecret: [Function],
      updateAlert: [Function]
    },
    dependencyGraph: { createRepositorySnapshot: [Function], diffRange: [Function] },
    emojis: { get: [Function] },
    enterpriseAdmin: {
      addCustomLabelsToSelfHostedRunnerForEnterprise: [Function],
      disableSelectedOrganizationGithubActionsEnterprise: [Function],
      enableSelectedOrganizationGithubActionsEnterprise: [Function],
      getAllowedActionsEnterprise: [Function],
      getGithubActionsPermissionsEnterprise: [Function],
      getServerStatistics: [Function],
      listLabelsForSelfHostedRunnerForEnterprise: [Function],
      listSelectedOrganizationsEnabledGithubActionsEnterprise: [Function],
      removeAllCustomLabelsFromSelfHostedRunnerForEnterprise: [Function],
      removeCustomLabelFromSelfHostedRunnerForEnterprise: [Function],
      setAllowedActionsEnterprise: [Function],
      setCustomLabelsForSelfHostedRunnerForEnterprise: [Function],
      setGithubActionsPermissionsEnterprise: [Function],
      setSelectedOrganizationsEnabledGithubActionsEnterprise: [Function]
    },
    gists: {
      checkIsStarred: [Function],
      create: [Function],
      createComment: [Function],
      delete: [Function],
      deleteComment: [Function],
      fork: [Function],
      get: [Function],
      getComment: [Function],
      getRevision: [Function],
      list: [Function],
      listComments: [Function],
      listCommits: [Function],
      listForUser: [Function],
      listForks: [Function],
      listPublic: [Function],
      listStarred: [Function],
      star: [Function],
      unstar: [Function],
      update: [Function],
      updateComment: [Function]
    },
    git: {
      createBlob: [Function],
      createCommit: [Function],
      createRef: [Function],
      createTag: [Function],
      createTree: [Function],
      deleteRef: [Function],
      getBlob: [Function],
      getCommit: [Function],
      getRef: [Function],
      getTag: [Function],
      getTree: [Function],
      listMatchingRefs: [Function],
      updateRef: [Function]
    },
    gitignore: { getAllTemplates: [Function], getTemplate: [Function] },
    interactions: {
      getRestrictionsForAuthenticatedUser: [Function],
      getRestrictionsForOrg: [Function],
      getRestrictionsForRepo: [Function],
      getRestrictionsForYourPublicRepos: [Function],
      removeRestrictionsForAuthenticatedUser: [Function],
      removeRestrictionsForOrg: [Function],
      removeRestrictionsForRepo: [Function],
      removeRestrictionsForYourPublicRepos: [Function],
      setRestrictionsForAuthenticatedUser: [Function],
      setRestrictionsForOrg: [Function],
      setRestrictionsForRepo: [Function],
      setRestrictionsForYourPublicRepos: [Function]
    },
    issues: {
      addAssignees: [Function],
      addLabels: [Function],
      checkUserCanBeAssigned: [Function],
      create: [Function],
      createComment: [Function],
      createLabel: [Function],
      createMilestone: [Function],
      deleteComment: [Function],
      deleteLabel: [Function],
      deleteMilestone: [Function],
      get: [Function],
      getComment: [Function],
      getEvent: [Function],
      getLabel: [Function],
      getMilestone: [Function],
      list: [Function],
      listAssignees: [Function],
      listComments: [Function],
      listCommentsForRepo: [Function],
      listEvents: [Function],
      listEventsForRepo: [Function],
      listEventsForTimeline: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listForRepo: [Function],
      listLabelsForMilestone: [Function],
      listLabelsForRepo: [Function],
      listLabelsOnIssue: [Function],
      listMilestones: [Function],
      lock: [Function],
      removeAllLabels: [Function],
      removeAssignees: [Function],
      removeLabel: [Function],
      setLabels: [Function],
      unlock: [Function],
      update: [Function],
      updateComment: [Function],
      updateLabel: [Function],
      updateMilestone: [Function]
    },
    licenses: {
      get: [Function],
      getAllCommonlyUsed: [Function],
      getForRepo: [Function]
    },
    markdown: { render: [Function], renderRaw: [Function] },
    meta: {
      get: [Function],
      getOctocat: [Function],
      getZen: [Function],
      root: [Function]
    },
    migrations: {
      cancelImport: [Function],
      deleteArchiveForAuthenticatedUser: [Function],
      deleteArchiveForOrg: [Function],
      downloadArchiveForOrg: [Function],
      getArchiveForAuthenticatedUser: [Function],
      getCommitAuthors: [Function],
      getImportStatus: [Function],
      getLargeFiles: [Function],
      getStatusForAuthenticatedUser: [Function],
      getStatusForOrg: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listReposForAuthenticatedUser: [Function],
      listReposForOrg: [Function],
      listReposForUser: [Function],
      mapCommitAuthor: [Function],
      setLfsPreference: [Function],
      startForAuthenticatedUser: [Function],
      startForOrg: [Function],
      startImport: [Function],
      unlockRepoForAuthenticatedUser: [Function],
      unlockRepoForOrg: [Function],
      updateImport: [Function]
    },
    orgs: {
      addSecurityManagerTeam: [Function],
      blockUser: [Function],
      cancelInvitation: [Function],
      checkBlockedUser: [Function],
      checkMembershipForUser: [Function],
      checkPublicMembershipForUser: [Function],
      convertMemberToOutsideCollaborator: [Function],
      createCustomRole: [Function],
      createInvitation: [Function],
      createWebhook: [Function],
      deleteCustomRole: [Function],
      deleteWebhook: [Function],
      enableOrDisableSecurityProductOnAllOrgRepos: [Function],
      get: [Function],
      getMembershipForAuthenticatedUser: [Function],
      getMembershipForUser: [Function],
      getWebhook: [Function],
      getWebhookConfigForOrg: [Function],
      getWebhookDelivery: [Function],
      list: [Function],
      listAppInstallations: [Function],
      listBlockedUsers: [Function],
      listCustomRoles: [Function],
      listFailedInvitations: [Function],
      listFineGrainedPermissions: [Function],
      listForAuthenticatedUser: [Function],
      listForUser: [Function],
      listInvitationTeams: [Function],
      listMembers: [Function],
      listMembershipsForAuthenticatedUser: [Function],
      listOutsideCollaborators: [Function],
      listPendingInvitations: [Function],
      listPublicMembers: [Function],
      listSecurityManagerTeams: [Function],
      listWebhookDeliveries: [Function],
      listWebhooks: [Function],
      pingWebhook: [Function],
      redeliverWebhookDelivery: [Function],
      removeMember: [Function],
      removeMembershipForUser: [Function],
      removeOutsideCollaborator: [Function],
      removePublicMembershipForAuthenticatedUser: [Function],
      removeSecurityManagerTeam: [Function],
      setMembershipForUser: [Function],
      setPublicMembershipForAuthenticatedUser: [Function],
      unblockUser: [Function],
      update: [Function],
      updateCustomRole: [Function],
      updateMembershipForAuthenticatedUser: [Function],
      updateWebhook: [Function],
      updateWebhookConfigForOrg: [Function]
    },
    packages: {
      deletePackageForAuthenticatedUser: [Function],
      deletePackageForOrg: [Function],
      deletePackageForUser: [Function],
      deletePackageVersionForAuthenticatedUser: [Function],
      deletePackageVersionForOrg: [Function],
      deletePackageVersionForUser: [Function],
      getAllPackageVersionsForAPackageOwnedByAnOrg: [Function],
      getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [Function],
      getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [Function],
      getAllPackageVersionsForPackageOwnedByOrg: [Function],
      getAllPackageVersionsForPackageOwnedByUser: [Function],
      getPackageForAuthenticatedUser: [Function],
      getPackageForOrganization: [Function],
      getPackageForUser: [Function],
      getPackageVersionForAuthenticatedUser: [Function],
      getPackageVersionForOrganization: [Function],
      getPackageVersionForUser: [Function],
      listPackagesForAuthenticatedUser: [Function],
      listPackagesForOrganization: [Function],
      listPackagesForUser: [Function],
      restorePackageForAuthenticatedUser: [Function],
      restorePackageForOrg: [Function],
      restorePackageForUser: [Function],
      restorePackageVersionForAuthenticatedUser: [Function],
      restorePackageVersionForOrg: [Function],
      restorePackageVersionForUser: [Function]
    },
    projects: {
      addCollaborator: [Function],
      createCard: [Function],
      createColumn: [Function],
      createForAuthenticatedUser: [Function],
      createForOrg: [Function],
      createForRepo: [Function],
      delete: [Function],
      deleteCard: [Function],
      deleteColumn: [Function],
      get: [Function],
      getCard: [Function],
      getColumn: [Function],
      getPermissionForUser: [Function],
      listCards: [Function],
      listCollaborators: [Function],
      listColumns: [Function],
      listForOrg: [Function],
      listForRepo: [Function],
      listForUser: [Function],
      moveCard: [Function],
      moveColumn: [Function],
      removeCollaborator: [Function],
      update: [Function],
      updateCard: [Function],
      updateColumn: [Function]
    },
    pulls: {
      checkIfMerged: [Function],
      create: [Function],
      createReplyForReviewComment: [Function],
      createReview: [Function],
      createReviewComment: [Function],
      deletePendingReview: [Function],
      deleteReviewComment: [Function],
      dismissReview: [Function],
      get: [Function],
      getReview: [Function],
      getReviewComment: [Function],
      list: [Function],
      listCommentsForReview: [Function],
      listCommits: [Function],
      listFiles: [Function],
      listRequestedReviewers: [Function],
      listReviewComments: [Function],
      listReviewCommentsForRepo: [Function],
      listReviews: [Function],
      merge: [Function],
      removeRequestedReviewers: [Function],
      requestReviewers: [Function],
      submitReview: [Function],
      update: [Function],
      updateBranch: [Function],
      updateReview: [Function],
      updateReviewComment: [Function]
    },
    rateLimit: { get: [Function] },
    reactions: {
      createForCommitComment: [Function],
      createForIssue: [Function],
      createForIssueComment: [Function],
      createForPullRequestReviewComment: [Function],
      createForRelease: [Function],
      createForTeamDiscussionCommentInOrg: [Function],
      createForTeamDiscussionInOrg: [Function],
      deleteForCommitComment: [Function],
      deleteForIssue: [Function],
      deleteForIssueComment: [Function],
      deleteForPullRequestComment: [Function],
      deleteForRelease: [Function],
      deleteForTeamDiscussion: [Function],
      deleteForTeamDiscussionComment: [Function],
      listForCommitComment: [Function],
      listForIssue: [Function],
      listForIssueComment: [Function],
      listForPullRequestReviewComment: [Function],
      listForRelease: [Function],
      listForTeamDiscussionCommentInOrg: [Function],
      listForTeamDiscussionInOrg: [Function]
    },
    repos: {
      acceptInvitation: [Function],
      acceptInvitationForAuthenticatedUser: [Function],
      addAppAccessRestrictions: [Function],
      addCollaborator: [Function],
      addStatusCheckContexts: [Function],
      addTeamAccessRestrictions: [Function],
      addUserAccessRestrictions: [Function],
      checkCollaborator: [Function],
      checkVulnerabilityAlerts: [Function],
      codeownersErrors: [Function],
      compareCommits: [Function],
      compareCommitsWithBasehead: [Function],
      createAutolink: [Function],
      createCommitComment: [Function],
      createCommitSignatureProtection: [Function],
      createCommitStatus: [Function],
      createDeployKey: [Function],
      createDeployment: [Function],
      createDeploymentBranchPolicy: [Function],
      createDeploymentStatus: [Function],
      createDispatchEvent: [Function],
      createForAuthenticatedUser: [Function],
      createFork: [Function],
      createInOrg: [Function],
      createOrUpdateEnvironment: [Function],
      createOrUpdateFileContents: [Function],
      createPagesDeployment: [Function],
      createPagesSite: [Function],
      createRelease: [Function],
      createTagProtection: [Function],
      createUsingTemplate: [Function],
      createWebhook: [Function],
      declineInvitation: [Function],
      declineInvitationForAuthenticatedUser: [Function],
      delete: [Function],
      deleteAccessRestrictions: [Function],
      deleteAdminBranchProtection: [Function],
      deleteAnEnvironment: [Function],
      deleteAutolink: [Function],
      deleteBranchProtection: [Function],
      deleteCommitComment: [Function],
      deleteCommitSignatureProtection: [Function],
      deleteDeployKey: [Function],
      deleteDeployment: [Function],
      deleteDeploymentBranchPolicy: [Function],
      deleteFile: [Function],
      deleteInvitation: [Function],
      deletePagesSite: [Function],
      deletePullRequestReviewProtection: [Function],
      deleteRelease: [Function],
      deleteReleaseAsset: [Function],
      deleteTagProtection: [Function],
      deleteWebhook: [Function],
      disableAutomatedSecurityFixes: [Function],
      disableLfsForRepo: [Function],
      disableVulnerabilityAlerts: [Function],
      downloadArchive: [Function],
      downloadTarballArchive: [Function],
      downloadZipballArchive: [Function],
      enableAutomatedSecurityFixes: [Function],
      enableLfsForRepo: [Function],
      enableVulnerabilityAlerts: [Function],
      generateReleaseNotes: [Function],
      get: [Function],
      getAccessRestrictions: [Function],
      getAdminBranchProtection: [Function],
      getAllEnvironments: [Function],
      getAllStatusCheckContexts: [Function],
      getAllTopics: [Function],
      getAppsWithAccessToProtectedBranch: [Function],
      getAutolink: [Function],
      getBranch: [Function],
      getBranchProtection: [Function],
      getClones: [Function],
      getCodeFrequencyStats: [Function],
      getCollaboratorPermissionLevel: [Function],
      getCombinedStatusForRef: [Function],
      getCommit: [Function],
      getCommitActivityStats: [Function],
      getCommitComment: [Function],
      getCommitSignatureProtection: [Function],
      getCommunityProfileMetrics: [Function],
      getContent: [Function],
      getContributorsStats: [Function],
      getDeployKey: [Function],
      getDeployment: [Function],
      getDeploymentBranchPolicy: [Function],
      getDeploymentStatus: [Function],
      getEnvironment: [Function],
      getLatestPagesBuild: [Function],
      getLatestRelease: [Function],
      getPages: [Function],
      getPagesBuild: [Function],
      getPagesHealthCheck: [Function],
      getParticipationStats: [Function],
      getPullRequestReviewProtection: [Function],
      getPunchCardStats: [Function],
      getReadme: [Function],
      getReadmeInDirectory: [Function],
      getRelease: [Function],
      getReleaseAsset: [Function],
      getReleaseByTag: [Function],
      getStatusChecksProtection: [Function],
      getTeamsWithAccessToProtectedBranch: [Function],
      getTopPaths: [Function],
      getTopReferrers: [Function],
      getUsersWithAccessToProtectedBranch: [Function],
      getViews: [Function],
      getWebhook: [Function],
      getWebhookConfigForRepo: [Function],
      getWebhookDelivery: [Function],
      listAutolinks: [Function],
      listBranches: [Function],
      listBranchesForHeadCommit: [Function],
      listCollaborators: [Function],
      listCommentsForCommit: [Function],
      listCommitCommentsForRepo: [Function],
      listCommitStatusesForRef: [Function],
      listCommits: [Function],
      listContributors: [Function],
      listDeployKeys: [Function],
      listDeploymentBranchPolicies: [Function],
      listDeploymentStatuses: [Function],
      listDeployments: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listForUser: [Function],
      listForks: [Function],
      listInvitations: [Function],
      listInvitationsForAuthenticatedUser: [Function],
      listLanguages: [Function],
      listPagesBuilds: [Function],
      listPublic: [Function],
      listPullRequestsAssociatedWithCommit: [Function],
      listReleaseAssets: [Function],
      listReleases: [Function],
      listTagProtection: [Function],
      listTags: [Function],
      listTeams: [Function],
      listWebhookDeliveries: [Function],
      listWebhooks: [Function],
      merge: [Function],
      mergeUpstream: [Function],
      pingWebhook: [Function],
      redeliverWebhookDelivery: [Function],
      removeAppAccessRestrictions: [Function],
      removeCollaborator: [Function],
      removeStatusCheckContexts: [Function],
      removeStatusCheckProtection: [Function],
      removeTeamAccessRestrictions: [Function],
      removeUserAccessRestrictions: [Function],
      renameBranch: [Function],
      replaceAllTopics: [Function],
      requestPagesBuild: [Function],
      setAdminBranchProtection: [Function],
      setAppAccessRestrictions: [Function],
      setStatusCheckContexts: [Function],
      setTeamAccessRestrictions: [Function],
      setUserAccessRestrictions: [Function],
      testPushWebhook: [Function],
      transfer: [Function],
      update: [Function],
      updateBranchProtection: [Function],
      updateCommitComment: [Function],
      updateDeploymentBranchPolicy: [Function],
      updateInformationAboutPagesSite: [Function],
      updateInvitation: [Function],
      updatePullRequestReviewProtection: [Function],
      updateRelease: [Function],
      updateReleaseAsset: [Function],
      updateStatusCheckPotection: [Function],
      updateStatusCheckProtection: [Function],
      updateWebhook: [Function],
      updateWebhookConfigForRepo: [Function],
      uploadReleaseAsset: [Function]
    },
    search: {
      code: [Function],
      commits: [Function],
      issuesAndPullRequests: [Function],
      labels: [Function],
      repos: [Function],
      topics: [Function],
      users: [Function]
    },
    secretScanning: {
      getAlert: [Function],
      listAlertsForEnterprise: [Function],
      listAlertsForOrg: [Function],
      listAlertsForRepo: [Function],
      listLocationsForAlert: [Function],
      updateAlert: [Function]
    },
    teams: {
      addOrUpdateMembershipForUserInOrg: [Function],
      addOrUpdateProjectPermissionsInOrg: [Function],
      addOrUpdateRepoPermissionsInOrg: [Function],
      checkPermissionsForProjectInOrg: [Function],
      checkPermissionsForRepoInOrg: [Function],
      create: [Function],
      createDiscussionCommentInOrg: [Function],
      createDiscussionInOrg: [Function],
      deleteDiscussionCommentInOrg: [Function],
      deleteDiscussionInOrg: [Function],
      deleteInOrg: [Function],
      getByName: [Function],
      getDiscussionCommentInOrg: [Function],
      getDiscussionInOrg: [Function],
      getMembershipForUserInOrg: [Function],
      list: [Function],
      listChildInOrg: [Function],
      listDiscussionCommentsInOrg: [Function],
      listDiscussionsInOrg: [Function],
      listForAuthenticatedUser: [Function],
      listMembersInOrg: [Function],
      listPendingInvitationsInOrg: [Function],
      listProjectsInOrg: [Function],
      listReposInOrg: [Function],
      removeMembershipForUserInOrg: [Function],
      removeProjectInOrg: [Function],
      removeRepoInOrg: [Function],
      updateDiscussionCommentInOrg: [Function],
      updateDiscussionInOrg: [Function],
      updateInOrg: [Function]
    },
    users: {
      addEmailForAuthenticated: [Function],
      addEmailForAuthenticatedUser: [Function],
      block: [Function],
      checkBlocked: [Function],
      checkFollowingForUser: [Function],
      checkPersonIsFollowedByAuthenticated: [Function],
      createGpgKeyForAuthenticated: [Function],
      createGpgKeyForAuthenticatedUser: [Function],
      createPublicSshKeyForAuthenticated: [Function],
      createPublicSshKeyForAuthenticatedUser: [Function],
      createSshSigningKeyForAuthenticatedUser: [Function],
      deleteEmailForAuthenticated: [Function],
      deleteEmailForAuthenticatedUser: [Function],
      deleteGpgKeyForAuthenticated: [Function],
      deleteGpgKeyForAuthenticatedUser: [Function],
      deletePublicSshKeyForAuthenticated: [Function],
      deletePublicSshKeyForAuthenticatedUser: [Function],
      deleteSshSigningKeyForAuthenticatedUser: [Function],
      follow: [Function],
      getAuthenticated: [Function],
      getByUsername: [Function],
      getContextForUser: [Function],
      getGpgKeyForAuthenticated: [Function],
      getGpgKeyForAuthenticatedUser: [Function],
      getPublicSshKeyForAuthenticated: [Function],
      getPublicSshKeyForAuthenticatedUser: [Function],
      getSshSigningKeyForAuthenticatedUser: [Function],
      list: [Function],
      listBlockedByAuthenticated: [Function],
      listBlockedByAuthenticatedUser: [Function],
      listEmailsForAuthenticated: [Function],
      listEmailsForAuthenticatedUser: [Function],
      listFollowedByAuthenticated: [Function],
      listFollowedByAuthenticatedUser: [Function],
      listFollowersForAuthenticatedUser: [Function],
      listFollowersForUser: [Function],
      listFollowingForUser: [Function],
      listGpgKeysForAuthenticated: [Function],
      listGpgKeysForAuthenticatedUser: [Function],
      listGpgKeysForUser: [Function],
      listPublicEmailsForAuthenticated: [Function],
      listPublicEmailsForAuthenticatedUser: [Function],
      listPublicKeysForUser: [Function],
      listPublicSshKeysForAuthenticated: [Function],
      listPublicSshKeysForAuthenticatedUser: [Function],
      listSshSigningKeysForAuthenticatedUser: [Function],
      listSshSigningKeysForUser: [Function],
      setPrimaryEmailVisibilityForAuthenticated: [Function],
      setPrimaryEmailVisibilityForAuthenticatedUser: [Function],
      unblock: [Function],
      unfollow: [Function],
      updateAuthenticated: [Function]
    },
    rest: {
      actions: [Object],
      activity: [Object],
      apps: [Object],
      billing: [Object],
      checks: [Object],
      codeScanning: [Object],
      codesOfConduct: [Object],
      codespaces: [Object],
      dependabot: [Object],
      dependencyGraph: [Object],
      emojis: [Object],
      enterpriseAdmin: [Object],
      gists: [Object],
      git: [Object],
      gitignore: [Object],
      interactions: [Object],
      issues: [Object],
      licenses: [Object],
      markdown: [Object],
      meta: [Object],
      migrations: [Object],
      orgs: [Object],
      packages: [Object],
      projects: [Object],
      pulls: [Object],
      rateLimit: [Object],
      reactions: [Object],
      repos: [Object],
      search: [Object],
      secretScanning: [Object],
      teams: [Object],
      users: [Object]
    },
    paginate: [Function: bound paginate] { iterator: [Function: bound iterator] }
  },
  request: [Function: newApi] {
    endpoint: [Function: bound endpointWithDefaults] {
      DEFAULTS: [Object],
      defaults: [Function: bound withDefaults],
      merge: [Function: bound merge],
      parse: [Function: parse]
    },
    defaults: [Function: bound withDefaults]
  },
  graphql: [Function: newApi] {
    defaults: [Function: bound withDefaults],
    endpoint: [Function: bound endpointWithDefaults] {
      DEFAULTS: [Object],
      defaults: [Function: bound withDefaults],
      merge: [Function: bound merge],
      parse: [Function: parse]
    }
  },
  fileCache: RepositoryFileCache {
    octokit: OctokitWithDefaults {
      request: [Function],
      graphql: [Function],
      log: [Object],
      hook: [Function],
      auth: [AsyncFunction],
      actions: [Object],
      activity: [Object],
      apps: [Object],
      billing: [Object],
      checks: [Object],
      codeScanning: [Object],
      codesOfConduct: [Object],
      codespaces: [Object],
      dependabot: [Object],
      dependencyGraph: [Object],
      emojis: [Object],
      enterpriseAdmin: [Object],
      gists: [Object],
      git: [Object],
      gitignore: [Object],
      interactions: [Object],
      issues: [Object],
      licenses: [Object],
      markdown: [Object],
      meta: [Object],
      migrations: [Object],
      orgs: [Object],
      packages: [Object],
      projects: [Object],
      pulls: [Object],
      rateLimit: [Object],
      reactions: [Object],
      repos: [Object],
      search: [Object],
      secretScanning: [Object],
      teams: [Object],
      users: [Object],
      rest: [Object],
      paginate: [Function]
    },
    repository: {
      owner: 'Codertocat',
      repo: 'Hello-World',
      defaultBranch: 'master'
    },
    cache: Map(0) {}
  },
  logger: GCFLogger {
    destination: SonicBoom {
      _bufs: [],
      _len: 0,
      fd: 1,
      _writing: false,
      _writingBuf: '',
      _ending: false,
      _reopening: false,
      _asyncDrainScheduled: true,
      _hwm: 16387,
      file: null,
      destroyed: false,
      minLength: 0,
      maxLength: 0,
      maxWrite: 16384,
      sync: true,
      _fsync: false,
      append: true,
      mode: undefined,
      retryEAGAIN: [Function (anonymous)],
      mkdir: false,
      release: [Function (anonymous)],
      _events: [Object: null prototype],
      _eventsCount: 2
    },
    pino: EventEmitter {
      levels: [Object],
      silent: [Function: noop],
      onChild: [Function: noop],
      trace: [Function: LOG],
      debug: [Function: LOG],
      info: [Function: LOG],
      warn: [Function: LOG],
      error: [Function: LOG],
      fatal: [Function (anonymous)],
      metric: [Function: LOG],
      [Symbol(pino.useOnlyCustomLevels)]: false,
      [Symbol(pino.stream)]: [SonicBoom],
      [Symbol(pino.time)]: [Function: nullTime],
      [Symbol(pino.timeSliceIndex)]: 0,
      [Symbol(pino.stringify)]: [Function: stringify],
      [Symbol(pino.stringifySafe)]: [Function: stringify],
      [Symbol(pino.stringifiers)]: {},
      [Symbol(pino.end)]: '}\n',
      [Symbol(pino.formatOpts)]: [Object],
      [Symbol(pino.messageKey)]: 'message',
      [Symbol(pino.errorKey)]: 'err',
      [Symbol(pino.nestedKey)]: null,
      [Symbol(pino.nestedKeyStr)]: '',
      [Symbol(pino.serializers)]: [Object],
      [Symbol(pino.mixin)]: undefined,
      [Symbol(pino.mixinMergeStrategy)]: undefined,
      [Symbol(pino.chindings)]: '',
      [Symbol(pino.formatters)]: [Object],
      [Symbol(pino.hooks)]: [Object],
      [Symbol(pino.lsCache)]: [Object],
      [Symbol(pino.levelVal)]: 10
    },
    trace: [Function: bound trace],
    debug: [Function: bound debug],
    info: [Function: bound info],
    warn: [Function: bound warn],
    metric: [Function: bound metric],
    error: [Function: bound error],
    child: [Function: bound child]
  }
} instanceOf(GitHub)
'"master"'
{
  releaseType: 'java-yoshi',
  versioning: undefined,
  bumpMinorPreMajor: undefined,
  bumpPatchForMinorPreMajor: undefined,
  draft: undefined,
  draftPullRequest: undefined,
  packageName: undefined,
  includeComponentInTag: false,
  pullRequestTitlePattern: undefined,
  changelogHost: undefined,
  changelogPath: undefined,
  changelogType: undefined,
  versionFile: undefined,
  extraFiles: undefined,
  initialVersion: undefined
} has("releaseType", java-yoshi)
{
  manifestPath: undefined,
  labels: [ 'foo', 'bar' ],
  releaseLabels: undefined,
  plugins: [],
  logger: GCFLogger {
    destination: SonicBoom {
      _bufs: [],
      _len: 0,
      fd: 1,
      _writing: false,
      _writingBuf: '',
      _ending: false,
      _reopening: false,
      _asyncDrainScheduled: true,
      _hwm: 16387,
      file: null,
      destroyed: false,
      minLength: 0,
      maxLength: 0,
      maxWrite: 16384,
      sync: true,
      _fsync: false,
      append: true,
      mode: undefined,
      retryEAGAIN: [Function (anonymous)],
      mkdir: false,
      release: [Function (anonymous)],
      _events: [Object: null prototype],
      _eventsCount: 2
    },
    pino: EventEmitter {
      levels: [Object],
      silent: [Function: noop],
      onChild: [Function: noop],
      trace: [Function: LOG],
      debug: [Function: LOG],
      info: [Function: LOG],
      warn: [Function: LOG],
      error: [Function: LOG],
      fatal: [Function (anonymous)],
      metric: [Function: LOG],
      [Symbol(pino.useOnlyCustomLevels)]: false,
      [Symbol(pino.stream)]: [SonicBoom],
      [Symbol(pino.time)]: [Function: nullTime],
      [Symbol(pino.timeSliceIndex)]: 0,
      [Symbol(pino.stringify)]: [Function: stringify],
      [Symbol(pino.stringifySafe)]: [Function: stringify],
      [Symbol(pino.stringifiers)]: {},
      [Symbol(pino.end)]: '}\n',
      [Symbol(pino.formatOpts)]: [Object],
      [Symbol(pino.messageKey)]: 'message',
      [Symbol(pino.errorKey)]: 'err',
      [Symbol(pino.nestedKey)]: null,
      [Symbol(pino.nestedKeyStr)]: '',
      [Symbol(pino.serializers)]: [Object],
      [Symbol(pino.mixin)]: undefined,
      [Symbol(pino.mixinMergeStrategy)]: undefined,
      [Symbol(pino.chindings)]: '',
      [Symbol(pino.formatters)]: [Object],
      [Symbol(pino.hooks)]: [Object],
      [Symbol(pino.lsCache)]: [Object],
      [Symbol(pino.levelVal)]: 10
    },
    trace: [Function: bound trace],
    debug: [Function: bound debug],
    info: [Function: bound info],
    warn: [Function: bound warn],
    metric: [Function: bound metric],
    error: [Function: bound error],
    child: [Function: bound child]
  }
} any
undefined
Call 2:
GitHub {
  getCommitFiles: [AsyncFunction (anonymous)],
  graphqlRequest: [AsyncFunction (anonymous)],
  findFilesByFilenameAndRef: [AsyncFunction (anonymous)],
  findFilesByGlobAndRef: [AsyncFunction (anonymous)],
  createPullRequest: [AsyncFunction (anonymous)],
  getPullRequest: [AsyncFunction (anonymous)],
  updatePullRequest: [AsyncFunction (anonymous)],
  findFilesByExtensionAndRef: [AsyncFunction (anonymous)],
  createRelease: [AsyncFunction (anonymous)],
  commentOnIssue: [AsyncFunction (anonymous)],
  removeIssueLabels: [AsyncFunction (anonymous)],
  addIssueLabels: [AsyncFunction (anonymous)],
  repository: { owner: 'Codertocat', repo: 'Hello-World', defaultBranch: 'master' },
  octokit: OctokitWithDefaults {
    request: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    graphql: [Function: newApi] {
      defaults: [Function: bound withDefaults],
      endpoint: [Function]
    },
    log: {
      debug: [Function: debug],
      info: [Function: info],
      warn: [Function: bound warn],
      error: [Function: bound error]
    },
    hook: [Function: bound register] {
      api: [Object],
      remove: [Function: bound removeHook],
      before: [Function: bound addHook],
      error: [Function: bound addHook],
      after: [Function: bound addHook],
      wrap: [Function: bound addHook]
    },
    auth: [Function: bound auth] AsyncFunction {
      hook: [Function: bound hook] AsyncFunction
    },
    actions: {
      addCustomLabelsToSelfHostedRunnerForOrg: [Function],
      addCustomLabelsToSelfHostedRunnerForRepo: [Function],
      addSelectedRepoToOrgSecret: [Function],
      approveWorkflowRun: [Function],
      cancelWorkflowRun: [Function],
      createOrUpdateEnvironmentSecret: [Function],
      createOrUpdateOrgSecret: [Function],
      createOrUpdateRepoSecret: [Function],
      createRegistrationTokenForOrg: [Function],
      createRegistrationTokenForRepo: [Function],
      createRemoveTokenForOrg: [Function],
      createRemoveTokenForRepo: [Function],
      createWorkflowDispatch: [Function],
      deleteActionsCacheById: [Function],
      deleteActionsCacheByKey: [Function],
      deleteArtifact: [Function],
      deleteEnvironmentSecret: [Function],
      deleteOrgSecret: [Function],
      deleteRepoSecret: [Function],
      deleteSelfHostedRunnerFromOrg: [Function],
      deleteSelfHostedRunnerFromRepo: [Function],
      deleteWorkflowRun: [Function],
      deleteWorkflowRunLogs: [Function],
      disableSelectedRepositoryGithubActionsOrganization: [Function],
      disableWorkflow: [Function],
      downloadArtifact: [Function],
      downloadJobLogsForWorkflowRun: [Function],
      downloadWorkflowRunAttemptLogs: [Function],
      downloadWorkflowRunLogs: [Function],
      enableSelectedRepositoryGithubActionsOrganization: [Function],
      enableWorkflow: [Function],
      getActionsCacheList: [Function],
      getActionsCacheUsage: [Function],
      getActionsCacheUsageByRepoForOrg: [Function],
      getActionsCacheUsageForEnterprise: [Function],
      getActionsCacheUsageForOrg: [Function],
      getAllowedActionsOrganization: [Function],
      getAllowedActionsRepository: [Function],
      getArtifact: [Function],
      getEnvironmentPublicKey: [Function],
      getEnvironmentSecret: [Function],
      getGithubActionsDefaultWorkflowPermissionsEnterprise: [Function],
      getGithubActionsDefaultWorkflowPermissionsOrganization: [Function],
      getGithubActionsDefaultWorkflowPermissionsRepository: [Function],
      getGithubActionsPermissionsOrganization: [Function],
      getGithubActionsPermissionsRepository: [Function],
      getJobForWorkflowRun: [Function],
      getOrgPublicKey: [Function],
      getOrgSecret: [Function],
      getPendingDeploymentsForRun: [Function],
      getRepoPermissions: [Function],
      getRepoPublicKey: [Function],
      getRepoSecret: [Function],
      getReviewsForRun: [Function],
      getSelfHostedRunnerForOrg: [Function],
      getSelfHostedRunnerForRepo: [Function],
      getWorkflow: [Function],
      getWorkflowAccessToRepository: [Function],
      getWorkflowRun: [Function],
      getWorkflowRunAttempt: [Function],
      getWorkflowRunUsage: [Function],
      getWorkflowUsage: [Function],
      listArtifactsForRepo: [Function],
      listEnvironmentSecrets: [Function],
      listJobsForWorkflowRun: [Function],
      listJobsForWorkflowRunAttempt: [Function],
      listLabelsForSelfHostedRunnerForOrg: [Function],
      listLabelsForSelfHostedRunnerForRepo: [Function],
      listOrgSecrets: [Function],
      listRepoSecrets: [Function],
      listRepoWorkflows: [Function],
      listRunnerApplicationsForOrg: [Function],
      listRunnerApplicationsForRepo: [Function],
      listSelectedReposForOrgSecret: [Function],
      listSelectedRepositoriesEnabledGithubActionsOrganization: [Function],
      listSelfHostedRunnersForOrg: [Function],
      listSelfHostedRunnersForRepo: [Function],
      listWorkflowRunArtifacts: [Function],
      listWorkflowRuns: [Function],
      listWorkflowRunsForRepo: [Function],
      reRunJobForWorkflowRun: [Function],
      reRunWorkflow: [Function],
      reRunWorkflowFailedJobs: [Function],
      removeAllCustomLabelsFromSelfHostedRunnerForOrg: [Function],
      removeAllCustomLabelsFromSelfHostedRunnerForRepo: [Function],
      removeCustomLabelFromSelfHostedRunnerForOrg: [Function],
      removeCustomLabelFromSelfHostedRunnerForRepo: [Function],
      removeSelectedRepoFromOrgSecret: [Function],
      reviewPendingDeploymentsForRun: [Function],
      setAllowedActionsOrganization: [Function],
      setAllowedActionsRepository: [Function],
      setCustomLabelsForSelfHostedRunnerForOrg: [Function],
      setCustomLabelsForSelfHostedRunnerForRepo: [Function],
      setGithubActionsDefaultWorkflowPermissionsEnterprise: [Function],
      setGithubActionsDefaultWorkflowPermissionsOrganization: [Function],
      setGithubActionsDefaultWorkflowPermissionsRepository: [Function],
      setGithubActionsPermissionsOrganization: [Function],
      setGithubActionsPermissionsRepository: [Function],
      setSelectedReposForOrgSecret: [Function],
      setSelectedRepositoriesEnabledGithubActionsOrganization: [Function],
      setWorkflowAccessToRepository: [Function]
    },
    activity: {
      checkRepoIsStarredByAuthenticatedUser: [Function],
      deleteRepoSubscription: [Function],
      deleteThreadSubscription: [Function],
      getFeeds: [Function],
      getRepoSubscription: [Function],
      getThread: [Function],
      getThreadSubscriptionForAuthenticatedUser: [Function],
      listEventsForAuthenticatedUser: [Function],
      listNotificationsForAuthenticatedUser: [Function],
      listOrgEventsForAuthenticatedUser: [Function],
      listPublicEvents: [Function],
      listPublicEventsForRepoNetwork: [Function],
      listPublicEventsForUser: [Function],
      listPublicOrgEvents: [Function],
      listReceivedEventsForUser: [Function],
      listReceivedPublicEventsForUser: [Function],
      listRepoEvents: [Function],
      listRepoNotificationsForAuthenticatedUser: [Function],
      listReposStarredByAuthenticatedUser: [Function],
      listReposStarredByUser: [Function],
      listReposWatchedByUser: [Function],
      listStargazersForRepo: [Function],
      listWatchedReposForAuthenticatedUser: [Function],
      listWatchersForRepo: [Function],
      markNotificationsAsRead: [Function],
      markRepoNotificationsAsRead: [Function],
      markThreadAsRead: [Function],
      setRepoSubscription: [Function],
      setThreadSubscription: [Function],
      starRepoForAuthenticatedUser: [Function],
      unstarRepoForAuthenticatedUser: [Function]
    },
    apps: {
      addRepoToInstallation: [Function],
      addRepoToInstallationForAuthenticatedUser: [Function],
      checkToken: [Function],
      createFromManifest: [Function],
      createInstallationAccessToken: [Function],
      deleteAuthorization: [Function],
      deleteInstallation: [Function],
      deleteToken: [Function],
      getAuthenticated: [Function],
      getBySlug: [Function],
      getInstallation: [Function],
      getOrgInstallation: [Function],
      getRepoInstallation: [Function],
      getSubscriptionPlanForAccount: [Function],
      getSubscriptionPlanForAccountStubbed: [Function],
      getUserInstallation: [Function],
      getWebhookConfigForApp: [Function],
      getWebhookDelivery: [Function],
      listAccountsForPlan: [Function],
      listAccountsForPlanStubbed: [Function],
      listInstallationReposForAuthenticatedUser: [Function],
      listInstallations: [Function],
      listInstallationsForAuthenticatedUser: [Function],
      listPlans: [Function],
      listPlansStubbed: [Function],
      listReposAccessibleToInstallation: [Function],
      listSubscriptionsForAuthenticatedUser: [Function],
      listSubscriptionsForAuthenticatedUserStubbed: [Function],
      listWebhookDeliveries: [Function],
      redeliverWebhookDelivery: [Function],
      removeRepoFromInstallation: [Function],
      removeRepoFromInstallationForAuthenticatedUser: [Function],
      resetToken: [Function],
      revokeInstallationAccessToken: [Function],
      scopeToken: [Function],
      suspendInstallation: [Function],
      unsuspendInstallation: [Function],
      updateWebhookConfigForApp: [Function]
    },
    billing: {
      getGithubActionsBillingOrg: [Function],
      getGithubActionsBillingUser: [Function],
      getGithubAdvancedSecurityBillingGhe: [Function],
      getGithubAdvancedSecurityBillingOrg: [Function],
      getGithubPackagesBillingOrg: [Function],
      getGithubPackagesBillingUser: [Function],
      getSharedStorageBillingOrg: [Function],
      getSharedStorageBillingUser: [Function]
    },
    checks: {
      create: [Function],
      createSuite: [Function],
      get: [Function],
      getSuite: [Function],
      listAnnotations: [Function],
      listForRef: [Function],
      listForSuite: [Function],
      listSuitesForRef: [Function],
      rerequestRun: [Function],
      rerequestSuite: [Function],
      setSuitesPreferences: [Function],
      update: [Function]
    },
    codeScanning: {
      deleteAnalysis: [Function],
      getAlert: [Function],
      getAnalysis: [Function],
      getCodeqlDatabase: [Function],
      getSarif: [Function],
      listAlertInstances: [Function],
      listAlertsForEnterprise: [Function],
      listAlertsForOrg: [Function],
      listAlertsForRepo: [Function],
      listAlertsInstances: [Function],
      listCodeqlDatabases: [Function],
      listRecentAnalyses: [Function],
      updateAlert: [Function],
      uploadSarif: [Function]
    },
    codesOfConduct: { getAllCodesOfConduct: [Function], getConductCode: [Function] },
    codespaces: {
      addRepositoryForSecretForAuthenticatedUser: [Function],
      addSelectedRepoToOrgSecret: [Function],
      codespaceMachinesForAuthenticatedUser: [Function],
      createForAuthenticatedUser: [Function],
      createOrUpdateOrgSecret: [Function],
      createOrUpdateRepoSecret: [Function],
      createOrUpdateSecretForAuthenticatedUser: [Function],
      createWithPrForAuthenticatedUser: [Function],
      createWithRepoForAuthenticatedUser: [Function],
      deleteForAuthenticatedUser: [Function],
      deleteFromOrganization: [Function],
      deleteOrgSecret: [Function],
      deleteRepoSecret: [Function],
      deleteSecretForAuthenticatedUser: [Function],
      exportForAuthenticatedUser: [Function],
      getExportDetailsForAuthenticatedUser: [Function],
      getForAuthenticatedUser: [Function],
      getOrgPublicKey: [Function],
      getOrgSecret: [Function],
      getPublicKeyForAuthenticatedUser: [Function],
      getRepoPublicKey: [Function],
      getRepoSecret: [Function],
      getSecretForAuthenticatedUser: [Function],
      listDevcontainersInRepositoryForAuthenticatedUser: [Function],
      listForAuthenticatedUser: [Function],
      listInOrganization: [Function],
      listInRepositoryForAuthenticatedUser: [Function],
      listOrgSecrets: [Function],
      listRepoSecrets: [Function],
      listRepositoriesForSecretForAuthenticatedUser: [Function],
      listSecretsForAuthenticatedUser: [Function],
      listSelectedReposForOrgSecret: [Function],
      preFlightWithRepoForAuthenticatedUser: [Function],
      removeRepositoryForSecretForAuthenticatedUser: [Function],
      removeSelectedRepoFromOrgSecret: [Function],
      repoMachinesForAuthenticatedUser: [Function],
      setRepositoriesForSecretForAuthenticatedUser: [Function],
      setSelectedReposForOrgSecret: [Function],
      startForAuthenticatedUser: [Function],
      stopForAuthenticatedUser: [Function],
      stopInOrganization: [Function],
      updateForAuthenticatedUser: [Function]
    },
    dependabot: {
      addSelectedRepoToOrgSecret: [Function],
      createOrUpdateOrgSecret: [Function],
      createOrUpdateRepoSecret: [Function],
      deleteOrgSecret: [Function],
      deleteRepoSecret: [Function],
      getAlert: [Function],
      getOrgPublicKey: [Function],
      getOrgSecret: [Function],
      getRepoPublicKey: [Function],
      getRepoSecret: [Function],
      listAlertsForRepo: [Function],
      listOrgSecrets: [Function],
      listRepoSecrets: [Function],
      listSelectedReposForOrgSecret: [Function],
      removeSelectedRepoFromOrgSecret: [Function],
      setSelectedReposForOrgSecret: [Function],
      updateAlert: [Function]
    },
    dependencyGraph: { createRepositorySnapshot: [Function], diffRange: [Function] },
    emojis: { get: [Function] },
    enterpriseAdmin: {
      addCustomLabelsToSelfHostedRunnerForEnterprise: [Function],
      disableSelectedOrganizationGithubActionsEnterprise: [Function],
      enableSelectedOrganizationGithubActionsEnterprise: [Function],
      getAllowedActionsEnterprise: [Function],
      getGithubActionsPermissionsEnterprise: [Function],
      getServerStatistics: [Function],
      listLabelsForSelfHostedRunnerForEnterprise: [Function],
      listSelectedOrganizationsEnabledGithubActionsEnterprise: [Function],
      removeAllCustomLabelsFromSelfHostedRunnerForEnterprise: [Function],
      removeCustomLabelFromSelfHostedRunnerForEnterprise: [Function],
      setAllowedActionsEnterprise: [Function],
      setCustomLabelsForSelfHostedRunnerForEnterprise: [Function],
      setGithubActionsPermissionsEnterprise: [Function],
      setSelectedOrganizationsEnabledGithubActionsEnterprise: [Function]
    },
    gists: {
      checkIsStarred: [Function],
      create: [Function],
      createComment: [Function],
      delete: [Function],
      deleteComment: [Function],
      fork: [Function],
      get: [Function],
      getComment: [Function],
      getRevision: [Function],
      list: [Function],
      listComments: [Function],
      listCommits: [Function],
      listForUser: [Function],
      listForks: [Function],
      listPublic: [Function],
      listStarred: [Function],
      star: [Function],
      unstar: [Function],
      update: [Function],
      updateComment: [Function]
    },
    git: {
      createBlob: [Function],
      createCommit: [Function],
      createRef: [Function],
      createTag: [Function],
      createTree: [Function],
      deleteRef: [Function],
      getBlob: [Function],
      getCommit: [Function],
      getRef: [Function],
      getTag: [Function],
      getTree: [Function],
      listMatchingRefs: [Function],
      updateRef: [Function]
    },
    gitignore: { getAllTemplates: [Function], getTemplate: [Function] },
    interactions: {
      getRestrictionsForAuthenticatedUser: [Function],
      getRestrictionsForOrg: [Function],
      getRestrictionsForRepo: [Function],
      getRestrictionsForYourPublicRepos: [Function],
      removeRestrictionsForAuthenticatedUser: [Function],
      removeRestrictionsForOrg: [Function],
      removeRestrictionsForRepo: [Function],
      removeRestrictionsForYourPublicRepos: [Function],
      setRestrictionsForAuthenticatedUser: [Function],
      setRestrictionsForOrg: [Function],
      setRestrictionsForRepo: [Function],
      setRestrictionsForYourPublicRepos: [Function]
    },
    issues: {
      addAssignees: [Function],
      addLabels: [Function],
      checkUserCanBeAssigned: [Function],
      create: [Function],
      createComment: [Function],
      createLabel: [Function],
      createMilestone: [Function],
      deleteComment: [Function],
      deleteLabel: [Function],
      deleteMilestone: [Function],
      get: [Function],
      getComment: [Function],
      getEvent: [Function],
      getLabel: [Function],
      getMilestone: [Function],
      list: [Function],
      listAssignees: [Function],
      listComments: [Function],
      listCommentsForRepo: [Function],
      listEvents: [Function],
      listEventsForRepo: [Function],
      listEventsForTimeline: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listForRepo: [Function],
      listLabelsForMilestone: [Function],
      listLabelsForRepo: [Function],
      listLabelsOnIssue: [Function],
      listMilestones: [Function],
      lock: [Function],
      removeAllLabels: [Function],
      removeAssignees: [Function],
      removeLabel: [Function],
      setLabels: [Function],
      unlock: [Function],
      update: [Function],
      updateComment: [Function],
      updateLabel: [Function],
      updateMilestone: [Function]
    },
    licenses: {
      get: [Function],
      getAllCommonlyUsed: [Function],
      getForRepo: [Function]
    },
    markdown: { render: [Function], renderRaw: [Function] },
    meta: {
      get: [Function],
      getOctocat: [Function],
      getZen: [Function],
      root: [Function]
    },
    migrations: {
      cancelImport: [Function],
      deleteArchiveForAuthenticatedUser: [Function],
      deleteArchiveForOrg: [Function],
      downloadArchiveForOrg: [Function],
      getArchiveForAuthenticatedUser: [Function],
      getCommitAuthors: [Function],
      getImportStatus: [Function],
      getLargeFiles: [Function],
      getStatusForAuthenticatedUser: [Function],
      getStatusForOrg: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listReposForAuthenticatedUser: [Function],
      listReposForOrg: [Function],
      listReposForUser: [Function],
      mapCommitAuthor: [Function],
      setLfsPreference: [Function],
      startForAuthenticatedUser: [Function],
      startForOrg: [Function],
      startImport: [Function],
      unlockRepoForAuthenticatedUser: [Function],
      unlockRepoForOrg: [Function],
      updateImport: [Function]
    },
    orgs: {
      addSecurityManagerTeam: [Function],
      blockUser: [Function],
      cancelInvitation: [Function],
      checkBlockedUser: [Function],
      checkMembershipForUser: [Function],
      checkPublicMembershipForUser: [Function],
      convertMemberToOutsideCollaborator: [Function],
      createCustomRole: [Function],
      createInvitation: [Function],
      createWebhook: [Function],
      deleteCustomRole: [Function],
      deleteWebhook: [Function],
      enableOrDisableSecurityProductOnAllOrgRepos: [Function],
      get: [Function],
      getMembershipForAuthenticatedUser: [Function],
      getMembershipForUser: [Function],
      getWebhook: [Function],
      getWebhookConfigForOrg: [Function],
      getWebhookDelivery: [Function],
      list: [Function],
      listAppInstallations: [Function],
      listBlockedUsers: [Function],
      listCustomRoles: [Function],
      listFailedInvitations: [Function],
      listFineGrainedPermissions: [Function],
      listForAuthenticatedUser: [Function],
      listForUser: [Function],
      listInvitationTeams: [Function],
      listMembers: [Function],
      listMembershipsForAuthenticatedUser: [Function],
      listOutsideCollaborators: [Function],
      listPendingInvitations: [Function],
      listPublicMembers: [Function],
      listSecurityManagerTeams: [Function],
      listWebhookDeliveries: [Function],
      listWebhooks: [Function],
      pingWebhook: [Function],
      redeliverWebhookDelivery: [Function],
      removeMember: [Function],
      removeMembershipForUser: [Function],
      removeOutsideCollaborator: [Function],
      removePublicMembershipForAuthenticatedUser: [Function],
      removeSecurityManagerTeam: [Function],
      setMembershipForUser: [Function],
      setPublicMembershipForAuthenticatedUser: [Function],
      unblockUser: [Function],
      update: [Function],
      updateCustomRole: [Function],
      updateMembershipForAuthenticatedUser: [Function],
      updateWebhook: [Function],
      updateWebhookConfigForOrg: [Function]
    },
    packages: {
      deletePackageForAuthenticatedUser: [Function],
      deletePackageForOrg: [Function],
      deletePackageForUser: [Function],
      deletePackageVersionForAuthenticatedUser: [Function],
      deletePackageVersionForOrg: [Function],
      deletePackageVersionForUser: [Function],
      getAllPackageVersionsForAPackageOwnedByAnOrg: [Function],
      getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [Function],
      getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [Function],
      getAllPackageVersionsForPackageOwnedByOrg: [Function],
      getAllPackageVersionsForPackageOwnedByUser: [Function],
      getPackageForAuthenticatedUser: [Function],
      getPackageForOrganization: [Function],
      getPackageForUser: [Function],
      getPackageVersionForAuthenticatedUser: [Function],
      getPackageVersionForOrganization: [Function],
      getPackageVersionForUser: [Function],
      listPackagesForAuthenticatedUser: [Function],
      listPackagesForOrganization: [Function],
      listPackagesForUser: [Function],
      restorePackageForAuthenticatedUser: [Function],
      restorePackageForOrg: [Function],
      restorePackageForUser: [Function],
      restorePackageVersionForAuthenticatedUser: [Function],
      restorePackageVersionForOrg: [Function],
      restorePackageVersionForUser: [Function]
    },
    projects: {
      addCollaborator: [Function],
      createCard: [Function],
      createColumn: [Function],
      createForAuthenticatedUser: [Function],
      createForOrg: [Function],
      createForRepo: [Function],
      delete: [Function],
      deleteCard: [Function],
      deleteColumn: [Function],
      get: [Function],
      getCard: [Function],
      getColumn: [Function],
      getPermissionForUser: [Function],
      listCards: [Function],
      listCollaborators: [Function],
      listColumns: [Function],
      listForOrg: [Function],
      listForRepo: [Function],
      listForUser: [Function],
      moveCard: [Function],
      moveColumn: [Function],
      removeCollaborator: [Function],
      update: [Function],
      updateCard: [Function],
      updateColumn: [Function]
    },
    pulls: {
      checkIfMerged: [Function],
      create: [Function],
      createReplyForReviewComment: [Function],
      createReview: [Function],
      createReviewComment: [Function],
      deletePendingReview: [Function],
      deleteReviewComment: [Function],
      dismissReview: [Function],
      get: [Function],
      getReview: [Function],
      getReviewComment: [Function],
      list: [Function],
      listCommentsForReview: [Function],
      listCommits: [Function],
      listFiles: [Function],
      listRequestedReviewers: [Function],
      listReviewComments: [Function],
      listReviewCommentsForRepo: [Function],
      listReviews: [Function],
      merge: [Function],
      removeRequestedReviewers: [Function],
      requestReviewers: [Function],
      submitReview: [Function],
      update: [Function],
      updateBranch: [Function],
      updateReview: [Function],
      updateReviewComment: [Function]
    },
    rateLimit: { get: [Function] },
    reactions: {
      createForCommitComment: [Function],
      createForIssue: [Function],
      createForIssueComment: [Function],
      createForPullRequestReviewComment: [Function],
      createForRelease: [Function],
      createForTeamDiscussionCommentInOrg: [Function],
      createForTeamDiscussionInOrg: [Function],
      deleteForCommitComment: [Function],
      deleteForIssue: [Function],
      deleteForIssueComment: [Function],
      deleteForPullRequestComment: [Function],
      deleteForRelease: [Function],
      deleteForTeamDiscussion: [Function],
      deleteForTeamDiscussionComment: [Function],
      listForCommitComment: [Function],
      listForIssue: [Function],
      listForIssueComment: [Function],
      listForPullRequestReviewComment: [Function],
      listForRelease: [Function],
      listForTeamDiscussionCommentInOrg: [Function],
      listForTeamDiscussionInOrg: [Function]
    },
    repos: {
      acceptInvitation: [Function],
      acceptInvitationForAuthenticatedUser: [Function],
      addAppAccessRestrictions: [Function],
      addCollaborator: [Function],
      addStatusCheckContexts: [Function],
      addTeamAccessRestrictions: [Function],
      addUserAccessRestrictions: [Function],
      checkCollaborator: [Function],
      checkVulnerabilityAlerts: [Function],
      codeownersErrors: [Function],
      compareCommits: [Function],
      compareCommitsWithBasehead: [Function],
      createAutolink: [Function],
      createCommitComment: [Function],
      createCommitSignatureProtection: [Function],
      createCommitStatus: [Function],
      createDeployKey: [Function],
      createDeployment: [Function],
      createDeploymentBranchPolicy: [Function],
      createDeploymentStatus: [Function],
      createDispatchEvent: [Function],
      createForAuthenticatedUser: [Function],
      createFork: [Function],
      createInOrg: [Function],
      createOrUpdateEnvironment: [Function],
      createOrUpdateFileContents: [Function],
      createPagesDeployment: [Function],
      createPagesSite: [Function],
      createRelease: [Function],
      createTagProtection: [Function],
      createUsingTemplate: [Function],
      createWebhook: [Function],
      declineInvitation: [Function],
      declineInvitationForAuthenticatedUser: [Function],
      delete: [Function],
      deleteAccessRestrictions: [Function],
      deleteAdminBranchProtection: [Function],
      deleteAnEnvironment: [Function],
      deleteAutolink: [Function],
      deleteBranchProtection: [Function],
      deleteCommitComment: [Function],
      deleteCommitSignatureProtection: [Function],
      deleteDeployKey: [Function],
      deleteDeployment: [Function],
      deleteDeploymentBranchPolicy: [Function],
      deleteFile: [Function],
      deleteInvitation: [Function],
      deletePagesSite: [Function],
      deletePullRequestReviewProtection: [Function],
      deleteRelease: [Function],
      deleteReleaseAsset: [Function],
      deleteTagProtection: [Function],
      deleteWebhook: [Function],
      disableAutomatedSecurityFixes: [Function],
      disableLfsForRepo: [Function],
      disableVulnerabilityAlerts: [Function],
      downloadArchive: [Function],
      downloadTarballArchive: [Function],
      downloadZipballArchive: [Function],
      enableAutomatedSecurityFixes: [Function],
      enableLfsForRepo: [Function],
      enableVulnerabilityAlerts: [Function],
      generateReleaseNotes: [Function],
      get: [Function],
      getAccessRestrictions: [Function],
      getAdminBranchProtection: [Function],
      getAllEnvironments: [Function],
      getAllStatusCheckContexts: [Function],
      getAllTopics: [Function],
      getAppsWithAccessToProtectedBranch: [Function],
      getAutolink: [Function],
      getBranch: [Function],
      getBranchProtection: [Function],
      getClones: [Function],
      getCodeFrequencyStats: [Function],
      getCollaboratorPermissionLevel: [Function],
      getCombinedStatusForRef: [Function],
      getCommit: [Function],
      getCommitActivityStats: [Function],
      getCommitComment: [Function],
      getCommitSignatureProtection: [Function],
      getCommunityProfileMetrics: [Function],
      getContent: [Function],
      getContributorsStats: [Function],
      getDeployKey: [Function],
      getDeployment: [Function],
      getDeploymentBranchPolicy: [Function],
      getDeploymentStatus: [Function],
      getEnvironment: [Function],
      getLatestPagesBuild: [Function],
      getLatestRelease: [Function],
      getPages: [Function],
      getPagesBuild: [Function],
      getPagesHealthCheck: [Function],
      getParticipationStats: [Function],
      getPullRequestReviewProtection: [Function],
      getPunchCardStats: [Function],
      getReadme: [Function],
      getReadmeInDirectory: [Function],
      getRelease: [Function],
      getReleaseAsset: [Function],
      getReleaseByTag: [Function],
      getStatusChecksProtection: [Function],
      getTeamsWithAccessToProtectedBranch: [Function],
      getTopPaths: [Function],
      getTopReferrers: [Function],
      getUsersWithAccessToProtectedBranch: [Function],
      getViews: [Function],
      getWebhook: [Function],
      getWebhookConfigForRepo: [Function],
      getWebhookDelivery: [Function],
      listAutolinks: [Function],
      listBranches: [Function],
      listBranchesForHeadCommit: [Function],
      listCollaborators: [Function],
      listCommentsForCommit: [Function],
      listCommitCommentsForRepo: [Function],
      listCommitStatusesForRef: [Function],
      listCommits: [Function],
      listContributors: [Function],
      listDeployKeys: [Function],
      listDeploymentBranchPolicies: [Function],
      listDeploymentStatuses: [Function],
      listDeployments: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listForUser: [Function],
      listForks: [Function],
      listInvitations: [Function],
      listInvitationsForAuthenticatedUser: [Function],
      listLanguages: [Function],
      listPagesBuilds: [Function],
      listPublic: [Function],
      listPullRequestsAssociatedWithCommit: [Function],
      listReleaseAssets: [Function],
      listReleases: [Function],
      listTagProtection: [Function],
      listTags: [Function],
      listTeams: [Function],
      listWebhookDeliveries: [Function],
      listWebhooks: [Function],
      merge: [Function],
      mergeUpstream: [Function],
      pingWebhook: [Function],
      redeliverWebhookDelivery: [Function],
      removeAppAccessRestrictions: [Function],
      removeCollaborator: [Function],
      removeStatusCheckContexts: [Function],
      removeStatusCheckProtection: [Function],
      removeTeamAccessRestrictions: [Function],
      removeUserAccessRestrictions: [Function],
      renameBranch: [Function],
      replaceAllTopics: [Function],
      requestPagesBuild: [Function],
      setAdminBranchProtection: [Function],
      setAppAccessRestrictions: [Function],
      setStatusCheckContexts: [Function],
      setTeamAccessRestrictions: [Function],
      setUserAccessRestrictions: [Function],
      testPushWebhook: [Function],
      transfer: [Function],
      update: [Function],
      updateBranchProtection: [Function],
      updateCommitComment: [Function],
      updateDeploymentBranchPolicy: [Function],
      updateInformationAboutPagesSite: [Function],
      updateInvitation: [Function],
      updatePullRequestReviewProtection: [Function],
      updateRelease: [Function],
      updateReleaseAsset: [Function],
      updateStatusCheckPotection: [Function],
      updateStatusCheckProtection: [Function],
      updateWebhook: [Function],
      updateWebhookConfigForRepo: [Function],
      uploadReleaseAsset: [Function]
    },
    search: {
      code: [Function],
      commits: [Function],
      issuesAndPullRequests: [Function],
      labels: [Function],
      repos: [Function],
      topics: [Function],
      users: [Function]
    },
    secretScanning: {
      getAlert: [Function],
      listAlertsForEnterprise: [Function],
      listAlertsForOrg: [Function],
      listAlertsForRepo: [Function],
      listLocationsForAlert: [Function],
      updateAlert: [Function]
    },
    teams: {
      addOrUpdateMembershipForUserInOrg: [Function],
      addOrUpdateProjectPermissionsInOrg: [Function],
      addOrUpdateRepoPermissionsInOrg: [Function],
      checkPermissionsForProjectInOrg: [Function],
      checkPermissionsForRepoInOrg: [Function],
      create: [Function],
      createDiscussionCommentInOrg: [Function],
      createDiscussionInOrg: [Function],
      deleteDiscussionCommentInOrg: [Function],
      deleteDiscussionInOrg: [Function],
      deleteInOrg: [Function],
      getByName: [Function],
      getDiscussionCommentInOrg: [Function],
      getDiscussionInOrg: [Function],
      getMembershipForUserInOrg: [Function],
      list: [Function],
      listChildInOrg: [Function],
      listDiscussionCommentsInOrg: [Function],
      listDiscussionsInOrg: [Function],
      listForAuthenticatedUser: [Function],
      listMembersInOrg: [Function],
      listPendingInvitationsInOrg: [Function],
      listProjectsInOrg: [Function],
      listReposInOrg: [Function],
      removeMembershipForUserInOrg: [Function],
      removeProjectInOrg: [Function],
      removeRepoInOrg: [Function],
      updateDiscussionCommentInOrg: [Function],
      updateDiscussionInOrg: [Function],
      updateInOrg: [Function]
    },
    users: {
      addEmailForAuthenticated: [Function],
      addEmailForAuthenticatedUser: [Function],
      block: [Function],
      checkBlocked: [Function],
      checkFollowingForUser: [Function],
      checkPersonIsFollowedByAuthenticated: [Function],
      createGpgKeyForAuthenticated: [Function],
      createGpgKeyForAuthenticatedUser: [Function],
      createPublicSshKeyForAuthenticated: [Function],
      createPublicSshKeyForAuthenticatedUser: [Function],
      createSshSigningKeyForAuthenticatedUser: [Function],
      deleteEmailForAuthenticated: [Function],
      deleteEmailForAuthenticatedUser: [Function],
      deleteGpgKeyForAuthenticated: [Function],
      deleteGpgKeyForAuthenticatedUser: [Function],
      deletePublicSshKeyForAuthenticated: [Function],
      deletePublicSshKeyForAuthenticatedUser: [Function],
      deleteSshSigningKeyForAuthenticatedUser: [Function],
      follow: [Function],
      getAuthenticated: [Function],
      getByUsername: [Function],
      getContextForUser: [Function],
      getGpgKeyForAuthenticated: [Function],
      getGpgKeyForAuthenticatedUser: [Function],
      getPublicSshKeyForAuthenticated: [Function],
      getPublicSshKeyForAuthenticatedUser: [Function],
      getSshSigningKeyForAuthenticatedUser: [Function],
      list: [Function],
      listBlockedByAuthenticated: [Function],
      listBlockedByAuthenticatedUser: [Function],
      listEmailsForAuthenticated: [Function],
      listEmailsForAuthenticatedUser: [Function],
      listFollowedByAuthenticated: [Function],
      listFollowedByAuthenticatedUser: [Function],
      listFollowersForAuthenticatedUser: [Function],
      listFollowersForUser: [Function],
      listFollowingForUser: [Function],
      listGpgKeysForAuthenticated: [Function],
      listGpgKeysForAuthenticatedUser: [Function],
      listGpgKeysForUser: [Function],
      listPublicEmailsForAuthenticated: [Function],
      listPublicEmailsForAuthenticatedUser: [Function],
      listPublicKeysForUser: [Function],
      listPublicSshKeysForAuthenticated: [Function],
      listPublicSshKeysForAuthenticatedUser: [Function],
      listSshSigningKeysForAuthenticatedUser: [Function],
      listSshSigningKeysForUser: [Function],
      setPrimaryEmailVisibilityForAuthenticated: [Function],
      setPrimaryEmailVisibilityForAuthenticatedUser: [Function],
      unblock: [Function],
      unfollow: [Function],
      updateAuthenticated: [Function]
    },
    rest: {
      actions: [Object],
      activity: [Object],
      apps: [Object],
      billing: [Object],
      checks: [Object],
      codeScanning: [Object],
      codesOfConduct: [Object],
      codespaces: [Object],
      dependabot: [Object],
      dependencyGraph: [Object],
      emojis: [Object],
      enterpriseAdmin: [Object],
      gists: [Object],
      git: [Object],
      gitignore: [Object],
      interactions: [Object],
      issues: [Object],
      licenses: [Object],
      markdown: [Object],
      meta: [Object],
      migrations: [Object],
      orgs: [Object],
      packages: [Object],
      projects: [Object],
      pulls: [Object],
      rateLimit: [Object],
      reactions: [Object],
      repos: [Object],
      search: [Object],
      secretScanning: [Object],
      teams: [Object],
      users: [Object]
    },
    paginate: [Function: bound paginate] { iterator: [Function: bound iterator] }
  },
  request: [Function: newApi] {
    endpoint: [Function: bound endpointWithDefaults] {
      DEFAULTS: [Object],
      defaults: [Function: bound withDefaults],
      merge: [Function: bound merge],
      parse: [Function: parse]
    },
    defaults: [Function: bound withDefaults]
  },
  graphql: [Function: newApi] {
    defaults: [Function: bound withDefaults],
    endpoint: [Function: bound endpointWithDefaults] {
      DEFAULTS: [Object],
      defaults: [Function: bound withDefaults],
      merge: [Function: bound merge],
      parse: [Function: parse]
    }
  },
  fileCache: RepositoryFileCache {
    octokit: OctokitWithDefaults {
      request: [Function],
      graphql: [Function],
      log: [Object],
      hook: [Function],
      auth: [AsyncFunction],
      actions: [Object],
      activity: [Object],
      apps: [Object],
      billing: [Object],
      checks: [Object],
      codeScanning: [Object],
      codesOfConduct: [Object],
      codespaces: [Object],
      dependabot: [Object],
      dependencyGraph: [Object],
      emojis: [Object],
      enterpriseAdmin: [Object],
      gists: [Object],
      git: [Object],
      gitignore: [Object],
      interactions: [Object],
      issues: [Object],
      licenses: [Object],
      markdown: [Object],
      meta: [Object],
      migrations: [Object],
      orgs: [Object],
      packages: [Object],
      projects: [Object],
      pulls: [Object],
      rateLimit: [Object],
      reactions: [Object],
      repos: [Object],
      search: [Object],
      secretScanning: [Object],
      teams: [Object],
      users: [Object],
      rest: [Object],
      paginate: [Function]
    },
    repository: {
      owner: 'Codertocat',
      repo: 'Hello-World',
      defaultBranch: 'master'
    },
    cache: Map(0) {}
  },
  logger: GCFLogger {
    destination: SonicBoom {
      _bufs: [],
      _len: 0,
      fd: 1,
      _writing: false,
      _writingBuf: '',
      _ending: false,
      _reopening: false,
      _asyncDrainScheduled: true,
      _hwm: 16387,
      file: null,
      destroyed: false,
      minLength: 0,
      maxLength: 0,
      maxWrite: 16384,
      sync: true,
      _fsync: false,
      append: true,
      mode: undefined,
      retryEAGAIN: [Function (anonymous)],
      mkdir: false,
      release: [Function (anonymous)],
      _events: [Object: null prototype],
      _eventsCount: 2
    },
    pino: EventEmitter {
      levels: [Object],
      silent: [Function: noop],
      onChild: [Function: noop],
      trace: [Function: LOG],
      debug: [Function: LOG],
      info: [Function: LOG],
      warn: [Function: LOG],
      error: [Function: LOG],
      fatal: [Function (anonymous)],
      metric: [Function: LOG],
      [Symbol(pino.useOnlyCustomLevels)]: false,
      [Symbol(pino.stream)]: [SonicBoom],
      [Symbol(pino.time)]: [Function: nullTime],
      [Symbol(pino.timeSliceIndex)]: 0,
      [Symbol(pino.stringify)]: [Function: stringify],
      [Symbol(pino.stringifySafe)]: [Function: stringify],
      [Symbol(pino.stringifiers)]: {},
      [Symbol(pino.end)]: '}\n',
      [Symbol(pino.formatOpts)]: [Object],
      [Symbol(pino.messageKey)]: 'message',
      [Symbol(pino.errorKey)]: 'err',
      [Symbol(pino.nestedKey)]: null,
      [Symbol(pino.nestedKeyStr)]: '',
      [Symbol(pino.serializers)]: [Object],
      [Symbol(pino.mixin)]: undefined,
      [Symbol(pino.mixinMergeStrategy)]: undefined,
      [Symbol(pino.chindings)]: '',
      [Symbol(pino.formatters)]: [Object],
      [Symbol(pino.hooks)]: [Object],
      [Symbol(pino.lsCache)]: [Object],
      [Symbol(pino.levelVal)]: 10
    },
    trace: [Function: bound trace],
    debug: [Function: bound debug],
    info: [Function: bound info],
    warn: [Function: bound warn],
    metric: [Function: bound metric],
    error: [Function: bound error],
    child: [Function: bound child]
  }
} instanceOf(GitHub)
'"master"'
{
  releaseType: 'java-yoshi',
  versioning: undefined,
  bumpMinorPreMajor: undefined,
  bumpPatchForMinorPreMajor: undefined,
  draft: undefined,
  draftPullRequest: undefined,
  packageName: undefined,
  includeComponentInTag: false,
  pullRequestTitlePattern: undefined,
  changelogHost: undefined,
  changelogPath: undefined,
  changelogType: undefined,
  versionFile: undefined,
  extraFiles: undefined,
  initialVersion: undefined
} has("releaseType", java-yoshi)
{
  manifestPath: undefined,
  labels: [ 'foo', 'bar' ],
  releaseLabels: undefined,
  plugins: [],
  logger: GCFLogger {
    destination: SonicBoom {
      _bufs: [],
      _len: 0,
      fd: 1,
      _writing: false,
      _writingBuf: '',
      _ending: false,
      _reopening: false,
      _asyncDrainScheduled: true,
      _hwm: 16387,
      file: null,
      destroyed: false,
      minLength: 0,
      maxLength: 0,
      maxWrite: 16384,
      sync: true,
      _fsync: false,
      append: true,
      mode: undefined,
      retryEAGAIN: [Function (anonymous)],
      mkdir: false,
      release: [Function (anonymous)],
      _events: [Object: null prototype],
      _eventsCount: 2
    },
    pino: EventEmitter {
      levels: [Object],
      silent: [Function: noop],
      onChild: [Function: noop],
      trace: [Function: LOG],
      debug: [Function: LOG],
      info: [Function: LOG],
      warn: [Function: LOG],
      error: [Function: LOG],
      fatal: [Function (anonymous)],
      metric: [Function: LOG],
      [Symbol(pino.useOnlyCustomLevels)]: false,
      [Symbol(pino.stream)]: [SonicBoom],
      [Symbol(pino.time)]: [Function: nullTime],
      [Symbol(pino.timeSliceIndex)]: 0,
      [Symbol(pino.stringify)]: [Function: stringify],
      [Symbol(pino.stringifySafe)]: [Function: stringify],
      [Symbol(pino.stringifiers)]: {},
      [Symbol(pino.end)]: '}\n',
      [Symbol(pino.formatOpts)]: [Object],
      [Symbol(pino.messageKey)]: 'message',
      [Symbol(pino.errorKey)]: 'err',
      [Symbol(pino.nestedKey)]: null,
      [Symbol(pino.nestedKeyStr)]: '',
      [Symbol(pino.serializers)]: [Object],
      [Symbol(pino.mixin)]: undefined,
      [Symbol(pino.mixinMergeStrategy)]: undefined,
      [Symbol(pino.chindings)]: '',
      [Symbol(pino.formatters)]: [Object],
      [Symbol(pino.hooks)]: [Object],
      [Symbol(pino.lsCache)]: [Object],
      [Symbol(pino.levelVal)]: 10
    },
    trace: [Function: bound trace],
    debug: [Function: bound debug],
    info: [Function: bound info],
    warn: [Function: bound warn],
    metric: [Function: bound metric],
    error: [Function: bound error],
    child: [Function: bound child]
  }
} any
undefined
      at Object.fail (node_modules/sinon/lib/sinon/assert.js:120:25)
      at failAssertion (node_modules/sinon/lib/sinon/assert.js:66:20)
      at Object.assert.<computed> [as calledOnceWithExactly] (node_modules/sinon/lib/sinon/assert.js:95:17)
      at Context.<anonymous> (test/release-please.ts:1023:20)
      at processTicksAndRejections (internal/process/task_queues.js:95:5)



---------------------|---------|----------|---------|---------|-------------------------------------
File                 | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s                   
---------------------|---------|----------|---------|---------|-------------------------------------
All files            |   84.46 |    74.57 |   76.92 |   84.46 |                                     
 config-constants.ts |     100 |      100 |     100 |     100 |                                     
 labels.ts           |     100 |      100 |     100 |     100 |                                     
 release-please.ts   |    83.1 |    74.57 |    90.9 |    83.1 | ...,766-770,780-782,820-824,834-836 
 runner.ts           |      80 |      100 |       0 |      80 | 19-20,22-24                         
---------------------|---------|----------|---------|---------|-------------------------------------
