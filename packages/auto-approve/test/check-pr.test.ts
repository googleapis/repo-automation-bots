// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import {describe, it} from 'mocha';
import assert from 'assert';
import * as fs from 'fs';
import {
  ValidPr,
  checkFilePathsMatch,
  checkPRAgainstConfig,
} from '../src/check-pr';
import nock from 'nock';
import {resolve} from 'path';
import yaml from 'js-yaml';

const {Octokit} = require('@octokit/rest');

const octokit = new Octokit({
  auth: 'mypersonalaccesstoken123',
});

function listChangedFilesPR(status: number, response: {filename: string}[]) {
  return nock('https://api.github.com')
    .get('/repos/testOwner/testRepo/pulls/1/files')
    .reply(status, response);
}

describe('check pr against config', async () => {
  describe('checks that files match at least one of the patterns', () => {
    it('should return true if the file list is empty', () => {
      const prFiles = [
        'packages/spell-check/a.js',
        'packages/spell-check/b.js',
      ];
      const validPr: ValidPr = {
        author: 'yoshi-bot@',
        title: 'chore: autogenerated yadayada',
      };
      assert.ok(checkFilePathsMatch(prFiles, validPr));
    });
    it('should return true if each file matches at least one of the patterns', () => {
      const prFiles = [
        'packages/spell-check/package.json',
        'packages/spell-check/CHANGELOG.md',
      ];
      const validPr: ValidPr = {
        author: 'yoshi-bot@',
        title: 'chore: autogenerated yadayada',
        changedFiles: ['package.json$', 'CHANGELOG.md$'],
      };
      assert.ok(checkFilePathsMatch(prFiles, validPr));
    });

    it('should return false if one file matches does not match any of the patterns', () => {
      const prFiles = [
        'packages/spell-check/package.json',
        'packages/spell-check/CHANGELOG',
      ];
      const validPr: ValidPr = {
        author: 'yoshi-bot@',
        title: 'chore: autogenerated yadayada',
        changedFiles: ['package.json$', 'CHANGELOG.md$'],
      };
      assert.strictEqual(checkFilePathsMatch(prFiles, validPr), false);
    });

    it('should return false if no files match any patterns', () => {
      const prFiles = [
        'packages/spell-check/anythingElse',
        'packages/spell-check/CHANGELOG',
      ];
      const validPr: ValidPr = {
        author: 'yoshi-bot@',
        title: 'chore: autogenerated yadayada',
        changedFiles: ['package.json$', 'CHANGELOG.md$'],
      };
      assert.strictEqual(checkFilePathsMatch(prFiles, validPr), false);
    });
  });

  describe('main pr functioning', async () => {
    const fixturesPath = resolve(__dirname, '../../test/fixtures');
    const validPR = yaml.load(
      fs.readFileSync(
        resolve(fixturesPath, 'config', 'valid-schemas', 'valid-schema1.yml'),
        'utf8'
      )
    ) as {rules: ValidPr[]};

    it('should return false if PR does not match author in validPRConfig', async () => {
      const pr = require(resolve(
        fixturesPath,
        'events',
        'pull_request_opened'
      ));

      const prMatchesConfig = await checkPRAgainstConfig(validPR, pr, octokit);
      assert.strictEqual(prMatchesConfig, false);
    });

    it('should return false if PR does not match title', async () => {
      const pr = require(resolve(
        fixturesPath,
        'events',
        'pull_request_opened_right_author_wrong_title'
      ));

      const prMatchesConfig = await checkPRAgainstConfig(validPR, pr, octokit);
      assert.strictEqual(prMatchesConfig, false);
    });

    it('should return false if PR changed files do not match allowed changed files in config', async () => {
      const pr = require(resolve(
        fixturesPath,
        'events',
        'pull_request_opened_right_author_and_title'
      ));

      const scopes = listChangedFilesPR(200, [
        {filename: 'changedFile1'},
        {filename: 'changedFile2'},
      ]);

      const prMatchesConfig = await checkPRAgainstConfig(validPR, pr, octokit);

      scopes.done();
      assert.strictEqual(prMatchesConfig, false);
    });

    it('should return false if number of changed files does not match allowed number of changed files', async () => {
      const pr = require(resolve(
        fixturesPath,
        'events',
        'pull_request_opened_right_author_and_title'
      ));

      const scopes = listChangedFilesPR(200, [
        {filename: 'README.md'},
        {filename: '.github/readme/synth.metadata/synth.metadata'},
        {filename: 'README.md'},
      ]);

      const prMatchesConfig = await checkPRAgainstConfig(validPR, pr, octokit);

      scopes.done();
      assert.strictEqual(prMatchesConfig, false);
    });

    it('should return true if all elements of PR match', async () => {
      const pr = require(resolve(
        fixturesPath,
        'events',
        'pull_request_opened_right_author_and_title_file_count'
      ));

      const scopes = listChangedFilesPR(200, [
        {filename: 'README.md'},
        {filename: '.github/readme/synth.metadata/synth.metadata'},
      ]);

      const prMatchesConfig = await checkPRAgainstConfig(validPR, pr, octokit);

      scopes.done();
      assert.ok(prMatchesConfig);
    });

    it('should return true if all elements of PR match, and some are left blank in the config', async () => {
      const validPR = yaml.load(
        fs.readFileSync(
          resolve(fixturesPath, 'config', 'valid-schemas', 'valid-schema2.yml'),
          'utf8'
        )
      ) as {rules: ValidPr[]};

      const pr = require(resolve(
        fixturesPath,
        'events',
        'pull_request_opened_right_author_and_title_partial_schema'
      ));

      const prMatchesConfig = await checkPRAgainstConfig(validPR, pr, octokit);

      assert.ok(prMatchesConfig);
    });
  });
});
